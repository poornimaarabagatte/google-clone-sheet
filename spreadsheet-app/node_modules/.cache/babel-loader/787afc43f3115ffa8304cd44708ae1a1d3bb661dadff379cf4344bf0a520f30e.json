{"ast":null,"code":"import { isNode } from '../../utils/is.js';\nimport { map } from '../../utils/array.js';\nimport { escape } from '../../utils/string.js';\nimport { getSafeProperty, isSafeMethod } from '../../utils/customs.js';\nimport { getAssociativity, getPrecedence, isAssociativeWith, properties } from '../operators.js';\nimport { latexOperators } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'OperatorNode';\nvar dependencies = ['Node'];\nexport var createOperatorNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n\n  /**\n   * @constructor OperatorNode\n   * @extends {Node}\n   * An operator with two arguments, like 2+3\n   *\n   * @param {string} op           Operator name, for example '+'\n   * @param {string} fn           Function name, for example 'add'\n   * @param {Node[]} args         Operator arguments\n   * @param {boolean} [implicit]  Is this an implicit multiplication?\n   * @param {boolean} [isPercentage] Is this an percentage Operation?\n   */\n  function OperatorNode(op, fn, args, implicit, isPercentage) {\n    if (!(this instanceof OperatorNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input\n\n    if (typeof op !== 'string') {\n      throw new TypeError('string expected for parameter \"op\"');\n    }\n    if (typeof fn !== 'string') {\n      throw new TypeError('string expected for parameter \"fn\"');\n    }\n    if (!Array.isArray(args) || !args.every(isNode)) {\n      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n    }\n    this.implicit = implicit === true;\n    this.isPercentage = isPercentage === true;\n    this.op = op;\n    this.fn = fn;\n    this.args = args || [];\n  }\n  OperatorNode.prototype = new Node();\n  OperatorNode.prototype.type = 'OperatorNode';\n  OperatorNode.prototype.isOperatorNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  OperatorNode.prototype._compile = function (math, argNames) {\n    // validate fn\n    if (typeof this.fn !== 'string' || !isSafeMethod(math, this.fn)) {\n      if (!math[this.fn]) {\n        throw new Error('Function ' + this.fn + ' missing in provided namespace \"math\"');\n      } else {\n        throw new Error('No access to function \"' + this.fn + '\"');\n      }\n    }\n    var fn = getSafeProperty(math, this.fn);\n    var evalArgs = map(this.args, function (arg) {\n      return arg._compile(math, argNames);\n    });\n    if (evalArgs.length === 1) {\n      var evalArg0 = evalArgs[0];\n      return function evalOperatorNode(scope, args, context) {\n        return fn(evalArg0(scope, args, context));\n      };\n    } else if (evalArgs.length === 2) {\n      var _evalArg = evalArgs[0];\n      var evalArg1 = evalArgs[1];\n      return function evalOperatorNode(scope, args, context) {\n        return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));\n      };\n    } else {\n      return function evalOperatorNode(scope, args, context) {\n        return fn.apply(null, map(evalArgs, function (evalArg) {\n          return evalArg(scope, args, context);\n        }));\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n  OperatorNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.args.length; i++) {\n      callback(this.args[i], 'args[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new OperatorNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {OperatorNode} Returns a transformed copy of the node\n   */\n\n  OperatorNode.prototype.map = function (callback) {\n    var args = [];\n    for (var i = 0; i < this.args.length; i++) {\n      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n    }\n    return new OperatorNode(this.op, this.fn, args, this.implicit, this.isPercentage);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {OperatorNode}\n   */\n\n  OperatorNode.prototype.clone = function () {\n    return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit, this.isPercentage);\n  };\n  /**\n   * Check whether this is an unary OperatorNode:\n   * has exactly one argument, like `-a`.\n   * @return {boolean} Returns true when an unary operator node, false otherwise.\n   */\n\n  OperatorNode.prototype.isUnary = function () {\n    return this.args.length === 1;\n  };\n  /**\n   * Check whether this is a binary OperatorNode:\n   * has exactly two arguments, like `a + b`.\n   * @return {boolean} Returns true when a binary operator node, false otherwise.\n   */\n\n  OperatorNode.prototype.isBinary = function () {\n    return this.args.length === 2;\n  };\n  /**\n   * Calculate which parentheses are necessary. Gets an OperatorNode\n   * (which is the root of the tree) and an Array of Nodes\n   * (this.args) and returns an array where 'true' means that an argument\n   * has to be enclosed in parentheses whereas 'false' means the opposite.\n   *\n   * @param {OperatorNode} root\n   * @param {string} parenthesis\n   * @param {Node[]} args\n   * @param {boolean} latex\n   * @return {boolean[]}\n   * @private\n   */\n\n  function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {\n    // precedence of the root OperatorNode\n    var precedence = getPrecedence(root, parenthesis);\n    var associativity = getAssociativity(root, parenthesis);\n    if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') {\n      return args.map(function (arg) {\n        switch (arg.getContent().type) {\n          // Nodes that don't need extra parentheses\n          case 'ArrayNode':\n          case 'ConstantNode':\n          case 'SymbolNode':\n          case 'ParenthesisNode':\n            return false;\n          default:\n            return true;\n        }\n      });\n    }\n    var result;\n    switch (args.length) {\n      case 0:\n        result = [];\n        break;\n      case 1:\n        // unary operators\n        {\n          // precedence of the operand\n          var operandPrecedence = getPrecedence(args[0], parenthesis); // handle special cases for LaTeX, where some of the parentheses aren't needed\n\n          if (latex && operandPrecedence !== null) {\n            var operandIdentifier;\n            var rootIdentifier;\n            if (parenthesis === 'keep') {\n              operandIdentifier = args[0].getIdentifier();\n              rootIdentifier = root.getIdentifier();\n            } else {\n              // Ignore Parenthesis Nodes when not in 'keep' mode\n              operandIdentifier = args[0].getContent().getIdentifier();\n              rootIdentifier = root.getContent().getIdentifier();\n            }\n            if (properties[precedence][rootIdentifier].latexLeftParens === false) {\n              result = [false];\n              break;\n            }\n            if (properties[operandPrecedence][operandIdentifier].latexParens === false) {\n              result = [false];\n              break;\n            }\n          }\n          if (operandPrecedence === null) {\n            // if the operand has no defined precedence, no parens are needed\n            result = [false];\n            break;\n          }\n          if (operandPrecedence <= precedence) {\n            // if the operands precedence is lower, parens are needed\n            result = [true];\n            break;\n          } // otherwise, no parens needed\n\n          result = [false];\n        }\n        break;\n      case 2:\n        // binary operators\n        {\n          var lhsParens; // left hand side needs parenthesis?\n          // precedence of the left hand side\n\n          var lhsPrecedence = getPrecedence(args[0], parenthesis); // is the root node associative with the left hand side\n\n          var assocWithLhs = isAssociativeWith(root, args[0], parenthesis);\n          if (lhsPrecedence === null) {\n            // if the left hand side has no defined precedence, no parens are needed\n            // FunctionNode for example\n            lhsParens = false;\n          } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {\n            // In case of equal precedence, if the root node is left associative\n            // parens are **never** necessary for the left hand side.\n            // If it is right associative however, parens are necessary\n            // if the root node isn't associative with the left hand side\n            lhsParens = true;\n          } else if (lhsPrecedence < precedence) {\n            lhsParens = true;\n          } else {\n            lhsParens = false;\n          }\n          var rhsParens; // right hand side needs parenthesis?\n          // precedence of the right hand side\n\n          var rhsPrecedence = getPrecedence(args[1], parenthesis); // is the root node associative with the right hand side?\n\n          var assocWithRhs = isAssociativeWith(root, args[1], parenthesis);\n          if (rhsPrecedence === null) {\n            // if the right hand side has no defined precedence, no parens are needed\n            // FunctionNode for example\n            rhsParens = false;\n          } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {\n            // In case of equal precedence, if the root node is right associative\n            // parens are **never** necessary for the right hand side.\n            // If it is left associative however, parens are necessary\n            // if the root node isn't associative with the right hand side\n            rhsParens = true;\n          } else if (rhsPrecedence < precedence) {\n            rhsParens = true;\n          } else {\n            rhsParens = false;\n          } // handle special cases for LaTeX, where some of the parentheses aren't needed\n\n          if (latex) {\n            var _rootIdentifier;\n            var lhsIdentifier;\n            var rhsIdentifier;\n            if (parenthesis === 'keep') {\n              _rootIdentifier = root.getIdentifier();\n              lhsIdentifier = root.args[0].getIdentifier();\n              rhsIdentifier = root.args[1].getIdentifier();\n            } else {\n              // Ignore ParenthesisNodes when not in 'keep' mode\n              _rootIdentifier = root.getContent().getIdentifier();\n              lhsIdentifier = root.args[0].getContent().getIdentifier();\n              rhsIdentifier = root.args[1].getContent().getIdentifier();\n            }\n            if (lhsPrecedence !== null) {\n              if (properties[precedence][_rootIdentifier].latexLeftParens === false) {\n                lhsParens = false;\n              }\n              if (properties[lhsPrecedence][lhsIdentifier].latexParens === false) {\n                lhsParens = false;\n              }\n            }\n            if (rhsPrecedence !== null) {\n              if (properties[precedence][_rootIdentifier].latexRightParens === false) {\n                rhsParens = false;\n              }\n              if (properties[rhsPrecedence][rhsIdentifier].latexParens === false) {\n                rhsParens = false;\n              }\n            }\n          }\n          result = [lhsParens, rhsParens];\n        }\n        break;\n      default:\n        if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') {\n          result = args.map(function (arg) {\n            var argPrecedence = getPrecedence(arg, parenthesis);\n            var assocWithArg = isAssociativeWith(root, arg, parenthesis);\n            var argAssociativity = getAssociativity(arg, parenthesis);\n            if (argPrecedence === null) {\n              // if the argument has no defined precedence, no parens are needed\n              return false;\n            } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {\n              return true;\n            } else if (argPrecedence < precedence) {\n              return true;\n            }\n            return false;\n          });\n        }\n        break;\n    } // handles an edge case of 'auto' parentheses with implicit multiplication of ConstantNode\n    // In that case print parentheses for ParenthesisNodes even though they normally wouldn't be\n    // printed.\n\n    if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis === 'auto' && implicit === 'hide') {\n      result = args.map(function (arg, index) {\n        var isParenthesisNode = arg.getIdentifier() === 'ParenthesisNode';\n        if (result[index] || isParenthesisNode) {\n          // put in parenthesis?\n          return true;\n        }\n        return false;\n      });\n    }\n    return result;\n  }\n  /**\n   * Get string representation.\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  OperatorNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var implicit = options && options.implicit ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);\n    if (args.length === 1) {\n      // unary operators\n      var assoc = getAssociativity(this, parenthesis);\n      var operand = args[0].toString(options);\n      if (parens[0]) {\n        operand = '(' + operand + ')';\n      } // for example for \"not\", we want a space between operand and argument\n\n      var opIsNamed = /[a-zA-Z]+/.test(this.op);\n      if (assoc === 'right') {\n        // prefix operator\n        return this.op + (opIsNamed ? ' ' : '') + operand;\n      } else if (assoc === 'left') {\n        // postfix\n        return operand + (opIsNamed ? ' ' : '') + this.op;\n      } // fall back to postfix\n\n      return operand + this.op;\n    } else if (args.length === 2) {\n      var lhs = args[0].toString(options); // left hand side\n\n      var rhs = args[1].toString(options); // right hand side\n\n      if (parens[0]) {\n        // left hand side in parenthesis?\n        lhs = '(' + lhs + ')';\n      }\n      if (parens[1]) {\n        // right hand side in parenthesis?\n        rhs = '(' + rhs + ')';\n      }\n      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n        return lhs + ' ' + rhs;\n      }\n      return lhs + ' ' + this.op + ' ' + rhs;\n    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n      var stringifiedArgs = args.map(function (arg, index) {\n        arg = arg.toString(options);\n        if (parens[index]) {\n          // put in parenthesis?\n          arg = '(' + arg + ')';\n        }\n        return arg;\n      });\n      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n        return stringifiedArgs.join(' ');\n      }\n      return stringifiedArgs.join(' ' + this.op + ' ');\n    } else {\n      // fallback to formatting as a function call\n      return this.fn + '(' + this.args.join(', ') + ')';\n    }\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n  OperatorNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'OperatorNode',\n      op: this.op,\n      fn: this.fn,\n      args: this.args,\n      implicit: this.implicit,\n      isPercentage: this.isPercentage\n    };\n  };\n  /**\n   * Instantiate an OperatorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"OperatorNode\", \"op\": \"+\", \"fn\": \"add\", \"args\": [...], \"implicit\": false, \"isPercentage\":false}`,\n   *                       where mathjs is optional\n   * @returns {OperatorNode}\n   */\n\n  OperatorNode.fromJSON = function (json) {\n    return new OperatorNode(json.op, json.fn, json.args, json.implicit, json.isPercentage);\n  };\n  /**\n   * Get HTML representation.\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  OperatorNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var implicit = options && options.implicit ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);\n    if (args.length === 1) {\n      // unary operators\n      var assoc = getAssociativity(this, parenthesis);\n      var operand = args[0].toHTML(options);\n      if (parens[0]) {\n        operand = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + operand + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      if (assoc === 'right') {\n        // prefix operator\n        return '<span class=\"math-operator math-unary-operator math-lefthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n      } else {\n        // postfix when assoc === 'left' or undefined\n        return operand + '<span class=\"math-operator math-unary-operator math-righthand-unary-operator\">' + escape(this.op) + '</span>';\n      }\n    } else if (args.length === 2) {\n      // binary operatoes\n      var lhs = args[0].toHTML(options); // left hand side\n\n      var rhs = args[1].toHTML(options); // right hand side\n\n      if (parens[0]) {\n        // left hand side in parenthesis?\n        lhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + lhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      if (parens[1]) {\n        // right hand side in parenthesis?\n        rhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + rhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n        return lhs + '<span class=\"math-operator math-binary-operator math-implicit-binary-operator\"></span>' + rhs;\n      }\n      return lhs + '<span class=\"math-operator math-binary-operator math-explicit-binary-operator\">' + escape(this.op) + '</span>' + rhs;\n    } else {\n      var stringifiedArgs = args.map(function (arg, index) {\n        arg = arg.toHTML(options);\n        if (parens[index]) {\n          // put in parenthesis?\n          arg = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + arg + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n        return arg;\n      });\n      if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n        if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n          return stringifiedArgs.join('<span class=\"math-operator math-binary-operator math-implicit-binary-operator\"></span>');\n        }\n        return stringifiedArgs.join('<span class=\"math-operator math-binary-operator math-explicit-binary-operator\">' + escape(this.op) + '</span>');\n      } else {\n        // fallback to formatting as a function call\n        return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + stringifiedArgs.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n      }\n    }\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  OperatorNode.prototype._toTex = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var implicit = options && options.implicit ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);\n    var op = latexOperators[this.fn];\n    op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op\n\n    if (args.length === 1) {\n      // unary operators\n      var assoc = getAssociativity(this, parenthesis);\n      var operand = args[0].toTex(options);\n      if (parens[0]) {\n        operand = \"\\\\left(\".concat(operand, \"\\\\right)\");\n      }\n      if (assoc === 'right') {\n        // prefix operator\n        return op + operand;\n      } else if (assoc === 'left') {\n        // postfix operator\n        return operand + op;\n      } // fall back to postfix\n\n      return operand + op;\n    } else if (args.length === 2) {\n      // binary operators\n      var lhs = args[0]; // left hand side\n\n      var lhsTex = lhs.toTex(options);\n      if (parens[0]) {\n        lhsTex = \"\\\\left(\".concat(lhsTex, \"\\\\right)\");\n      }\n      var rhs = args[1]; // right hand side\n\n      var rhsTex = rhs.toTex(options);\n      if (parens[1]) {\n        rhsTex = \"\\\\left(\".concat(rhsTex, \"\\\\right)\");\n      } // handle some exceptions (due to the way LaTeX works)\n\n      var lhsIdentifier;\n      if (parenthesis === 'keep') {\n        lhsIdentifier = lhs.getIdentifier();\n      } else {\n        // Ignore ParenthesisNodes if in 'keep' mode\n        lhsIdentifier = lhs.getContent().getIdentifier();\n      }\n      switch (this.getIdentifier()) {\n        case 'OperatorNode:divide':\n          // op contains '\\\\frac' at this point\n          return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';\n        case 'OperatorNode:pow':\n          lhsTex = '{' + lhsTex + '}';\n          rhsTex = '{' + rhsTex + '}';\n          switch (lhsIdentifier) {\n            case 'ConditionalNode': //\n\n            case 'OperatorNode:divide':\n              lhsTex = \"\\\\left(\".concat(lhsTex, \"\\\\right)\");\n          }\n          break;\n        case 'OperatorNode:multiply':\n          if (this.implicit && implicit === 'hide') {\n            return lhsTex + '~' + rhsTex;\n          }\n      }\n      return lhsTex + op + rhsTex;\n    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n      var texifiedArgs = args.map(function (arg, index) {\n        arg = arg.toTex(options);\n        if (parens[index]) {\n          arg = \"\\\\left(\".concat(arg, \"\\\\right)\");\n        }\n        return arg;\n      });\n      if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit) {\n        return texifiedArgs.join('~');\n      }\n      return texifiedArgs.join(op);\n    } else {\n      // fall back to formatting as a function call\n      // as this is a fallback, it doesn't use\n      // fancy function names\n      return '\\\\mathrm{' + this.fn + '}\\\\left(' + args.map(function (arg) {\n        return arg.toTex(options);\n      }).join(',') + '\\\\right)';\n    }\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n  OperatorNode.prototype.getIdentifier = function () {\n    return this.type + ':' + this.fn;\n  };\n  return OperatorNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["isNode","map","escape","getSafeProperty","isSafeMethod","getAssociativity","getPrecedence","isAssociativeWith","properties","latexOperators","factory","name","dependencies","createOperatorNode","_ref","Node","OperatorNode","op","fn","args","implicit","isPercentage","SyntaxError","TypeError","Array","isArray","every","prototype","type","isOperatorNode","_compile","math","argNames","Error","evalArgs","arg","length","evalArg0","evalOperatorNode","scope","context","_evalArg","evalArg1","apply","evalArg","forEach","callback","i","_ifNode","clone","slice","isUnary","isBinary","calculateNecessaryParentheses","root","parenthesis","latex","precedence","associativity","getIdentifier","getContent","result","operandPrecedence","operandIdentifier","rootIdentifier","latexLeftParens","latexParens","lhsParens","lhsPrecedence","assocWithLhs","rhsParens","rhsPrecedence","assocWithRhs","_rootIdentifier","lhsIdentifier","rhsIdentifier","latexRightParens","argPrecedence","assocWithArg","argAssociativity","index","isParenthesisNode","_toString","options","parens","assoc","operand","toString","opIsNamed","test","lhs","rhs","stringifiedArgs","join","toJSON","mathjs","fromJSON","json","toHTML","_toTex","toTex","concat","lhsTex","rhsTex","texifiedArgs","isClass"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/expression/node/OperatorNode.js"],"sourcesContent":["import { isNode } from '../../utils/is.js';\nimport { map } from '../../utils/array.js';\nimport { escape } from '../../utils/string.js';\nimport { getSafeProperty, isSafeMethod } from '../../utils/customs.js';\nimport { getAssociativity, getPrecedence, isAssociativeWith, properties } from '../operators.js';\nimport { latexOperators } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'OperatorNode';\nvar dependencies = ['Node'];\nexport var createOperatorNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n\n  /**\n   * @constructor OperatorNode\n   * @extends {Node}\n   * An operator with two arguments, like 2+3\n   *\n   * @param {string} op           Operator name, for example '+'\n   * @param {string} fn           Function name, for example 'add'\n   * @param {Node[]} args         Operator arguments\n   * @param {boolean} [implicit]  Is this an implicit multiplication?\n   * @param {boolean} [isPercentage] Is this an percentage Operation?\n   */\n  function OperatorNode(op, fn, args, implicit, isPercentage) {\n    if (!(this instanceof OperatorNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input\n\n\n    if (typeof op !== 'string') {\n      throw new TypeError('string expected for parameter \"op\"');\n    }\n\n    if (typeof fn !== 'string') {\n      throw new TypeError('string expected for parameter \"fn\"');\n    }\n\n    if (!Array.isArray(args) || !args.every(isNode)) {\n      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n    }\n\n    this.implicit = implicit === true;\n    this.isPercentage = isPercentage === true;\n    this.op = op;\n    this.fn = fn;\n    this.args = args || [];\n  }\n\n  OperatorNode.prototype = new Node();\n  OperatorNode.prototype.type = 'OperatorNode';\n  OperatorNode.prototype.isOperatorNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  OperatorNode.prototype._compile = function (math, argNames) {\n    // validate fn\n    if (typeof this.fn !== 'string' || !isSafeMethod(math, this.fn)) {\n      if (!math[this.fn]) {\n        throw new Error('Function ' + this.fn + ' missing in provided namespace \"math\"');\n      } else {\n        throw new Error('No access to function \"' + this.fn + '\"');\n      }\n    }\n\n    var fn = getSafeProperty(math, this.fn);\n    var evalArgs = map(this.args, function (arg) {\n      return arg._compile(math, argNames);\n    });\n\n    if (evalArgs.length === 1) {\n      var evalArg0 = evalArgs[0];\n      return function evalOperatorNode(scope, args, context) {\n        return fn(evalArg0(scope, args, context));\n      };\n    } else if (evalArgs.length === 2) {\n      var _evalArg = evalArgs[0];\n      var evalArg1 = evalArgs[1];\n      return function evalOperatorNode(scope, args, context) {\n        return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));\n      };\n    } else {\n      return function evalOperatorNode(scope, args, context) {\n        return fn.apply(null, map(evalArgs, function (evalArg) {\n          return evalArg(scope, args, context);\n        }));\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  OperatorNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.args.length; i++) {\n      callback(this.args[i], 'args[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new OperatorNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {OperatorNode} Returns a transformed copy of the node\n   */\n\n\n  OperatorNode.prototype.map = function (callback) {\n    var args = [];\n\n    for (var i = 0; i < this.args.length; i++) {\n      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n    }\n\n    return new OperatorNode(this.op, this.fn, args, this.implicit, this.isPercentage);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {OperatorNode}\n   */\n\n\n  OperatorNode.prototype.clone = function () {\n    return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit, this.isPercentage);\n  };\n  /**\n   * Check whether this is an unary OperatorNode:\n   * has exactly one argument, like `-a`.\n   * @return {boolean} Returns true when an unary operator node, false otherwise.\n   */\n\n\n  OperatorNode.prototype.isUnary = function () {\n    return this.args.length === 1;\n  };\n  /**\n   * Check whether this is a binary OperatorNode:\n   * has exactly two arguments, like `a + b`.\n   * @return {boolean} Returns true when a binary operator node, false otherwise.\n   */\n\n\n  OperatorNode.prototype.isBinary = function () {\n    return this.args.length === 2;\n  };\n  /**\n   * Calculate which parentheses are necessary. Gets an OperatorNode\n   * (which is the root of the tree) and an Array of Nodes\n   * (this.args) and returns an array where 'true' means that an argument\n   * has to be enclosed in parentheses whereas 'false' means the opposite.\n   *\n   * @param {OperatorNode} root\n   * @param {string} parenthesis\n   * @param {Node[]} args\n   * @param {boolean} latex\n   * @return {boolean[]}\n   * @private\n   */\n\n\n  function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {\n    // precedence of the root OperatorNode\n    var precedence = getPrecedence(root, parenthesis);\n    var associativity = getAssociativity(root, parenthesis);\n\n    if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') {\n      return args.map(function (arg) {\n        switch (arg.getContent().type) {\n          // Nodes that don't need extra parentheses\n          case 'ArrayNode':\n          case 'ConstantNode':\n          case 'SymbolNode':\n          case 'ParenthesisNode':\n            return false;\n\n          default:\n            return true;\n        }\n      });\n    }\n\n    var result;\n\n    switch (args.length) {\n      case 0:\n        result = [];\n        break;\n\n      case 1:\n        // unary operators\n        {\n          // precedence of the operand\n          var operandPrecedence = getPrecedence(args[0], parenthesis); // handle special cases for LaTeX, where some of the parentheses aren't needed\n\n          if (latex && operandPrecedence !== null) {\n            var operandIdentifier;\n            var rootIdentifier;\n\n            if (parenthesis === 'keep') {\n              operandIdentifier = args[0].getIdentifier();\n              rootIdentifier = root.getIdentifier();\n            } else {\n              // Ignore Parenthesis Nodes when not in 'keep' mode\n              operandIdentifier = args[0].getContent().getIdentifier();\n              rootIdentifier = root.getContent().getIdentifier();\n            }\n\n            if (properties[precedence][rootIdentifier].latexLeftParens === false) {\n              result = [false];\n              break;\n            }\n\n            if (properties[operandPrecedence][operandIdentifier].latexParens === false) {\n              result = [false];\n              break;\n            }\n          }\n\n          if (operandPrecedence === null) {\n            // if the operand has no defined precedence, no parens are needed\n            result = [false];\n            break;\n          }\n\n          if (operandPrecedence <= precedence) {\n            // if the operands precedence is lower, parens are needed\n            result = [true];\n            break;\n          } // otherwise, no parens needed\n\n\n          result = [false];\n        }\n        break;\n\n      case 2:\n        // binary operators\n        {\n          var lhsParens; // left hand side needs parenthesis?\n          // precedence of the left hand side\n\n          var lhsPrecedence = getPrecedence(args[0], parenthesis); // is the root node associative with the left hand side\n\n          var assocWithLhs = isAssociativeWith(root, args[0], parenthesis);\n\n          if (lhsPrecedence === null) {\n            // if the left hand side has no defined precedence, no parens are needed\n            // FunctionNode for example\n            lhsParens = false;\n          } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {\n            // In case of equal precedence, if the root node is left associative\n            // parens are **never** necessary for the left hand side.\n            // If it is right associative however, parens are necessary\n            // if the root node isn't associative with the left hand side\n            lhsParens = true;\n          } else if (lhsPrecedence < precedence) {\n            lhsParens = true;\n          } else {\n            lhsParens = false;\n          }\n\n          var rhsParens; // right hand side needs parenthesis?\n          // precedence of the right hand side\n\n          var rhsPrecedence = getPrecedence(args[1], parenthesis); // is the root node associative with the right hand side?\n\n          var assocWithRhs = isAssociativeWith(root, args[1], parenthesis);\n\n          if (rhsPrecedence === null) {\n            // if the right hand side has no defined precedence, no parens are needed\n            // FunctionNode for example\n            rhsParens = false;\n          } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {\n            // In case of equal precedence, if the root node is right associative\n            // parens are **never** necessary for the right hand side.\n            // If it is left associative however, parens are necessary\n            // if the root node isn't associative with the right hand side\n            rhsParens = true;\n          } else if (rhsPrecedence < precedence) {\n            rhsParens = true;\n          } else {\n            rhsParens = false;\n          } // handle special cases for LaTeX, where some of the parentheses aren't needed\n\n\n          if (latex) {\n            var _rootIdentifier;\n\n            var lhsIdentifier;\n            var rhsIdentifier;\n\n            if (parenthesis === 'keep') {\n              _rootIdentifier = root.getIdentifier();\n              lhsIdentifier = root.args[0].getIdentifier();\n              rhsIdentifier = root.args[1].getIdentifier();\n            } else {\n              // Ignore ParenthesisNodes when not in 'keep' mode\n              _rootIdentifier = root.getContent().getIdentifier();\n              lhsIdentifier = root.args[0].getContent().getIdentifier();\n              rhsIdentifier = root.args[1].getContent().getIdentifier();\n            }\n\n            if (lhsPrecedence !== null) {\n              if (properties[precedence][_rootIdentifier].latexLeftParens === false) {\n                lhsParens = false;\n              }\n\n              if (properties[lhsPrecedence][lhsIdentifier].latexParens === false) {\n                lhsParens = false;\n              }\n            }\n\n            if (rhsPrecedence !== null) {\n              if (properties[precedence][_rootIdentifier].latexRightParens === false) {\n                rhsParens = false;\n              }\n\n              if (properties[rhsPrecedence][rhsIdentifier].latexParens === false) {\n                rhsParens = false;\n              }\n            }\n          }\n\n          result = [lhsParens, rhsParens];\n        }\n        break;\n\n      default:\n        if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') {\n          result = args.map(function (arg) {\n            var argPrecedence = getPrecedence(arg, parenthesis);\n            var assocWithArg = isAssociativeWith(root, arg, parenthesis);\n            var argAssociativity = getAssociativity(arg, parenthesis);\n\n            if (argPrecedence === null) {\n              // if the argument has no defined precedence, no parens are needed\n              return false;\n            } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {\n              return true;\n            } else if (argPrecedence < precedence) {\n              return true;\n            }\n\n            return false;\n          });\n        }\n\n        break;\n    } // handles an edge case of 'auto' parentheses with implicit multiplication of ConstantNode\n    // In that case print parentheses for ParenthesisNodes even though they normally wouldn't be\n    // printed.\n\n\n    if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis === 'auto' && implicit === 'hide') {\n      result = args.map(function (arg, index) {\n        var isParenthesisNode = arg.getIdentifier() === 'ParenthesisNode';\n\n        if (result[index] || isParenthesisNode) {\n          // put in parenthesis?\n          return true;\n        }\n\n        return false;\n      });\n    }\n\n    return result;\n  }\n  /**\n   * Get string representation.\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  OperatorNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var implicit = options && options.implicit ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);\n\n    if (args.length === 1) {\n      // unary operators\n      var assoc = getAssociativity(this, parenthesis);\n      var operand = args[0].toString(options);\n\n      if (parens[0]) {\n        operand = '(' + operand + ')';\n      } // for example for \"not\", we want a space between operand and argument\n\n\n      var opIsNamed = /[a-zA-Z]+/.test(this.op);\n\n      if (assoc === 'right') {\n        // prefix operator\n        return this.op + (opIsNamed ? ' ' : '') + operand;\n      } else if (assoc === 'left') {\n        // postfix\n        return operand + (opIsNamed ? ' ' : '') + this.op;\n      } // fall back to postfix\n\n\n      return operand + this.op;\n    } else if (args.length === 2) {\n      var lhs = args[0].toString(options); // left hand side\n\n      var rhs = args[1].toString(options); // right hand side\n\n      if (parens[0]) {\n        // left hand side in parenthesis?\n        lhs = '(' + lhs + ')';\n      }\n\n      if (parens[1]) {\n        // right hand side in parenthesis?\n        rhs = '(' + rhs + ')';\n      }\n\n      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n        return lhs + ' ' + rhs;\n      }\n\n      return lhs + ' ' + this.op + ' ' + rhs;\n    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n      var stringifiedArgs = args.map(function (arg, index) {\n        arg = arg.toString(options);\n\n        if (parens[index]) {\n          // put in parenthesis?\n          arg = '(' + arg + ')';\n        }\n\n        return arg;\n      });\n\n      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n        return stringifiedArgs.join(' ');\n      }\n\n      return stringifiedArgs.join(' ' + this.op + ' ');\n    } else {\n      // fallback to formatting as a function call\n      return this.fn + '(' + this.args.join(', ') + ')';\n    }\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  OperatorNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'OperatorNode',\n      op: this.op,\n      fn: this.fn,\n      args: this.args,\n      implicit: this.implicit,\n      isPercentage: this.isPercentage\n    };\n  };\n  /**\n   * Instantiate an OperatorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"OperatorNode\", \"op\": \"+\", \"fn\": \"add\", \"args\": [...], \"implicit\": false, \"isPercentage\":false}`,\n   *                       where mathjs is optional\n   * @returns {OperatorNode}\n   */\n\n\n  OperatorNode.fromJSON = function (json) {\n    return new OperatorNode(json.op, json.fn, json.args, json.implicit, json.isPercentage);\n  };\n  /**\n   * Get HTML representation.\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  OperatorNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var implicit = options && options.implicit ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);\n\n    if (args.length === 1) {\n      // unary operators\n      var assoc = getAssociativity(this, parenthesis);\n      var operand = args[0].toHTML(options);\n\n      if (parens[0]) {\n        operand = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + operand + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      if (assoc === 'right') {\n        // prefix operator\n        return '<span class=\"math-operator math-unary-operator math-lefthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n      } else {\n        // postfix when assoc === 'left' or undefined\n        return operand + '<span class=\"math-operator math-unary-operator math-righthand-unary-operator\">' + escape(this.op) + '</span>';\n      }\n    } else if (args.length === 2) {\n      // binary operatoes\n      var lhs = args[0].toHTML(options); // left hand side\n\n      var rhs = args[1].toHTML(options); // right hand side\n\n      if (parens[0]) {\n        // left hand side in parenthesis?\n        lhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + lhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      if (parens[1]) {\n        // right hand side in parenthesis?\n        rhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + rhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n        return lhs + '<span class=\"math-operator math-binary-operator math-implicit-binary-operator\"></span>' + rhs;\n      }\n\n      return lhs + '<span class=\"math-operator math-binary-operator math-explicit-binary-operator\">' + escape(this.op) + '</span>' + rhs;\n    } else {\n      var stringifiedArgs = args.map(function (arg, index) {\n        arg = arg.toHTML(options);\n\n        if (parens[index]) {\n          // put in parenthesis?\n          arg = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + arg + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n\n        return arg;\n      });\n\n      if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n        if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n          return stringifiedArgs.join('<span class=\"math-operator math-binary-operator math-implicit-binary-operator\"></span>');\n        }\n\n        return stringifiedArgs.join('<span class=\"math-operator math-binary-operator math-explicit-binary-operator\">' + escape(this.op) + '</span>');\n      } else {\n        // fallback to formatting as a function call\n        return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + stringifiedArgs.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n      }\n    }\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  OperatorNode.prototype._toTex = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var implicit = options && options.implicit ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);\n    var op = latexOperators[this.fn];\n    op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op\n\n    if (args.length === 1) {\n      // unary operators\n      var assoc = getAssociativity(this, parenthesis);\n      var operand = args[0].toTex(options);\n\n      if (parens[0]) {\n        operand = \"\\\\left(\".concat(operand, \"\\\\right)\");\n      }\n\n      if (assoc === 'right') {\n        // prefix operator\n        return op + operand;\n      } else if (assoc === 'left') {\n        // postfix operator\n        return operand + op;\n      } // fall back to postfix\n\n\n      return operand + op;\n    } else if (args.length === 2) {\n      // binary operators\n      var lhs = args[0]; // left hand side\n\n      var lhsTex = lhs.toTex(options);\n\n      if (parens[0]) {\n        lhsTex = \"\\\\left(\".concat(lhsTex, \"\\\\right)\");\n      }\n\n      var rhs = args[1]; // right hand side\n\n      var rhsTex = rhs.toTex(options);\n\n      if (parens[1]) {\n        rhsTex = \"\\\\left(\".concat(rhsTex, \"\\\\right)\");\n      } // handle some exceptions (due to the way LaTeX works)\n\n\n      var lhsIdentifier;\n\n      if (parenthesis === 'keep') {\n        lhsIdentifier = lhs.getIdentifier();\n      } else {\n        // Ignore ParenthesisNodes if in 'keep' mode\n        lhsIdentifier = lhs.getContent().getIdentifier();\n      }\n\n      switch (this.getIdentifier()) {\n        case 'OperatorNode:divide':\n          // op contains '\\\\frac' at this point\n          return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';\n\n        case 'OperatorNode:pow':\n          lhsTex = '{' + lhsTex + '}';\n          rhsTex = '{' + rhsTex + '}';\n\n          switch (lhsIdentifier) {\n            case 'ConditionalNode': //\n\n            case 'OperatorNode:divide':\n              lhsTex = \"\\\\left(\".concat(lhsTex, \"\\\\right)\");\n          }\n\n          break;\n\n        case 'OperatorNode:multiply':\n          if (this.implicit && implicit === 'hide') {\n            return lhsTex + '~' + rhsTex;\n          }\n\n      }\n\n      return lhsTex + op + rhsTex;\n    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n      var texifiedArgs = args.map(function (arg, index) {\n        arg = arg.toTex(options);\n\n        if (parens[index]) {\n          arg = \"\\\\left(\".concat(arg, \"\\\\right)\");\n        }\n\n        return arg;\n      });\n\n      if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit) {\n        return texifiedArgs.join('~');\n      }\n\n      return texifiedArgs.join(op);\n    } else {\n      // fall back to formatting as a function call\n      // as this is a fallback, it doesn't use\n      // fancy function names\n      return '\\\\mathrm{' + this.fn + '}\\\\left(' + args.map(function (arg) {\n        return arg.toTex(options);\n      }).join(',') + '\\\\right)';\n    }\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n\n  OperatorNode.prototype.getIdentifier = function () {\n    return this.type + ':' + this.fn;\n  };\n\n  return OperatorNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}