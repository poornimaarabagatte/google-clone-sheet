{"ast":null,"code":"import { createMap, isMap } from '../../../utils/map.js';\nimport { isFunctionNode, isNode, isOperatorNode, isParenthesisNode, isSymbolNode } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nvar name = 'resolve';\nvar dependencies = ['parse', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];\nexport var createResolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    parse,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode\n  } = _ref;\n\n  /**\n   * resolve(expr, scope) replaces variable nodes with their scoped values\n   *\n   * Syntax:\n   *\n   *     simplify.resolve(expr, scope)\n   *\n   * Examples:\n   *\n   *     math.simplify.resolve('x + y', {x:1, y:2})           // Node {1 + 2}\n   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}\n   *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // \"6\"\n   *\n   * @param {Node} node\n   *     The expression tree to be simplified\n   * @param {Object} scope with variables to be resolved\n   */\n  function resolve(node, scope) {\n    if (!scope) {\n      return node;\n    }\n    if (!isMap(scope)) {\n      scope = createMap(scope);\n    }\n    if (isSymbolNode(node)) {\n      var value = scope.get(node.name);\n      if (isNode(value)) {\n        return resolve(value, scope);\n      } else if (typeof value === 'number') {\n        return parse(String(value));\n      }\n    } else if (isOperatorNode(node)) {\n      var args = node.args.map(function (arg) {\n        return resolve(arg, scope);\n      });\n      return new OperatorNode(node.op, node.fn, args, node.implicit);\n    } else if (isParenthesisNode(node)) {\n      return new ParenthesisNode(resolve(node.content, scope));\n    } else if (isFunctionNode(node)) {\n      var _args = node.args.map(function (arg) {\n        return resolve(arg, scope);\n      });\n      return new FunctionNode(node.name, _args);\n    }\n    return node;\n  }\n  return resolve;\n});","map":{"version":3,"names":["createMap","isMap","isFunctionNode","isNode","isOperatorNode","isParenthesisNode","isSymbolNode","factory","name","dependencies","createResolve","_ref","parse","FunctionNode","OperatorNode","ParenthesisNode","resolve","node","scope","value","get","String","args","map","arg","op","fn","implicit","content","_args"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/function/algebra/simplify/resolve.js"],"sourcesContent":["import { createMap, isMap } from '../../../utils/map.js';\nimport { isFunctionNode, isNode, isOperatorNode, isParenthesisNode, isSymbolNode } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nvar name = 'resolve';\nvar dependencies = ['parse', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];\nexport var createResolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    parse,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode\n  } = _ref;\n\n  /**\n   * resolve(expr, scope) replaces variable nodes with their scoped values\n   *\n   * Syntax:\n   *\n   *     simplify.resolve(expr, scope)\n   *\n   * Examples:\n   *\n   *     math.simplify.resolve('x + y', {x:1, y:2})           // Node {1 + 2}\n   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}\n   *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // \"6\"\n   *\n   * @param {Node} node\n   *     The expression tree to be simplified\n   * @param {Object} scope with variables to be resolved\n   */\n  function resolve(node, scope) {\n    if (!scope) {\n      return node;\n    }\n\n    if (!isMap(scope)) {\n      scope = createMap(scope);\n    }\n\n    if (isSymbolNode(node)) {\n      var value = scope.get(node.name);\n\n      if (isNode(value)) {\n        return resolve(value, scope);\n      } else if (typeof value === 'number') {\n        return parse(String(value));\n      }\n    } else if (isOperatorNode(node)) {\n      var args = node.args.map(function (arg) {\n        return resolve(arg, scope);\n      });\n      return new OperatorNode(node.op, node.fn, args, node.implicit);\n    } else if (isParenthesisNode(node)) {\n      return new ParenthesisNode(resolve(node.content, scope));\n    } else if (isFunctionNode(node)) {\n      var _args = node.args.map(function (arg) {\n        return resolve(arg, scope);\n      });\n\n      return new FunctionNode(node.name, _args);\n    }\n\n    return node;\n  }\n\n  return resolve;\n});"],"mappings":"AAAA,SAASA,SAAS,EAAEC,KAAK,QAAQ,uBAAuB;AACxD,SAASC,cAAc,EAAEC,MAAM,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,YAAY,QAAQ,sBAAsB;AAC9G,SAASC,OAAO,QAAQ,2BAA2B;AACnD,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,iBAAiB,CAAC;AAC/E,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC5E,IAAI;IACFC,KAAK;IACLC,YAAY;IACZC,YAAY;IACZC;EACF,CAAC,GAAGJ,IAAI;;EAER;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASK,OAAOA,CAACC,IAAI,EAAEC,KAAK,EAAE;IAC5B,IAAI,CAACA,KAAK,EAAE;MACV,OAAOD,IAAI;IACb;IAEA,IAAI,CAAChB,KAAK,CAACiB,KAAK,CAAC,EAAE;MACjBA,KAAK,GAAGlB,SAAS,CAACkB,KAAK,CAAC;IAC1B;IAEA,IAAIZ,YAAY,CAACW,IAAI,CAAC,EAAE;MACtB,IAAIE,KAAK,GAAGD,KAAK,CAACE,GAAG,CAACH,IAAI,CAACT,IAAI,CAAC;MAEhC,IAAIL,MAAM,CAACgB,KAAK,CAAC,EAAE;QACjB,OAAOH,OAAO,CAACG,KAAK,EAAED,KAAK,CAAC;MAC9B,CAAC,MAAM,IAAI,OAAOC,KAAK,KAAK,QAAQ,EAAE;QACpC,OAAOP,KAAK,CAACS,MAAM,CAACF,KAAK,CAAC,CAAC;MAC7B;IACF,CAAC,MAAM,IAAIf,cAAc,CAACa,IAAI,CAAC,EAAE;MAC/B,IAAIK,IAAI,GAAGL,IAAI,CAACK,IAAI,CAACC,GAAG,CAAC,UAAUC,GAAG,EAAE;QACtC,OAAOR,OAAO,CAACQ,GAAG,EAAEN,KAAK,CAAC;MAC5B,CAAC,CAAC;MACF,OAAO,IAAIJ,YAAY,CAACG,IAAI,CAACQ,EAAE,EAAER,IAAI,CAACS,EAAE,EAAEJ,IAAI,EAAEL,IAAI,CAACU,QAAQ,CAAC;IAChE,CAAC,MAAM,IAAItB,iBAAiB,CAACY,IAAI,CAAC,EAAE;MAClC,OAAO,IAAIF,eAAe,CAACC,OAAO,CAACC,IAAI,CAACW,OAAO,EAAEV,KAAK,CAAC,CAAC;IAC1D,CAAC,MAAM,IAAIhB,cAAc,CAACe,IAAI,CAAC,EAAE;MAC/B,IAAIY,KAAK,GAAGZ,IAAI,CAACK,IAAI,CAACC,GAAG,CAAC,UAAUC,GAAG,EAAE;QACvC,OAAOR,OAAO,CAACQ,GAAG,EAAEN,KAAK,CAAC;MAC5B,CAAC,CAAC;MAEF,OAAO,IAAIL,YAAY,CAACI,IAAI,CAACT,IAAI,EAAEqB,KAAK,CAAC;IAC3C;IAEA,OAAOZ,IAAI;EACb;EAEA,OAAOD,OAAO;AAChB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}