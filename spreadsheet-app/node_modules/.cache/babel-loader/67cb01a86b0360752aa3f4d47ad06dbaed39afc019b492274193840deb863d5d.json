{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01.js';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03.js';\nimport { createAlgorithm05 } from '../../type/matrix/utils/algorithm05.js';\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'subtract';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];\nexport var createSubtract = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    addScalar,\n    unaryMinus,\n    DenseMatrix\n  } = _ref;\n  // TODO: split function subtract in two: subtract and subtractScalar\n  var algorithm01 = createAlgorithm01({\n    typed\n  });\n  var algorithm03 = createAlgorithm03({\n    typed\n  });\n  var algorithm05 = createAlgorithm05({\n    typed,\n    equalScalar\n  });\n  var algorithm10 = createAlgorithm10({\n    typed,\n    DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x - y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.sub(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.minus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.sub(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n      if (y.value === null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n      var res = x.clone();\n      res.value = this(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm05(x, y, this);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm03(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm01(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm10(x, unaryMinus(y), addScalar);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, this);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm10(y, x, this, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});\n/**\n * Check whether matrix x and y have the same number of dimensions.\n * Throws a DimensionError when dimensions are not equal\n * @param {Matrix} x\n * @param {Matrix} y\n */\n\nfunction checkEqualDimensions(x, y) {\n  var xsize = x.size();\n  var ysize = y.size();\n  if (xsize.length !== ysize.length) {\n    throw new DimensionError(xsize.length, ysize.length);\n  }\n}","map":{"version":3,"names":["factory","DimensionError","createAlgorithm01","createAlgorithm03","createAlgorithm05","createAlgorithm10","createAlgorithm13","createAlgorithm14","name","dependencies","createSubtract","_ref","typed","matrix","equalScalar","addScalar","unaryMinus","DenseMatrix","algorithm01","algorithm03","algorithm05","algorithm10","algorithm13","algorithm14","numberNumber","x","y","ComplexComplex","sub","BigNumberBigNumber","minus","FractionFraction","UnitUnit","value","Error","equalBase","res","clone","fixPrefix","SparseMatrixSparseMatrix","checkEqualDimensions","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray","xsize","size","ysize","length"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/function/arithmetic/subtract.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01.js';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03.js';\nimport { createAlgorithm05 } from '../../type/matrix/utils/algorithm05.js';\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'subtract';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];\nexport var createSubtract = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    addScalar,\n    unaryMinus,\n    DenseMatrix\n  } = _ref;\n  // TODO: split function subtract in two: subtract and subtractScalar\n  var algorithm01 = createAlgorithm01({\n    typed\n  });\n  var algorithm03 = createAlgorithm03({\n    typed\n  });\n  var algorithm05 = createAlgorithm05({\n    typed,\n    equalScalar\n  });\n  var algorithm10 = createAlgorithm10({\n    typed,\n    DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x - y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.sub(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.minus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.sub(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n\n      if (y.value === null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n\n      var res = x.clone();\n      res.value = this(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm05(x, y, this);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm03(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm01(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm10(x, unaryMinus(y), addScalar);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, this);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm10(y, x, this, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});\n/**\n * Check whether matrix x and y have the same number of dimensions.\n * Throws a DimensionError when dimensions are not equal\n * @param {Matrix} x\n * @param {Matrix} y\n */\n\nfunction checkEqualDimensions(x, y) {\n  var xsize = x.size();\n  var ysize = y.size();\n\n  if (xsize.length !== ysize.length) {\n    throw new DimensionError(xsize.length, ysize.length);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}