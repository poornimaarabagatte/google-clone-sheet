{"ast":null,"code":"var _jsxFileName = \"/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/src/components/spreadSheet.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./spreadSheet.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Spreadsheet = () => {\n  _s();\n  const [cells, setCells] = useState({});\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [formula, setFormula] = useState(\"\");\n  const handleChange = (row, col, value) => {\n    const cellId = `${row}-${col}`;\n    setCells(prev => ({\n      ...prev,\n      [cellId]: value\n    }));\n  };\n  const applyFormula = () => {\n    if (selectedCell && formula.startsWith(\"=\")) {\n      const [row, col] = selectedCell.split(\"-\").map(Number);\n      let newValue = formula.substring(1).toUpperCase(); // Placeholder evaluation\n      handleChange(row, col, newValue);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spreadsheet-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Bold\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Italic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Underline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Align Left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Align Center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Align Right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"formula-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"fx\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"formula-input\",\n        value: formula,\n        onChange: e => setFormula(e.target.value),\n        onKeyDown: e => e.key === \"Enter\" && applyFormula()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sheet-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell header\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), Array.from({\n        length: 10\n      }, (_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell header\",\n        children: String.fromCharCode(65 + i)\n      }, `header-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this)), Array.from({\n        length: 20\n      }, (_, row) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell header\",\n          children: row + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this), Array.from({\n          length: 10\n        }, (_, col) => {\n          const cellId = `${row}-${col}`;\n          return /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"cell\",\n            value: cells[cellId] || \"\",\n            onChange: e => handleChange(row, col, e.target.value),\n            onFocus: () => setSelectedCell(cellId)\n          }, cellId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 33\n          }, this);\n        })]\n      }, `row-${row}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_s(Spreadsheet, \"GG6DcpmZJGg6uqNhghlzEE0q01M=\");\n_c = Spreadsheet;\nexport default Spreadsheet;\nvar _c;\n$RefreshReg$(_c, \"Spreadsheet\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Spreadsheet","_s","cells","setCells","selectedCell","setSelectedCell","formula","setFormula","handleChange","row","col","value","cellId","prev","applyFormula","startsWith","split","map","Number","newValue","substring","toUpperCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","onKeyDown","key","Array","from","length","_","i","String","fromCharCode","Fragment","onFocus","_c","$RefreshReg$"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/src/components/spreadSheet.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./spreadSheet.css\";\n\nconst Spreadsheet = () => {\n    const [cells, setCells] = useState({});\n    const [selectedCell, setSelectedCell] = useState(null);\n    const [formula, setFormula] = useState(\"\");\n\n    const handleChange = (row, col, value) => {\n        const cellId = `${row}-${col}`;\n        setCells((prev) => ({ ...prev, [cellId]: value }));\n    };\n\n    const applyFormula = () => {\n        if (selectedCell && formula.startsWith(\"=\")) {\n            const [row, col] = selectedCell.split(\"-\").map(Number);\n            let newValue = formula.substring(1).toUpperCase(); // Placeholder evaluation\n            handleChange(row, col, newValue);\n        }\n    };\n\n    return (\n        <div className=\"spreadsheet-container\">\n            {/* Toolbar */}\n            <div className=\"toolbar\">\n                <button>Bold</button>\n                <button>Italic</button>\n                <button>Underline</button>\n                <button>Align Left</button>\n                <button>Align Center</button>\n                <button>Align Right</button>\n            </div>\n\n            {/* Formula Bar */}\n            <div className=\"formula-bar\">\n                <span>fx</span>\n                <input\n                    className=\"formula-input\"\n                    value={formula}\n                    onChange={(e) => setFormula(e.target.value)}\n                    onKeyDown={(e) => e.key === \"Enter\" && applyFormula()}\n                />\n            </div>\n\n            {/* Spreadsheet Grid */}\n            <div className=\"sheet-grid\">\n                {/* Header Row */}\n                <div className=\"cell header\"></div>\n                {Array.from({ length: 10 }, (_, i) => (\n                    <div key={`header-${i}`} className=\"cell header\">\n                        {String.fromCharCode(65 + i)}\n                    </div>\n                ))}\n\n                {/* Rows */}\n                {Array.from({ length: 20 }, (_, row) => (\n                    <React.Fragment key={`row-${row}`}>\n                        <div className=\"cell header\">{row + 1}</div>\n                        {Array.from({ length: 10 }, (_, col) => {\n                            const cellId = `${row}-${col}`;\n                            return (\n                                <input\n                                    key={cellId}\n                                    className=\"cell\"\n                                    value={cells[cellId] || \"\"}\n                                    onChange={(e) =>\n                                        handleChange(row, col, e.target.value)\n                                    }\n                                    onFocus={() => setSelectedCell(cellId)}\n                                />\n                            );\n                        })}\n                    </React.Fragment>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Spreadsheet;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}