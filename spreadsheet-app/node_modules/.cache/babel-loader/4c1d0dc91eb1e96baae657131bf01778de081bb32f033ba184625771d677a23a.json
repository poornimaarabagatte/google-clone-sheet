{"ast":null,"code":"// TODO this could be improved by simplifying seperated constants under associative and commutative operators\nimport { isFraction, isNode, isOperatorNode } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nimport { createUtil } from './util.js';\nimport { noBignumber, noFraction } from '../../../utils/noop.js';\nvar name = 'simplifyConstant';\nvar dependencies = ['typed', 'config', 'mathWithTransform', '?fraction', '?bignumber', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode'];\nexport var createSimplifyConstant = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    mathWithTransform,\n    fraction,\n    bignumber,\n    ConstantNode,\n    OperatorNode,\n    FunctionNode,\n    SymbolNode\n  } = _ref;\n  var {\n    isCommutative,\n    isAssociative,\n    allChildren,\n    createMakeNodeFunction\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n  function simplifyConstant(expr, options) {\n    var res = foldFraction(expr, options);\n    return isNode(res) ? res : _toNode(res);\n  }\n  function _eval(fnname, args, options) {\n    try {\n      return _toNumber(mathWithTransform[fnname].apply(null, args), options);\n    } catch (ignore) {\n      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions\n      args = args.map(function (x) {\n        if (isFraction(x)) {\n          return x.valueOf();\n        }\n        return x;\n      });\n      return _toNumber(mathWithTransform[fnname].apply(null, args), options);\n    }\n  }\n  var _toNode = typed({\n    Fraction: _fractionToNode,\n    number: function number(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n      return new ConstantNode(n);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n      return new ConstantNode(n); // old parameters: (n.toString(), 'number')\n    },\n    Complex: function Complex(s) {\n      throw new Error('Cannot convert Complex number to Node');\n    }\n  }); // convert a number to a fraction only if it can be expressed exactly,\n  // and when both numerator and denominator are small enough\n\n  function _exactFraction(n, options) {\n    var exactFractions = options && options.exactFractions !== false;\n    if (exactFractions && isFinite(n) && fraction) {\n      var f = fraction(n);\n      var fractionsLimit = options && typeof options.fractionsLimit === 'number' ? options.fractionsLimit : Infinity; // no limit by default\n\n      if (f.valueOf() === n && f.n < fractionsLimit && f.d < fractionsLimit) {\n        return f;\n      }\n    }\n    return n;\n  } // Convert numbers to a preferred number type in preference order: Fraction, number, Complex\n  // BigNumbers are left alone\n\n  var _toNumber = typed({\n    'string, Object': function stringObject(s, options) {\n      if (config.number === 'BigNumber') {\n        if (bignumber === undefined) {\n          noBignumber();\n        }\n        return bignumber(s);\n      } else if (config.number === 'Fraction') {\n        if (fraction === undefined) {\n          noFraction();\n        }\n        return fraction(s);\n      } else {\n        var n = parseFloat(s);\n        return _exactFraction(n, options);\n      }\n    },\n    'Fraction, Object': function FractionObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n    'BigNumber, Object': function BigNumberObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n    'number, Object': function numberObject(s, options) {\n      return _exactFraction(s, options);\n    },\n    'Complex, Object': function ComplexObject(s, options) {\n      if (s.im !== 0) {\n        return s;\n      }\n      return _exactFraction(s.re, options);\n    }\n  });\n  function unaryMinusNode(n) {\n    return new OperatorNode('-', 'unaryMinus', [n]);\n  }\n  function _fractionToNode(f) {\n    var n;\n    var vn = f.s * f.n;\n    if (vn < 0) {\n      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);\n    } else {\n      n = new ConstantNode(vn);\n    }\n    if (f.d === 1) {\n      return n;\n    }\n    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);\n  }\n  /*\n   * Create a binary tree from a list of Fractions and Nodes.\n   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so\n   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).\n   * @param args - list of Fractions and Nodes\n   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions\n   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes\n   * if args.length is 1, returns args[0]\n   * @return - Either a Node representing a binary expression or Fraction\n   */\n\n  function foldOp(fn, args, makeNode, options) {\n    return args.reduce(function (a, b) {\n      if (!isNode(a) && !isNode(b)) {\n        try {\n          return _eval(fn, [a, b], options);\n        } catch (ignoreandcontinue) {}\n        a = _toNode(a);\n        b = _toNode(b);\n      } else if (!isNode(a)) {\n        a = _toNode(a);\n      } else if (!isNode(b)) {\n        b = _toNode(b);\n      }\n      return makeNode([a, b]);\n    });\n  } // destroys the original node and returns a folded one\n\n  function foldFraction(node, options) {\n    switch (node.type) {\n      case 'SymbolNode':\n        return node;\n      case 'ConstantNode':\n        if (typeof node.value === 'number' || !isNaN(node.value)) {\n          return _toNumber(node.value, options);\n        }\n        return node;\n      case 'FunctionNode':\n        if (mathWithTransform[node.name] && mathWithTransform[node.name].rawArgs) {\n          return node;\n        }\n        {\n          // Process operators as OperatorNode\n          var operatorFunctions = ['add', 'multiply'];\n          if (operatorFunctions.indexOf(node.name) === -1) {\n            var args = node.args.map(arg => foldFraction(arg, options)); // If all args are numbers\n\n            if (!args.some(isNode)) {\n              try {\n                return _eval(node.name, args, options);\n              } catch (ignoreandcontine) {}\n            } // Convert all args to nodes and construct a symbolic function call\n\n            args = args.map(function (arg) {\n              return isNode(arg) ? arg : _toNode(arg);\n            });\n            return new FunctionNode(node.name, args);\n          } else {// treat as operator\n          }\n        }\n\n      /* falls through */\n\n      case 'OperatorNode':\n        {\n          var fn = node.fn.toString();\n          var _args;\n          var res;\n          var makeNode = createMakeNodeFunction(node);\n          if (isOperatorNode(node) && node.isUnary()) {\n            _args = [foldFraction(node.args[0], options)];\n            if (!isNode(_args[0])) {\n              res = _eval(fn, _args, options);\n            } else {\n              res = makeNode(_args);\n            }\n          } else if (isAssociative(node)) {\n            _args = allChildren(node);\n            _args = _args.map(arg => foldFraction(arg, options));\n            if (isCommutative(fn)) {\n              // commutative binary operator\n              var consts = [];\n              var vars = [];\n              for (var i = 0; i < _args.length; i++) {\n                if (!isNode(_args[i])) {\n                  consts.push(_args[i]);\n                } else {\n                  vars.push(_args[i]);\n                }\n              }\n              if (consts.length > 1) {\n                res = foldOp(fn, consts, makeNode, options);\n                vars.unshift(res);\n                res = foldOp(fn, vars, makeNode, options);\n              } else {\n                // we won't change the children order since it's not neccessary\n                res = foldOp(fn, _args, makeNode, options);\n              }\n            } else {\n              // non-commutative binary operator\n              res = foldOp(fn, _args, makeNode, options);\n            }\n          } else {\n            // non-associative binary operator\n            _args = node.args.map(arg => foldFraction(arg, options));\n            res = foldOp(fn, _args, makeNode, options);\n          }\n          return res;\n        }\n      case 'ParenthesisNode':\n        // remove the uneccessary parenthesis\n        return foldFraction(node.content, options);\n      case 'AccessorNode':\n      /* falls through */\n\n      case 'ArrayNode':\n      /* falls through */\n\n      case 'AssignmentNode':\n      /* falls through */\n\n      case 'BlockNode':\n      /* falls through */\n\n      case 'FunctionAssignmentNode':\n      /* falls through */\n\n      case 'IndexNode':\n      /* falls through */\n\n      case 'ObjectNode':\n      /* falls through */\n\n      case 'RangeNode':\n      /* falls through */\n\n      case 'ConditionalNode':\n      /* falls through */\n\n      default:\n        throw new Error(\"Unimplemented node type in simplifyConstant: \".concat(node.type));\n    }\n  }\n  return simplifyConstant;\n});","map":{"version":3,"names":["isFraction","isNode","isOperatorNode","factory","createUtil","noBignumber","noFraction","name","dependencies","createSimplifyConstant","_ref","typed","config","mathWithTransform","fraction","bignumber","ConstantNode","OperatorNode","FunctionNode","SymbolNode","isCommutative","isAssociative","allChildren","createMakeNodeFunction","simplifyConstant","expr","options","res","foldFraction","_toNode","_eval","fnname","args","_toNumber","apply","ignore","map","x","valueOf","Fraction","_fractionToNode","number","n","unaryMinusNode","BigNumber","Complex","s","Error","_exactFraction","exactFractions","isFinite","f","fractionsLimit","Infinity","d","stringObject","undefined","parseFloat","FractionObject","BigNumberObject","numberObject","ComplexObject","im","re","vn","foldOp","fn","makeNode","reduce","a","b","ignoreandcontinue","node","type","value","isNaN","rawArgs","operatorFunctions","indexOf","arg","some","ignoreandcontine","toString","_args","isUnary","consts","vars","i","length","push","unshift","content","concat"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/function/algebra/simplify/simplifyConstant.js"],"sourcesContent":["// TODO this could be improved by simplifying seperated constants under associative and commutative operators\nimport { isFraction, isNode, isOperatorNode } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nimport { createUtil } from './util.js';\nimport { noBignumber, noFraction } from '../../../utils/noop.js';\nvar name = 'simplifyConstant';\nvar dependencies = ['typed', 'config', 'mathWithTransform', '?fraction', '?bignumber', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode'];\nexport var createSimplifyConstant = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    mathWithTransform,\n    fraction,\n    bignumber,\n    ConstantNode,\n    OperatorNode,\n    FunctionNode,\n    SymbolNode\n  } = _ref;\n  var {\n    isCommutative,\n    isAssociative,\n    allChildren,\n    createMakeNodeFunction\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n\n  function simplifyConstant(expr, options) {\n    var res = foldFraction(expr, options);\n    return isNode(res) ? res : _toNode(res);\n  }\n\n  function _eval(fnname, args, options) {\n    try {\n      return _toNumber(mathWithTransform[fnname].apply(null, args), options);\n    } catch (ignore) {\n      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions\n      args = args.map(function (x) {\n        if (isFraction(x)) {\n          return x.valueOf();\n        }\n\n        return x;\n      });\n      return _toNumber(mathWithTransform[fnname].apply(null, args), options);\n    }\n  }\n\n  var _toNode = typed({\n    Fraction: _fractionToNode,\n    number: function number(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n\n      return new ConstantNode(n);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n\n      return new ConstantNode(n); // old parameters: (n.toString(), 'number')\n    },\n    Complex: function Complex(s) {\n      throw new Error('Cannot convert Complex number to Node');\n    }\n  }); // convert a number to a fraction only if it can be expressed exactly,\n  // and when both numerator and denominator are small enough\n\n\n  function _exactFraction(n, options) {\n    var exactFractions = options && options.exactFractions !== false;\n\n    if (exactFractions && isFinite(n) && fraction) {\n      var f = fraction(n);\n      var fractionsLimit = options && typeof options.fractionsLimit === 'number' ? options.fractionsLimit : Infinity; // no limit by default\n\n      if (f.valueOf() === n && f.n < fractionsLimit && f.d < fractionsLimit) {\n        return f;\n      }\n    }\n\n    return n;\n  } // Convert numbers to a preferred number type in preference order: Fraction, number, Complex\n  // BigNumbers are left alone\n\n\n  var _toNumber = typed({\n    'string, Object': function stringObject(s, options) {\n      if (config.number === 'BigNumber') {\n        if (bignumber === undefined) {\n          noBignumber();\n        }\n\n        return bignumber(s);\n      } else if (config.number === 'Fraction') {\n        if (fraction === undefined) {\n          noFraction();\n        }\n\n        return fraction(s);\n      } else {\n        var n = parseFloat(s);\n        return _exactFraction(n, options);\n      }\n    },\n    'Fraction, Object': function FractionObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n    'BigNumber, Object': function BigNumberObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n    'number, Object': function numberObject(s, options) {\n      return _exactFraction(s, options);\n    },\n    'Complex, Object': function ComplexObject(s, options) {\n      if (s.im !== 0) {\n        return s;\n      }\n\n      return _exactFraction(s.re, options);\n    }\n  });\n\n  function unaryMinusNode(n) {\n    return new OperatorNode('-', 'unaryMinus', [n]);\n  }\n\n  function _fractionToNode(f) {\n    var n;\n    var vn = f.s * f.n;\n\n    if (vn < 0) {\n      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);\n    } else {\n      n = new ConstantNode(vn);\n    }\n\n    if (f.d === 1) {\n      return n;\n    }\n\n    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);\n  }\n  /*\n   * Create a binary tree from a list of Fractions and Nodes.\n   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so\n   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).\n   * @param args - list of Fractions and Nodes\n   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions\n   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes\n   * if args.length is 1, returns args[0]\n   * @return - Either a Node representing a binary expression or Fraction\n   */\n\n\n  function foldOp(fn, args, makeNode, options) {\n    return args.reduce(function (a, b) {\n      if (!isNode(a) && !isNode(b)) {\n        try {\n          return _eval(fn, [a, b], options);\n        } catch (ignoreandcontinue) {}\n\n        a = _toNode(a);\n        b = _toNode(b);\n      } else if (!isNode(a)) {\n        a = _toNode(a);\n      } else if (!isNode(b)) {\n        b = _toNode(b);\n      }\n\n      return makeNode([a, b]);\n    });\n  } // destroys the original node and returns a folded one\n\n\n  function foldFraction(node, options) {\n    switch (node.type) {\n      case 'SymbolNode':\n        return node;\n\n      case 'ConstantNode':\n        if (typeof node.value === 'number' || !isNaN(node.value)) {\n          return _toNumber(node.value, options);\n        }\n\n        return node;\n\n      case 'FunctionNode':\n        if (mathWithTransform[node.name] && mathWithTransform[node.name].rawArgs) {\n          return node;\n        }\n\n        {\n          // Process operators as OperatorNode\n          var operatorFunctions = ['add', 'multiply'];\n\n          if (operatorFunctions.indexOf(node.name) === -1) {\n            var args = node.args.map(arg => foldFraction(arg, options)); // If all args are numbers\n\n            if (!args.some(isNode)) {\n              try {\n                return _eval(node.name, args, options);\n              } catch (ignoreandcontine) {}\n            } // Convert all args to nodes and construct a symbolic function call\n\n\n            args = args.map(function (arg) {\n              return isNode(arg) ? arg : _toNode(arg);\n            });\n            return new FunctionNode(node.name, args);\n          } else {// treat as operator\n          }\n        }\n\n      /* falls through */\n\n      case 'OperatorNode':\n        {\n          var fn = node.fn.toString();\n\n          var _args;\n\n          var res;\n          var makeNode = createMakeNodeFunction(node);\n\n          if (isOperatorNode(node) && node.isUnary()) {\n            _args = [foldFraction(node.args[0], options)];\n\n            if (!isNode(_args[0])) {\n              res = _eval(fn, _args, options);\n            } else {\n              res = makeNode(_args);\n            }\n          } else if (isAssociative(node)) {\n            _args = allChildren(node);\n            _args = _args.map(arg => foldFraction(arg, options));\n\n            if (isCommutative(fn)) {\n              // commutative binary operator\n              var consts = [];\n              var vars = [];\n\n              for (var i = 0; i < _args.length; i++) {\n                if (!isNode(_args[i])) {\n                  consts.push(_args[i]);\n                } else {\n                  vars.push(_args[i]);\n                }\n              }\n\n              if (consts.length > 1) {\n                res = foldOp(fn, consts, makeNode, options);\n                vars.unshift(res);\n                res = foldOp(fn, vars, makeNode, options);\n              } else {\n                // we won't change the children order since it's not neccessary\n                res = foldOp(fn, _args, makeNode, options);\n              }\n            } else {\n              // non-commutative binary operator\n              res = foldOp(fn, _args, makeNode, options);\n            }\n          } else {\n            // non-associative binary operator\n            _args = node.args.map(arg => foldFraction(arg, options));\n            res = foldOp(fn, _args, makeNode, options);\n          }\n\n          return res;\n        }\n\n      case 'ParenthesisNode':\n        // remove the uneccessary parenthesis\n        return foldFraction(node.content, options);\n\n      case 'AccessorNode':\n      /* falls through */\n\n      case 'ArrayNode':\n      /* falls through */\n\n      case 'AssignmentNode':\n      /* falls through */\n\n      case 'BlockNode':\n      /* falls through */\n\n      case 'FunctionAssignmentNode':\n      /* falls through */\n\n      case 'IndexNode':\n      /* falls through */\n\n      case 'ObjectNode':\n      /* falls through */\n\n      case 'RangeNode':\n      /* falls through */\n\n      case 'ConditionalNode':\n      /* falls through */\n\n      default:\n        throw new Error(\"Unimplemented node type in simplifyConstant: \".concat(node.type));\n    }\n  }\n\n  return simplifyConstant;\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}