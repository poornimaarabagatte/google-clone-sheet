{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport { isComplex, isUnit, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { memoize } from '../../utils/function.js';\nimport { endsWith } from '../../utils/string.js';\nimport { clone, hasOwnProperty } from '../../utils/object.js';\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants.js';\nvar name = 'Unit';\nvar dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    abs,\n    fix,\n    round,\n    equal,\n    isNumeric,\n    format,\n    number,\n    Complex,\n    BigNumber: _BigNumber,\n    Fraction: _Fraction\n  } = _ref;\n  var toNumber = number;\n  /**\n   * A unit can be constructed in the following ways:\n   *\n   *     const a = new Unit(value, name)\n   *     const b = new Unit(null, name)\n   *     const c = Unit.parse(str)\n   *\n   * Example usage:\n   *\n   *     const a = new Unit(5, 'cm')               // 50 mm\n   *     const b = Unit.parse('23 kg')             // 23 kg\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\n   *\n   * @class Unit\n   * @constructor Unit\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n   * @param {string} [name]   A unit name like \"cm\" or \"inch\", or a derived unit of the form: \"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\", such as \"kg m^2/s^2\", where each unit appearing after the forward slash is taken to be in the denominator. \"kg m^2 s^-2\" is a synonym and is also acceptable. Any of the units can include a prefix.\n   */\n\n  function Unit(value, name) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n    if (name !== undefined && (typeof name !== 'string' || name === '')) {\n      throw new TypeError('Second parameter in Unit constructor must be a string');\n    }\n    if (name !== undefined) {\n      var u = Unit.parse(name);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    } else {\n      this.units = [{\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE,\n        // link to a list with supported prefixes\n        power: 0\n      }];\n      this.dimensions = [];\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        this.dimensions[i] = 0;\n      }\n    }\n    this.value = value !== undefined && value !== null ? this._normalize(value) : null;\n    this.fixPrefix = false; // if true, function format will not search for the\n    // best prefix but leave it as initially provided.\n    // fixPrefix is set true by the method Unit.to\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as he supplied.\n\n    this.skipAutomaticSimplification = true;\n  }\n  /**\n   * Attach type information\n   */\n\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser\n\n  var text, index, c;\n  function skipWhitespace() {\n    while (c === ' ' || c === '\\t') {\n      next();\n    }\n  }\n  function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  }\n  function isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n  function parseNumber() {\n    var number = '';\n    var oldIndex = index;\n    if (c === '+') {\n      next();\n    } else if (c === '-') {\n      number += c;\n      next();\n    }\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    } // get number, can have a single dot\n\n    if (c === '.') {\n      number += c;\n      next();\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    } else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n      if (c === '.') {\n        number += c;\n        next();\n      }\n    }\n    while (isDigit(c)) {\n      number += c;\n      next();\n    } // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n\n    if (c === 'E' || c === 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n      tentativeNumber += c;\n      next();\n      if (c === '+' || c === '-') {\n        tentativeNumber += c;\n        next();\n      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      } // We can now safely say that this is scientific notation.\n\n      number = number + tentativeNumber;\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n    return number;\n  }\n  function parseUnit() {\n    var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]\n\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\n      unitName += c;\n      next();\n    } // Must begin with [a-zA-Z]\n\n    var firstC = unitName.charAt(0);\n    if (Unit.isValidAlpha(firstC)) {\n      return unitName;\n    } else {\n      return null;\n    }\n  }\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Parse a string into a unit. The value of the unit is parsed as number,\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\n   *\n   * Throws an exception if the provided string does not contain a valid unit or\n   * cannot be parsed.\n   * @memberof Unit\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n   * @return {Unit} unit\n   */\n\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n    var unit = new Unit();\n    unit.units = [];\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false; // A unit should follow this pattern:\n    // [number] ...[ [*/] unit[^number] ]\n    // unit[^number] ... [ [*/] unit[^number] ]\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace(); // Optional number at the start of the string\n\n    var valueStr = parseNumber();\n    var value = null;\n    if (valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new _BigNumber(valueStr);\n      } else if (config.number === 'Fraction') {\n        try {\n          // not all numbers can be turned in Fractions, for example very small numbers not\n          value = new _Fraction(valueStr);\n        } catch (err) {\n          value = parseFloat(valueStr);\n        }\n      } else {\n        // number\n        value = parseFloat(valueStr);\n      }\n      skipWhitespace(); // Whitespace is not required here\n      // handle multiplication or division right after the value, like '1/s'\n\n      if (parseCharacter('*')) {\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n    } // Stack to keep track of powerMultipliers applied to each parentheses group\n\n    var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack\n\n    var powerMultiplierStackProduct = 1;\n    while (true) {\n      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      } // Is there something here?\n\n      var uStr = void 0;\n      if (c) {\n        var oldC = c;\n        uStr = parseUnit();\n        if (uStr === null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      } else {\n        // End of input.\n        break;\n      } // Verify the unit exists and get the prefix (if any)\n\n      var res = _findUnit(uStr);\n      if (res === null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a \"^ number\"?\n\n      skipWhitespace();\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n        if (p === null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n        power *= p;\n      } // Add the unit to the list\n\n      unit.units.push({\n        unit: res.unit,\n        prefix: res.prefix,\n        power: power\n      });\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      } // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n\n      skipWhitespace();\n      while (c === ')') {\n        if (powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      } // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n\n      expectingUnit = false;\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      } else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      } // Replace the unit into the auto unit system\n\n      if (res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    } // Has the string been entirely consumed?\n\n    skipWhitespace();\n    if (c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    } // Is there a trailing slash?\n\n    if (expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    } // Is the parentheses stack empty?\n\n    if (powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    } // Are there any units at all?\n\n    if (unit.units.length === 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n    unit.value = value !== undefined ? unit._normalize(value) : null;\n    return unit;\n  };\n  /**\n   * create a copy of this unit\n   * @memberof Unit\n   * @return {Unit} Returns a cloned version of the unit\n   */\n\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n    unit.fixPrefix = this.fixPrefix;\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n    for (var i = 0; i < this.units.length; i++) {\n      unit.units[i] = {};\n      for (var p in this.units[i]) {\n        if (hasOwnProperty(this.units[i], p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n    return unit;\n  };\n  /**\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n   * @memberof Unit\n   * @return {boolean} True if the unit is derived\n   */\n\n  Unit.prototype._isDerived = function () {\n    if (this.units.length === 0) {\n      return false;\n    }\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n  /**\n   * Normalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number | BigNumber | Fraction | boolean} value\n   * @return {number | BigNumber | Fraction | boolean} normalized value\n   * @private\n   */\n\n  Unit.prototype._normalize = function (value) {\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\n    var convert;\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    } else if (this._isDerived()) {\n      // This is a derived unit, so do not apply offsets.\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n      var res = value;\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      for (var i = 0; i < this.units.length; i++) {\n        unitValue = convert(this.units[i].unit.value);\n        unitPrefixValue = convert(this.units[i].prefix.value);\n        unitPower = convert(this.units[i].power);\n        res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n      }\n      return res;\n    } else {\n      // This is a single unit of power 1, like kg or degC\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      unitValue = convert(this.units[0].unit.value);\n      unitOffset = convert(this.units[0].unit.offset);\n      unitPrefixValue = convert(this.units[0].prefix.value);\n      return multiplyScalar(addScalar(value, unitOffset), multiplyScalar(unitValue, unitPrefixValue));\n    }\n  };\n  /**\n   * Denormalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number} value\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n   * @return {number} denormalized value\n   * @private\n   */\n\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\n    var convert;\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    } else if (this._isDerived()) {\n      // This is a derived unit, so do not apply offsets.\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.\n      var res = value;\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      for (var i = 0; i < this.units.length; i++) {\n        unitValue = convert(this.units[i].unit.value);\n        unitPrefixValue = convert(this.units[i].prefix.value);\n        unitPower = convert(this.units[i].power);\n        res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n      }\n      return res;\n    } else {\n      // This is a single unit of power 1, like kg or degC\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      unitValue = convert(this.units[0].unit.value);\n      unitPrefixValue = convert(this.units[0].prefix.value);\n      unitOffset = convert(this.units[0].unit.offset);\n      if (prefixValue === undefined || prefixValue === null) {\n        return subtract(divideScalar(divideScalar(value, unitValue), unitPrefixValue), unitOffset);\n      } else {\n        return subtract(divideScalar(divideScalar(value, unitValue), prefixValue), unitOffset);\n      }\n    }\n  };\n  /**\n   * Find a unit from a string\n   * @memberof Unit\n   * @param {string} str              A string like 'cm' or 'inch'\n   * @returns {Object | null} result  When found, an object with fields unit and\n   *                                  prefix is returned. Else, null is returned.\n   * @private\n   */\n\n  var _findUnit = memoize(str => {\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if (hasOwnProperty(UNITS, str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit,\n        prefix\n      };\n    }\n    for (var _name in UNITS) {\n      if (hasOwnProperty(UNITS, _name)) {\n        if (endsWith(str, _name)) {\n          var _unit = UNITS[_name];\n          var prefixLen = str.length - _name.length;\n          var prefixName = str.substring(0, prefixLen);\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\n          if (_prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: _unit,\n              prefix: _prefix\n            };\n          }\n        }\n      }\n    }\n    return null;\n  }, {\n    hasher: args => args[0],\n    limit: 100\n  });\n  /**\n   * Test if the given expression is a unit.\n   * The unit can have a prefix but cannot have a value.\n   * @memberof Unit\n   * @param {string} name   A string to be tested whether it is a value less unit.\n   *                        The unit can have prefix, like \"cm\"\n   * @return {boolean}      true if the given string is a unit\n   */\n\n  Unit.isValuelessUnit = function (name) {\n    return _findUnit(name) !== null;\n  };\n  /**\n   * check if this unit has given base unit\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n   * @memberof Unit\n   * @param {BASE_UNITS | string | undefined} base\n   */\n\n  Unit.prototype.hasBase = function (base) {\n    if (typeof base === 'string') {\n      base = BASE_UNITS[base];\n    }\n    if (!base) {\n      return false;\n    } // All dimensions must be the same\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n  };\n  /**\n   * Check if this unit has a base or bases equal to another base or bases\n   * For derived units, the exponent on each base also must match\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if equal base\n   */\n\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n  };\n  /**\n   * Check if this unit equals another unit\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if both units are equal\n   */\n\n  Unit.prototype.equals = function (other) {\n    return this.equalBase(other) && equal(this.value, other.value);\n  };\n  /**\n   * Multiply this unit with another one\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} product of this unit and the other unit\n   */\n\n  Unit.prototype.multiply = function (other) {\n    var res = this.clone();\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    } // Append other's units list onto res\n\n    for (var _i = 0; _i < other.units.length; _i++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread({}, other.units[_i]);\n      res.units.push(inverted);\n    } // If at least one operand has a value, then the result should also have a value\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = multiplyScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Divide this unit by another one\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} result of dividing this unit by the other unit\n   */\n\n  Unit.prototype.divide = function (other) {\n    var res = this.clone();\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    } // Invert and append other's units list onto res\n\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\n        power: -other.units[_i2].power\n      });\n      res.units.push(inverted);\n    } // If at least one operand has a value, the result should have a value\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = divideScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Calculate the power of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} p\n   * @returns {Unit}      The result: this^p\n   */\n\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    } // Adjust the power of each unit in the list\n\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\n      res.units[_i3].power *= p;\n    }\n    if (res.value !== null) {\n      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number\n      // if (!isNumeric(res.value)) {\n      //  res.value = NaN\n      // }\n      // Update: Complex supported now\n    } else {\n      res.value = null;\n    }\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n   * @param {Unit} unit\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n   */\n\n  function getNumericIfUnitless(unit) {\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    } else {\n      return unit;\n    }\n  }\n  /**\n   * Calculate the absolute value of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} x\n   * @returns {Unit}      The result: |x|, absolute value of x\n   */\n\n  Unit.prototype.abs = function () {\n    // This gives correct, but unexpected, results for units with an offset.\n    // For example, abs(-283.15 degC) = -263.15 degC !!!\n    var ret = this.clone();\n    ret.value = ret.value !== null ? abs(ret.value) : null;\n    for (var i in ret.units) {\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS.W;\n      }\n    }\n    return ret;\n  };\n  /**\n   * Convert the unit to a specific unit name.\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n   */\n\n  Unit.prototype.to = function (valuelessUnit) {\n    var other;\n    var value = this.value === null ? this._normalize(1) : this.value;\n    if (typeof valuelessUnit === 'string') {\n      // other = new Unit(null, valuelessUnit)\n      other = Unit.parse(valuelessUnit);\n      if (!this.equalBase(other)) {\n        throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\n      }\n      if (other.value !== null) {\n        throw new Error('Cannot convert to a unit with a value');\n      }\n      other.value = clone(value);\n      other.fixPrefix = true;\n      other.skipAutomaticSimplification = true;\n      return other;\n    } else if (isUnit(valuelessUnit)) {\n      if (!this.equalBase(valuelessUnit)) {\n        throw new Error(\"Units do not match ('\".concat(valuelessUnit.toString(), \"' != '\").concat(this.toString(), \"')\"));\n      }\n      if (valuelessUnit.value !== null) {\n        throw new Error('Cannot convert to a unit with a value');\n      }\n      other = valuelessUnit.clone();\n      other.value = clone(value);\n      other.fixPrefix = true;\n      other.skipAutomaticSimplification = true;\n      return other;\n    } else {\n      throw new Error('String or Unit expected as parameter');\n    }\n  };\n  /**\n   * Return the value of the unit when represented with given valueless unit\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number} Returns the unit value as number.\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n  /**\n   * Return the value of the unit in the original numeric type\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number | BigNumber | Fraction} Returns the unit value\n   */\n\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other;\n    if (valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    } else {\n      other = this.clone();\n    }\n    if (other._isDerived() || other.units.length === 0) {\n      return other._denormalize(other.value);\n    } else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n  /**\n   * Get a string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n  /**\n   * Get a JSON representation of the unit\n   * @memberof Unit\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   */\n\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.formatUnits(),\n      fixPrefix: this.fixPrefix\n    };\n  };\n  /**\n   * Instantiate a Unit from a JSON object\n   * @memberof Unit\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   * @return {Unit}\n   */\n\n  Unit.fromJSON = function (json) {\n    var unit = new Unit(json.value, json.unit);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n  /**\n   * Returns the string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n  Unit.prototype.valueOf = Unit.prototype.toString;\n  /**\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\n   * The returned Unit will contain a list of the \"best\" units for formatting.\n   */\n\n  Unit.prototype.simplify = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Search for a matching base\n\n    var matchingBase;\n    for (var key in currentUnitSystem) {\n      if (hasOwnProperty(currentUnitSystem, key)) {\n        if (ret.hasBase(BASE_UNITS[key])) {\n          matchingBase = key;\n          break;\n        }\n      }\n    }\n    if (matchingBase === 'NONE') {\n      ret.units = [];\n    } else {\n      var matchingUnit;\n      if (matchingBase) {\n        // Does the unit system have a matching unit?\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n      if (matchingUnit) {\n        ret.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      } else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: ret.dimensions[i] || 0\n              });\n            } else {\n              missingBaseDim = true;\n            }\n          }\n        } // Is the proposed unit list \"simpler\" than the existing one?\n\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          ret.units = proposedUnitList;\n        }\n      }\n    }\n    return ret;\n  };\n  /**\n   * Returns a new Unit in the SI system with the same value as this one\n   */\n\n  Unit.prototype.toSI = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        } else {\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\n        }\n      }\n    } // Replace this unit list with the proposed list\n\n    ret.units = proposedUnitList;\n    ret.fixPrefix = true;\n    ret.skipAutomaticSimplification = true;\n    return ret;\n  };\n  /**\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\n   * @memberof Unit\n   * @return {string}\n   */\n\n  Unit.prototype.formatUnits = function () {\n    var strNum = '';\n    var strDen = '';\n    var nNum = 0;\n    var nDen = 0;\n    for (var i = 0; i < this.units.length; i++) {\n      if (this.units[i].power > 0) {\n        nNum++;\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += '^' + this.units[i].power;\n        }\n      } else if (this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n    if (nDen > 0) {\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\n        if (this.units[_i4].power < 0) {\n          if (nNum > 0) {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\n              strDen += '^' + -this.units[_i4].power;\n            }\n          } else {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            strDen += '^' + this.units[_i4].power;\n          }\n        }\n      }\n    } // Remove leading \" \"\n\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\n\n    if (nNum > 1 && nDen > 0) {\n      strNum = '(' + strNum + ')';\n    }\n    if (nDen > 1 && nNum > 0) {\n      strDen = '(' + strDen + ')';\n    }\n    var str = strNum;\n    if (nNum > 0 && nDen > 0) {\n      str += ' / ';\n    }\n    str += strDen;\n    return str;\n  };\n  /**\n   * Get a string representation of the Unit, with optional formatting options.\n   * @memberof Unit\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string}\n   */\n\n  Unit.prototype.format = function (options) {\n    // Simplfy the unit list, unless it is valueless or was created directly in the\n    // constructor or as the result of to or toSI\n    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n\n    var isImaginary = false;\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\n    }\n    for (var i in simp.units) {\n      if (hasOwnProperty(simp.units, i)) {\n        if (simp.units[i].unit) {\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\n            simp.units[i].unit = UNITS.VAR;\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\n            simp.units[i].unit = UNITS.VA;\n          }\n        }\n      }\n    } // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n\n    if (simp.units.length === 1 && !simp.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        simp.units[0].prefix = simp._bestPrefix();\n      }\n    }\n    var value = simp._denormalize(simp.value);\n    var str = simp.value !== null ? format(value, options || {}) : '';\n    var unitStr = simp.formatUnits();\n    if (simp.value && isComplex(simp.value)) {\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\n    }\n    if (unitStr.length > 0 && str.length > 0) {\n      str += ' ';\n    }\n    str += unitStr;\n    return str;\n  };\n  /**\n   * Calculate the best prefix using current value.\n   * @memberof Unit\n   * @returns {Object} prefix\n   * @private\n   */\n\n  Unit.prototype._bestPrefix = function () {\n    if (this.units.length !== 1) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    } // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n\n    var absValue = this.value !== null ? abs(this.value) : 0;\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\n\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n    for (var p in prefixes) {\n      if (hasOwnProperty(prefixes, p)) {\n        var prefix = prefixes[p];\n        if (prefix.scientific) {\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\n            // choose the prefix with the smallest diff, or if equal, choose the one\n            // with the shortest name (can happen with SHORTLONG for example)\n            bestPrefix = prefix;\n            bestDiff = diff;\n          }\n        }\n      }\n    }\n    return bestPrefix;\n  };\n  /**\n   * Returns an array of units whose sum is equal to this unit\n   * @memberof Unit\n   * @param {Array} [parts] An array of strings or valueless units.\n   *\n   *   Example:\n   *\n   *   const u = new Unit(1, 'm')\n   *   u.splitUnit(['feet', 'inch'])\n   *     [ 3 feet, 3.3700787401575 inch ]\n   *\n   * @return {Array} An array of units.\n   */\n\n  Unit.prototype.splitUnit = function (parts) {\n    var x = this.clone();\n    var ret = [];\n    for (var i = 0; i < parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if (i === parts.length - 1) break; // Get the numeric value of this unit\n\n      var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n\n      var xRounded = round(xNumeric);\n      var xFixed = void 0;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      } else {\n        xFixed = fix(x.toNumeric());\n      }\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtract(x, y);\n    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n\n    var testSum = 0;\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\n      testSum = addScalar(testSum, ret[_i5].value);\n    }\n    if (equal(testSum, this.value)) {\n      x.value = 0;\n    }\n    ret.push(x);\n    return ret;\n  };\n  var PREFIXES = {\n    NONE: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      }\n    },\n    SHORT: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e1,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e2,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-1,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-2,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-3,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-6,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-9,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-12,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-15,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-18,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-21,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    LONG: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      deca: {\n        name: 'deca',\n        value: 1e1,\n        scientific: false\n      },\n      hecto: {\n        name: 'hecto',\n        value: 1e2,\n        scientific: false\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      },\n      deci: {\n        name: 'deci',\n        value: 1e-1,\n        scientific: false\n      },\n      centi: {\n        name: 'centi',\n        value: 1e-2,\n        scientific: false\n      },\n      milli: {\n        name: 'milli',\n        value: 1e-3,\n        scientific: true\n      },\n      micro: {\n        name: 'micro',\n        value: 1e-6,\n        scientific: true\n      },\n      nano: {\n        name: 'nano',\n        value: 1e-9,\n        scientific: true\n      },\n      pico: {\n        name: 'pico',\n        value: 1e-12,\n        scientific: true\n      },\n      femto: {\n        name: 'femto',\n        value: 1e-15,\n        scientific: true\n      },\n      atto: {\n        name: 'atto',\n        value: 1e-18,\n        scientific: true\n      },\n      zepto: {\n        name: 'zepto',\n        value: 1e-21,\n        scientific: true\n      },\n      yocto: {\n        name: 'yocto',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    SQUARED: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e2,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e4,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e6,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e12,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e18,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e24,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e30,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e36,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e42,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e48,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-2,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-4,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-6,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-12,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-18,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-24,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-30,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-36,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-42,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-48,\n        scientific: true\n      }\n    },\n    CUBIC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e3,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e6,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e9,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e18,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e27,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e36,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e45,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e54,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e63,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e72,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-3,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-6,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-9,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-18,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-27,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-36,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-45,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-54,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-63,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-72,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      Ki: {\n        name: 'Ki',\n        value: 1024,\n        scientific: true\n      },\n      Mi: {\n        name: 'Mi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      Gi: {\n        name: 'Gi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      Ti: {\n        name: 'Ti',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      Pi: {\n        name: 'Pi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      Ei: {\n        name: 'Ei',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      Zi: {\n        name: 'Zi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      Yi: {\n        name: 'Yi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BINARY_LONG_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_LONG_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kibi: {\n        name: 'kibi',\n        value: 1024,\n        scientific: true\n      },\n      mebi: {\n        name: 'mebi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      gibi: {\n        name: 'gibi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      tebi: {\n        name: 'tebi',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      pebi: {\n        name: 'pebi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      exi: {\n        name: 'exi',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      zebi: {\n        name: 'zebi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      yobi: {\n        name: 'yobi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BTU: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      MM: {\n        name: 'MM',\n        value: 1e6,\n        scientific: true\n      }\n    }\n  };\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n   * Index  Dimension\n   * -----  ---------\n   *   0    Length\n   *   1    Mass\n   *   2    Time\n   *   3    Current\n   *   4    Temperature\n   *   5    Luminous intensity\n   *   6    Amount of substance\n   *   7    Angle\n   *   8    Bit (digital)\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n   *\n   */\n\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n  for (var key in BASE_UNITS) {\n    if (hasOwnProperty(BASE_UNITS, key)) {\n      BASE_UNITS[key].key = key;\n    }\n  }\n  var BASE_UNIT_NONE = {};\n  var UNIT_NONE = {\n    name: '',\n    base: BASE_UNIT_NONE,\n    value: 1,\n    offset: 0,\n    dimensions: BASE_DIMENSIONS.map(x => 0)\n  };\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.0292,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    in: {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    },\n    // 1/1000 inch\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    },\n    // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    },\n    // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    },\n    // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    },\n    // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    },\n    // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    },\n    // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    },\n    // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    },\n    // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    },\n    // 10000 m2\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    },\n    // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    },\n    // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    },\n    // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    },\n    // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    },\n    // 15 mL\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00000006161152,\n      offset: 0\n    },\n    // 0.06161152 mL\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    },\n    // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.2384810,\n      offset: 0\n    },\n    // 238.4810 L\n    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\n    fldr: {\n      name: 'fldr',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    floz: {\n      name: 'floz',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gi: {\n      name: 'gi',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cp: {\n      name: 'cp',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pt: {\n      name: 'pt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    qt: {\n      name: 'qt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gal: {\n      name: 'gal',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    bbl: {\n      name: 'bbl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    obl: {\n      name: 'obl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    t: {\n      name: 't',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 1000,\n      offset: 0\n    },\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7 * 86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800,\n      // 1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600,\n      // Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'decade',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000,\n      // Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000,\n      // Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000,\n      // Julian millennium\n      offset: 0\n    },\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    radian: {\n      name: 'radian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    degree: {\n      name: 'degree',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    gradian: {\n      name: 'gradian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) / 1.8\n    // K(R) = °R / 1.8\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n    kilogramforce: {\n      name: 'kilogramforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.NONE,\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'watt',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORTLONG,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n    /*\n     * Unicode breaks in browsers if charset is not specified\n    Ω: {\n      name: 'Ω',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  }; // aliases (formerly plurals)\n\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fluiddrams: 'fluiddram',\n    fluidounces: 'fluidounce',\n    gills: 'gill',\n    cups: 'cup',\n    pints: 'pint',\n    quarts: 'quart',\n    gallons: 'gallon',\n    beerbarrels: 'beerbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n    kips: 'kip',\n    kgf: 'kilogramforce',\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n    decades: 'decade',\n    centuries: 'century',\n    millennia: 'millennium',\n    hertz: 'hertz',\n    radians: 'radian',\n    degrees: 'degree',\n    gradians: 'gradian',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n    amperes: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole',\n    bit: 'bits',\n    byte: 'bytes'\n  };\n  /**\n   * Calculate the values for the angle units.\n   * Value is calculated as number or BigNumber depending on the configuration\n   * @param {{number: 'number' | 'BigNumber'}} config\n   */\n\n  function calculateAngleValues(config) {\n    if (config.number === 'BigNumber') {\n      var pi = createPi(_BigNumber);\n      UNITS.rad.value = new _BigNumber(1);\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\n\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\n\n      UNITS.cycle.value = pi.times(2); // 2 * pi\n\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\n    } else {\n      // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\n\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\n\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\n\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\n    } // copy to the full names of the angles\n\n    UNITS.radian.value = UNITS.rad.value;\n    UNITS.degree.value = UNITS.deg.value;\n    UNITS.gradian.value = UNITS.grad.value;\n  } // apply the angle values now\n\n  calculateAngleValues(config);\n  if (on) {\n    // recalculate the values on change of configuration\n    on('config', function (curr, prev) {\n      if (curr.number !== prev.number) {\n        calculateAngleValues(curr);\n      }\n    });\n  }\n  /**\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n   */\n\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE: {\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE['']\n      },\n      LENGTH: {\n        unit: UNITS.m,\n        prefix: PREFIXES.SHORT['']\n      },\n      MASS: {\n        unit: UNITS.g,\n        prefix: PREFIXES.SHORT.k\n      },\n      TIME: {\n        unit: UNITS.s,\n        prefix: PREFIXES.SHORT['']\n      },\n      CURRENT: {\n        unit: UNITS.A,\n        prefix: PREFIXES.SHORT['']\n      },\n      TEMPERATURE: {\n        unit: UNITS.K,\n        prefix: PREFIXES.SHORT['']\n      },\n      LUMINOUS_INTENSITY: {\n        unit: UNITS.cd,\n        prefix: PREFIXES.SHORT['']\n      },\n      AMOUNT_OF_SUBSTANCE: {\n        unit: UNITS.mol,\n        prefix: PREFIXES.SHORT['']\n      },\n      ANGLE: {\n        unit: UNITS.rad,\n        prefix: PREFIXES.SHORT['']\n      },\n      BIT: {\n        unit: UNITS.bits,\n        prefix: PREFIXES.SHORT['']\n      },\n      // Derived units\n      FORCE: {\n        unit: UNITS.N,\n        prefix: PREFIXES.SHORT['']\n      },\n      ENERGY: {\n        unit: UNITS.J,\n        prefix: PREFIXES.SHORT['']\n      },\n      POWER: {\n        unit: UNITS.W,\n        prefix: PREFIXES.SHORT['']\n      },\n      PRESSURE: {\n        unit: UNITS.Pa,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CHARGE: {\n        unit: UNITS.C,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CAPACITANCE: {\n        unit: UNITS.F,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_POTENTIAL: {\n        unit: UNITS.V,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_RESISTANCE: {\n        unit: UNITS.ohm,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_INDUCTANCE: {\n        unit: UNITS.H,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CONDUCTANCE: {\n        unit: UNITS.S,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX: {\n        unit: UNITS.Wb,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX_DENSITY: {\n        unit: UNITS.T,\n        prefix: PREFIXES.SHORT['']\n      },\n      FREQUENCY: {\n        unit: UNITS.Hz,\n        prefix: PREFIXES.SHORT['']\n      }\n    }\n  }; // Clone to create the other unit systems\n\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {\n    unit: UNITS.m,\n    prefix: PREFIXES.SHORT.c\n  };\n  UNIT_SYSTEMS.cgs.MASS = {\n    unit: UNITS.g,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.FORCE = {\n    unit: UNITS.dyn,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.ENERGY = {\n    unit: UNITS.erg,\n    prefix: PREFIXES.NONE['']\n  }; // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH = {\n    unit: UNITS.ft,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.MASS = {\n    unit: UNITS.lbm,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.TEMPERATURE = {\n    unit: UNITS.degF,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.FORCE = {\n    unit: UNITS.lbf,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.ENERGY = {\n    unit: UNITS.BTU,\n    prefix: PREFIXES.BTU['']\n  };\n  UNIT_SYSTEMS.us.POWER = {\n    unit: UNITS.hp,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.PRESSURE = {\n    unit: UNITS.psi,\n    prefix: PREFIXES.NONE['']\n  }; // Add additional unit systems here.\n  // Choose a unit system to seed the auto unit system.\n\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system\n\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n  /**\n   * Set a unit system for formatting derived units.\n   * @param {string} [name] The name of the unit system.\n   */\n\n  Unit.setUnitSystem = function (name) {\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    } else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n  /**\n   * Return the current unit system.\n   * @return {string} The current unit system.\n   */\n\n  Unit.getUnitSystem = function () {\n    for (var _key in UNIT_SYSTEMS) {\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\n          return _key;\n        }\n      }\n    }\n  };\n  /**\n   * Converters to convert from number to an other numeric type like BigNumber\n   * or Fraction\n   */\n\n  Unit.typeConverters = {\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x);\n    },\n    Complex: function Complex(x) {\n      return x;\n    },\n    number: function number(x) {\n      return x;\n    }\n  };\n  /**\n   * Retrieve the right convertor function corresponding with the type\n   * of provided exampleValue.\n   *\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n   *                        In case of an unknown type,\n   * @return {Function}\n   */\n\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n    return Unit.typeConverters[type];\n  }; // Add dimensions to each built-in unit\n\n  for (var _key2 in UNITS) {\n    if (hasOwnProperty(UNITS, _key2)) {\n      var unit = UNITS[_key2];\n      unit.dimensions = unit.base.dimensions;\n    }\n  } // Create aliases\n\n  for (var _name2 in ALIASES) {\n    if (hasOwnProperty(ALIASES, _name2)) {\n      var _unit2 = UNITS[ALIASES[_name2]];\n      var alias = {};\n      for (var _key3 in _unit2) {\n        if (hasOwnProperty(_unit2, _key3)) {\n          alias[_key3] = _unit2[_key3];\n        }\n      }\n      alias.name = _name2;\n      UNITS[_name2] = alias;\n    }\n  }\n  /**\n   * Checks if a character is a valid latin letter (upper or lower case).\n   * Note that this function can be overridden, for example to allow support of other alphabets.\n   * @param {string} c Tested character\n   */\n\n  Unit.isValidAlpha = function isValidAlpha(c) {\n    return /^[a-zA-Z]$/.test(c);\n  };\n  function assertUnitNameIsValid(name) {\n    for (var i = 0; i < name.length; i++) {\n      c = name.charAt(i);\n      if (i === 0 && !Unit.isValidAlpha(c)) {\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n      }\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n      }\n    }\n  }\n  /**\n   * Wrapper around createUnitSingle.\n   * Example:\n   *  createUnit({\n   *    foo: { },\n   *    bar: {\n   *      definition: 'kg/foo',\n   *      aliases: ['ba', 'barr', 'bars'],\n   *      offset: 200\n   *    },\n   *    baz: '4 bar'\n   *  },\n   *  {\n   *    override: true\n   *  })\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\n   * @param {object} options\n   */\n\n  Unit.createUnit = function (obj, options) {\n    if (typeof obj !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    } // Remove all units and aliases we are overriding\n\n    if (options && options.override) {\n      for (var _key4 in obj) {\n        if (hasOwnProperty(obj, _key4)) {\n          Unit.deleteUnit(_key4);\n        }\n        if (obj[_key4].aliases) {\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\n            Unit.deleteUnit(obj[_key4].aliases[i]);\n          }\n        }\n      }\n    } // TODO: traverse multiple times until all units have been added\n\n    var lastUnit;\n    for (var _key5 in obj) {\n      if (hasOwnProperty(obj, _key5)) {\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\n      }\n    }\n    return lastUnit;\n  };\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   * Example:\n   *  createUnitSingle('knot', '0.514444444 m/s')\n   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit, Object} definition      Definition of the unit in terms\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\n   * or an Object. If an Object, may have the following properties:\n   *   - definition {string|Unit} The definition of this unit.\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\n   *     The default is \"none\".\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\n   *     is 459.67. Default is 0.\n   *   - baseName {string} If the unit's dimension does not match that of any other\n   *     base unit, the name of the newly create base unit. Otherwise, this property\n   *     has no effect.\n   *\n   * @param {Object} options   (optional) An object containing any of the following\n   * properties:\n   *   - override {boolean} Whether this unit should be allowed to override existing\n   *     units.\n   *\n   * @return {Unit}\n   */\n\n  Unit.createUnitSingle = function (name, obj, options) {\n    if (typeof obj === 'undefined' || obj === null) {\n      obj = {};\n    }\n    if (typeof name !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    } // Check collisions with existing units\n\n    if (hasOwnProperty(UNITS, name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n    assertUnitNameIsValid(name);\n    var defUnit = null; // The Unit from which the new unit will be created.\n\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    var baseName;\n    if (obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    } else if (typeof obj === 'string') {\n      if (obj !== '') {\n        definition = obj;\n      }\n    } else if (typeof obj === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes;\n      offset = obj.offset;\n      baseName = obj.baseName;\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    } else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        if (hasOwnProperty(UNITS, aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n    if (definition && typeof definition === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {\n          allowNoUnits: true\n        });\n      } catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw ex;\n      }\n    } else if (definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n    aliases = aliases || [];\n    offset = offset || 0;\n    if (prefixes && prefixes.toUpperCase) {\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    } else {\n      prefixes = PREFIXES.NONE;\n    } // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n\n    var newUnit = {};\n    if (!defUnit) {\n      // Add a new base dimension\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units\n\n      for (var b in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\n        }\n      } // Add the new base unit\n\n      var newBaseUnit = {\n        dimensions: []\n      };\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\n        newBaseUnit.dimensions[_i6] = 0;\n      }\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n      newUnit = {\n        name: name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset,\n        base: BASE_UNITS[baseName]\n      };\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n    } else {\n      newUnit = {\n        name: name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset\n      }; // Create a new base if no matching base exists\n\n      var anyMatch = false;\n      for (var _i7 in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\n          var match = true;\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n          if (match) {\n            anyMatch = true;\n            newUnit.base = BASE_UNITS[_i7];\n            break;\n          }\n        }\n      }\n      if (!anyMatch) {\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n\n        var _newBaseUnit = {\n          dimensions: defUnit.dimensions.slice(0)\n        };\n        _newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = _newBaseUnit;\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n        newUnit.base = BASE_UNITS[baseName];\n      }\n    }\n    Unit.UNITS[name] = newUnit;\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\n      var aliasName = aliases[_i8];\n      var _alias = {};\n      for (var _key6 in newUnit) {\n        if (hasOwnProperty(newUnit, _key6)) {\n          _alias[_key6] = newUnit[_key6];\n        }\n      }\n      _alias.name = aliasName;\n      Unit.UNITS[aliasName] = _alias;\n    } // delete the memoization cache, since adding a new unit to the array\n    // invalidates all old results\n\n    delete _findUnit.cache;\n    return new Unit(null, name);\n  };\n  Unit.deleteUnit = function (name) {\n    delete Unit.UNITS[name];\n  }; // expose arrays with prefixes, dimensions, units, systems\n\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n  return Unit;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["_extends","_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","isComplex","isUnit","typeOf","factory","memoize","endsWith","clone","hasOwnProperty","createBigNumberPi","createPi","name","dependencies","createUnitClass","_ref","on","config","addScalar","subtract","multiplyScalar","divideScalar","pow","abs","fix","round","equal","isNumeric","format","number","Complex","BigNumber","_BigNumber","Fraction","_Fraction","toNumber","Unit","value","Error","undefined","TypeError","u","parse","units","dimensions","unit","UNIT_NONE","prefix","PREFIXES","NONE","power","BASE_DIMENSIONS","_normalize","fixPrefix","skipAutomaticSimplification","prototype","type","text","index","c","skipWhitespace","next","isDigitDot","isDigit","charAt","revert","oldIndex","parseNumber","tentativeNumber","tentativeIndex","parseUnit","unitName","isValidAlpha","firstC","parseCharacter","toFind","str","options","powerMultiplierCurrent","expectingUnit","valueStr","err","parseFloat","powerMultiplierStack","powerMultiplierStackProduct","uStr","oldC","SyntaxError","toString","res","_findUnit","p","pop","base","baseDim","UNIT_SYSTEMS","auto","allowNoUnits","slice","_isDerived","Math","unitValue","unitOffset","unitPower","unitPrefixValue","convert","_getNumberConverter","offset","_denormalize","prefixValue","UNITS","prefixes","_name","_unit","prefixLen","prefixName","substring","_prefix","hasher","args","limit","isValuelessUnit","hasBase","BASE_UNITS","equalBase","other","equals","multiply","_i","inverted","valThis","valOther","getNumericIfUnitless","divide","_i2","_i3","predictable","ret","W","to","valuelessUnit","concat","toNumeric","toJSON","mathjs","formatUnits","fromJSON","json","valueOf","simplify","proposedUnitList","matchingBase","currentUnitSystem","matchingUnit","missingBaseDim","toSI","si","strNum","strDen","nNum","nDen","_i4","substr","simp","isImaginary","re","VAR","VA","_bestPrefix","unitStr","absValue","absUnitValue","bestPrefix","bestDiff","log","LN10","scientific","diff","splitUnit","parts","x","xNumeric","xRounded","xFixed","isNearlyEqual","y","testSum","_i5","SHORT","da","h","k","M","G","T","P","E","Z","Y","d","m","n","f","a","z","LONG","deca","hecto","kilo","mega","giga","tera","peta","exa","zetta","yotta","deci","centi","milli","micro","nano","pico","femto","atto","zepto","yocto","SQUARED","CUBIC","BINARY_SHORT_SI","BINARY_SHORT_IEC","Ki","Mi","Gi","Ti","Pi","Ei","Zi","Yi","BINARY_LONG_SI","BINARY_LONG_IEC","kibi","mebi","gibi","tebi","pebi","exi","zebi","yobi","BTU","MM","SHORTLONG","BINARY_SHORT","BINARY_LONG","MASS","LENGTH","TIME","CURRENT","TEMPERATURE","LUMINOUS_INTENSITY","AMOUNT_OF_SUBSTANCE","FORCE","SURFACE","VOLUME","ENERGY","POWER","PRESSURE","ELECTRIC_CHARGE","ELECTRIC_CAPACITANCE","ELECTRIC_POTENTIAL","ELECTRIC_RESISTANCE","ELECTRIC_INDUCTANCE","ELECTRIC_CONDUCTANCE","MAGNETIC_FLUX","MAGNETIC_FLUX_DENSITY","FREQUENCY","ANGLE","BIT","BASE_UNIT_NONE","map","meter","inch","foot","yard","mile","link","rod","chain","angstrom","in","ft","yd","mi","li","rd","ch","mil","m2","sqin","sqft","sqyd","sqmi","sqrd","sqch","sqmil","acre","hectare","m3","L","l","litre","cuin","cuft","cuyd","teaspoon","tablespoon","drop","gtt","minim","fluiddram","fluidounce","gill","cc","cup","pint","quart","gallon","beerbarrel","oilbarrel","hogshead","fldr","floz","gi","cp","pt","qt","gal","bbl","obl","g","gram","ton","t","tonne","grain","dram","ounce","poundmass","hundredweight","stick","stone","gr","dr","oz","lbm","cwt","s","min","second","sec","minute","hour","day","week","month","year","decade","century","millennium","hertz","reciprocal","Hz","rad","radian","deg","degree","grad","gradian","cycle","arcsec","arcmin","A","ampere","K","degC","degF","degR","kelvin","celsius","fahrenheit","rankine","mol","mole","cd","candela","N","newton","dyn","dyne","lbf","poundforce","kip","kilogramforce","J","joule","erg","Wh","eV","electronvolt","watt","hp","I","Pa","psi","atm","bar","torr","mmHg","mmH2O","cmH2O","coulomb","C","farad","F","volt","V","ohm","henry","H","siemens","S","weber","Wb","tesla","b","bits","B","bytes","ALIASES","meters","inches","feet","yards","miles","links","rods","chains","angstroms","lt","litres","liter","liters","teaspoons","tablespoons","minims","fluiddrams","fluidounces","gills","cups","pints","quarts","gallons","beerbarrels","oilbarrels","hogsheads","gtts","grams","tons","tonnes","grains","drams","ounces","poundmasses","hundredweights","sticks","lb","lbs","kips","kgf","acres","hectares","sqfeet","sqyard","sqmile","sqmiles","mmhg","mmh2o","cmh2o","seconds","secs","minutes","mins","hours","hr","hrs","days","weeks","months","years","decades","centuries","millennia","radians","degrees","gradians","cycles","arcsecond","arcseconds","arcminute","arcminutes","BTUs","watts","joules","amperes","coulombs","volts","ohms","farads","webers","teslas","electronvolts","moles","bit","byte","calculateAngleValues","pi","div","times","PI","curr","prev","cgs","JSON","stringify","us","setUnitSystem","join","getUnitSystem","_key","typeConverters","_key2","_name2","_unit2","alias","_key3","test","assertUnitNameIsValid","createUnit","obj","override","_key4","deleteUnit","aliases","lastUnit","_key5","createUnitSingle","defUnit","definition","baseName","ex","message","toUpperCase","newUnit","indexOf","newBaseUnit","_i6","anyMatch","_i7","match","j","_newBaseUnit","_i8","aliasName","_alias","_key6","cache","isClass"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/type/unit/Unit.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { isComplex, isUnit, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { memoize } from '../../utils/function.js';\nimport { endsWith } from '../../utils/string.js';\nimport { clone, hasOwnProperty } from '../../utils/object.js';\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants.js';\nvar name = 'Unit';\nvar dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    abs,\n    fix,\n    round,\n    equal,\n    isNumeric,\n    format,\n    number,\n    Complex,\n    BigNumber: _BigNumber,\n    Fraction: _Fraction\n  } = _ref;\n  var toNumber = number;\n  /**\n   * A unit can be constructed in the following ways:\n   *\n   *     const a = new Unit(value, name)\n   *     const b = new Unit(null, name)\n   *     const c = Unit.parse(str)\n   *\n   * Example usage:\n   *\n   *     const a = new Unit(5, 'cm')               // 50 mm\n   *     const b = Unit.parse('23 kg')             // 23 kg\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\n   *\n   * @class Unit\n   * @constructor Unit\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n   * @param {string} [name]   A unit name like \"cm\" or \"inch\", or a derived unit of the form: \"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\", such as \"kg m^2/s^2\", where each unit appearing after the forward slash is taken to be in the denominator. \"kg m^2 s^-2\" is a synonym and is also acceptable. Any of the units can include a prefix.\n   */\n\n  function Unit(value, name) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n\n    if (name !== undefined && (typeof name !== 'string' || name === '')) {\n      throw new TypeError('Second parameter in Unit constructor must be a string');\n    }\n\n    if (name !== undefined) {\n      var u = Unit.parse(name);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    } else {\n      this.units = [{\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE,\n        // link to a list with supported prefixes\n        power: 0\n      }];\n      this.dimensions = [];\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        this.dimensions[i] = 0;\n      }\n    }\n\n    this.value = value !== undefined && value !== null ? this._normalize(value) : null;\n    this.fixPrefix = false; // if true, function format will not search for the\n    // best prefix but leave it as initially provided.\n    // fixPrefix is set true by the method Unit.to\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as he supplied.\n\n    this.skipAutomaticSimplification = true;\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser\n\n  var text, index, c;\n\n  function skipWhitespace() {\n    while (c === ' ' || c === '\\t') {\n      next();\n    }\n  }\n\n  function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  }\n\n  function isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n\n  function parseNumber() {\n    var number = '';\n    var oldIndex = index;\n\n    if (c === '+') {\n      next();\n    } else if (c === '-') {\n      number += c;\n      next();\n    }\n\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    } // get number, can have a single dot\n\n\n    if (c === '.') {\n      number += c;\n      next();\n\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    } else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n\n      if (c === '.') {\n        number += c;\n        next();\n      }\n    }\n\n    while (isDigit(c)) {\n      number += c;\n      next();\n    } // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n\n\n    if (c === 'E' || c === 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n      tentativeNumber += c;\n      next();\n\n      if (c === '+' || c === '-') {\n        tentativeNumber += c;\n        next();\n      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n\n\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      } // We can now safely say that this is scientific notation.\n\n\n      number = number + tentativeNumber;\n\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n\n    return number;\n  }\n\n  function parseUnit() {\n    var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]\n\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\n      unitName += c;\n      next();\n    } // Must begin with [a-zA-Z]\n\n\n    var firstC = unitName.charAt(0);\n\n    if (Unit.isValidAlpha(firstC)) {\n      return unitName;\n    } else {\n      return null;\n    }\n  }\n\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Parse a string into a unit. The value of the unit is parsed as number,\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\n   *\n   * Throws an exception if the provided string does not contain a valid unit or\n   * cannot be parsed.\n   * @memberof Unit\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n   * @return {Unit} unit\n   */\n\n\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n\n    var unit = new Unit();\n    unit.units = [];\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false; // A unit should follow this pattern:\n    // [number] ...[ [*/] unit[^number] ]\n    // unit[^number] ... [ [*/] unit[^number] ]\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace(); // Optional number at the start of the string\n\n    var valueStr = parseNumber();\n    var value = null;\n\n    if (valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new _BigNumber(valueStr);\n      } else if (config.number === 'Fraction') {\n        try {\n          // not all numbers can be turned in Fractions, for example very small numbers not\n          value = new _Fraction(valueStr);\n        } catch (err) {\n          value = parseFloat(valueStr);\n        }\n      } else {\n        // number\n        value = parseFloat(valueStr);\n      }\n\n      skipWhitespace(); // Whitespace is not required here\n      // handle multiplication or division right after the value, like '1/s'\n\n      if (parseCharacter('*')) {\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n    } // Stack to keep track of powerMultipliers applied to each parentheses group\n\n\n    var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack\n\n    var powerMultiplierStackProduct = 1;\n\n    while (true) {\n      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      } // Is there something here?\n\n\n      var uStr = void 0;\n\n      if (c) {\n        var oldC = c;\n        uStr = parseUnit();\n\n        if (uStr === null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      } else {\n        // End of input.\n        break;\n      } // Verify the unit exists and get the prefix (if any)\n\n\n      var res = _findUnit(uStr);\n\n      if (res === null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a \"^ number\"?\n\n      skipWhitespace();\n\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n\n        if (p === null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n\n        power *= p;\n      } // Add the unit to the list\n\n\n      unit.units.push({\n        unit: res.unit,\n        prefix: res.prefix,\n        power: power\n      });\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      } // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n\n\n      skipWhitespace();\n\n      while (c === ')') {\n        if (powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      } // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n\n\n      expectingUnit = false;\n\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      } else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      } // Replace the unit into the auto unit system\n\n\n      if (res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    } // Has the string been entirely consumed?\n\n\n    skipWhitespace();\n\n    if (c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    } // Is there a trailing slash?\n\n\n    if (expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    } // Is the parentheses stack empty?\n\n\n    if (powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    } // Are there any units at all?\n\n\n    if (unit.units.length === 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n\n    unit.value = value !== undefined ? unit._normalize(value) : null;\n    return unit;\n  };\n  /**\n   * create a copy of this unit\n   * @memberof Unit\n   * @return {Unit} Returns a cloned version of the unit\n   */\n\n\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n    unit.fixPrefix = this.fixPrefix;\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n\n    for (var i = 0; i < this.units.length; i++) {\n      unit.units[i] = {};\n\n      for (var p in this.units[i]) {\n        if (hasOwnProperty(this.units[i], p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n\n    return unit;\n  };\n  /**\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n   * @memberof Unit\n   * @return {boolean} True if the unit is derived\n   */\n\n\n  Unit.prototype._isDerived = function () {\n    if (this.units.length === 0) {\n      return false;\n    }\n\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n  /**\n   * Normalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number | BigNumber | Fraction | boolean} value\n   * @return {number | BigNumber | Fraction | boolean} normalized value\n   * @private\n   */\n\n\n  Unit.prototype._normalize = function (value) {\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\n    var convert;\n\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    } else if (this._isDerived()) {\n      // This is a derived unit, so do not apply offsets.\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n      var res = value;\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      for (var i = 0; i < this.units.length; i++) {\n        unitValue = convert(this.units[i].unit.value);\n        unitPrefixValue = convert(this.units[i].prefix.value);\n        unitPower = convert(this.units[i].power);\n        res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n      }\n\n      return res;\n    } else {\n      // This is a single unit of power 1, like kg or degC\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      unitValue = convert(this.units[0].unit.value);\n      unitOffset = convert(this.units[0].unit.offset);\n      unitPrefixValue = convert(this.units[0].prefix.value);\n      return multiplyScalar(addScalar(value, unitOffset), multiplyScalar(unitValue, unitPrefixValue));\n    }\n  };\n  /**\n   * Denormalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number} value\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n   * @return {number} denormalized value\n   * @private\n   */\n\n\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\n    var convert;\n\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    } else if (this._isDerived()) {\n      // This is a derived unit, so do not apply offsets.\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.\n      var res = value;\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      for (var i = 0; i < this.units.length; i++) {\n        unitValue = convert(this.units[i].unit.value);\n        unitPrefixValue = convert(this.units[i].prefix.value);\n        unitPower = convert(this.units[i].power);\n        res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n      }\n\n      return res;\n    } else {\n      // This is a single unit of power 1, like kg or degC\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      unitValue = convert(this.units[0].unit.value);\n      unitPrefixValue = convert(this.units[0].prefix.value);\n      unitOffset = convert(this.units[0].unit.offset);\n\n      if (prefixValue === undefined || prefixValue === null) {\n        return subtract(divideScalar(divideScalar(value, unitValue), unitPrefixValue), unitOffset);\n      } else {\n        return subtract(divideScalar(divideScalar(value, unitValue), prefixValue), unitOffset);\n      }\n    }\n  };\n  /**\n   * Find a unit from a string\n   * @memberof Unit\n   * @param {string} str              A string like 'cm' or 'inch'\n   * @returns {Object | null} result  When found, an object with fields unit and\n   *                                  prefix is returned. Else, null is returned.\n   * @private\n   */\n\n\n  var _findUnit = memoize(str => {\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if (hasOwnProperty(UNITS, str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit,\n        prefix\n      };\n    }\n\n    for (var _name in UNITS) {\n      if (hasOwnProperty(UNITS, _name)) {\n        if (endsWith(str, _name)) {\n          var _unit = UNITS[_name];\n          var prefixLen = str.length - _name.length;\n          var prefixName = str.substring(0, prefixLen);\n\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\n\n          if (_prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: _unit,\n              prefix: _prefix\n            };\n          }\n        }\n      }\n    }\n\n    return null;\n  }, {\n    hasher: args => args[0],\n    limit: 100\n  });\n  /**\n   * Test if the given expression is a unit.\n   * The unit can have a prefix but cannot have a value.\n   * @memberof Unit\n   * @param {string} name   A string to be tested whether it is a value less unit.\n   *                        The unit can have prefix, like \"cm\"\n   * @return {boolean}      true if the given string is a unit\n   */\n\n\n  Unit.isValuelessUnit = function (name) {\n    return _findUnit(name) !== null;\n  };\n  /**\n   * check if this unit has given base unit\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n   * @memberof Unit\n   * @param {BASE_UNITS | string | undefined} base\n   */\n\n\n  Unit.prototype.hasBase = function (base) {\n    if (typeof base === 'string') {\n      base = BASE_UNITS[base];\n    }\n\n    if (!base) {\n      return false;\n    } // All dimensions must be the same\n\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit has a base or bases equal to another base or bases\n   * For derived units, the exponent on each base also must match\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if equal base\n   */\n\n\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit equals another unit\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if both units are equal\n   */\n\n\n  Unit.prototype.equals = function (other) {\n    return this.equalBase(other) && equal(this.value, other.value);\n  };\n  /**\n   * Multiply this unit with another one\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} product of this unit and the other unit\n   */\n\n\n  Unit.prototype.multiply = function (other) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    } // Append other's units list onto res\n\n\n    for (var _i = 0; _i < other.units.length; _i++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread({}, other.units[_i]);\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, then the result should also have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = multiplyScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Divide this unit by another one\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} result of dividing this unit by the other unit\n   */\n\n\n  Unit.prototype.divide = function (other) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    } // Invert and append other's units list onto res\n\n\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\n        power: -other.units[_i2].power\n      });\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, the result should have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = divideScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Calculate the power of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} p\n   * @returns {Unit}      The result: this^p\n   */\n\n\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    } // Adjust the power of each unit in the list\n\n\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\n      res.units[_i3].power *= p;\n    }\n\n    if (res.value !== null) {\n      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number\n      // if (!isNumeric(res.value)) {\n      //  res.value = NaN\n      // }\n      // Update: Complex supported now\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n   * @param {Unit} unit\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n   */\n\n\n  function getNumericIfUnitless(unit) {\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    } else {\n      return unit;\n    }\n  }\n  /**\n   * Calculate the absolute value of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} x\n   * @returns {Unit}      The result: |x|, absolute value of x\n   */\n\n\n  Unit.prototype.abs = function () {\n    // This gives correct, but unexpected, results for units with an offset.\n    // For example, abs(-283.15 degC) = -263.15 degC !!!\n    var ret = this.clone();\n    ret.value = ret.value !== null ? abs(ret.value) : null;\n\n    for (var i in ret.units) {\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS.W;\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Convert the unit to a specific unit name.\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n   */\n\n\n  Unit.prototype.to = function (valuelessUnit) {\n    var other;\n    var value = this.value === null ? this._normalize(1) : this.value;\n\n    if (typeof valuelessUnit === 'string') {\n      // other = new Unit(null, valuelessUnit)\n      other = Unit.parse(valuelessUnit);\n\n      if (!this.equalBase(other)) {\n        throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\n      }\n\n      if (other.value !== null) {\n        throw new Error('Cannot convert to a unit with a value');\n      }\n\n      other.value = clone(value);\n      other.fixPrefix = true;\n      other.skipAutomaticSimplification = true;\n      return other;\n    } else if (isUnit(valuelessUnit)) {\n      if (!this.equalBase(valuelessUnit)) {\n        throw new Error(\"Units do not match ('\".concat(valuelessUnit.toString(), \"' != '\").concat(this.toString(), \"')\"));\n      }\n\n      if (valuelessUnit.value !== null) {\n        throw new Error('Cannot convert to a unit with a value');\n      }\n\n      other = valuelessUnit.clone();\n      other.value = clone(value);\n      other.fixPrefix = true;\n      other.skipAutomaticSimplification = true;\n      return other;\n    } else {\n      throw new Error('String or Unit expected as parameter');\n    }\n  };\n  /**\n   * Return the value of the unit when represented with given valueless unit\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number} Returns the unit value as number.\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n\n\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n  /**\n   * Return the value of the unit in the original numeric type\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number | BigNumber | Fraction} Returns the unit value\n   */\n\n\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other;\n\n    if (valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    } else {\n      other = this.clone();\n    }\n\n    if (other._isDerived() || other.units.length === 0) {\n      return other._denormalize(other.value);\n    } else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n  /**\n   * Get a string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n  /**\n   * Get a JSON representation of the unit\n   * @memberof Unit\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   */\n\n\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.formatUnits(),\n      fixPrefix: this.fixPrefix\n    };\n  };\n  /**\n   * Instantiate a Unit from a JSON object\n   * @memberof Unit\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   * @return {Unit}\n   */\n\n\n  Unit.fromJSON = function (json) {\n    var unit = new Unit(json.value, json.unit);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n  /**\n   * Returns the string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.valueOf = Unit.prototype.toString;\n  /**\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\n   * The returned Unit will contain a list of the \"best\" units for formatting.\n   */\n\n  Unit.prototype.simplify = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Search for a matching base\n\n    var matchingBase;\n\n    for (var key in currentUnitSystem) {\n      if (hasOwnProperty(currentUnitSystem, key)) {\n        if (ret.hasBase(BASE_UNITS[key])) {\n          matchingBase = key;\n          break;\n        }\n      }\n    }\n\n    if (matchingBase === 'NONE') {\n      ret.units = [];\n    } else {\n      var matchingUnit;\n\n      if (matchingBase) {\n        // Does the unit system have a matching unit?\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n\n      if (matchingUnit) {\n        ret.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      } else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: ret.dimensions[i] || 0\n              });\n            } else {\n              missingBaseDim = true;\n            }\n          }\n        } // Is the proposed unit list \"simpler\" than the existing one?\n\n\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          ret.units = proposedUnitList;\n        }\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Returns a new Unit in the SI system with the same value as this one\n   */\n\n\n  Unit.prototype.toSI = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        } else {\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\n        }\n      }\n    } // Replace this unit list with the proposed list\n\n\n    ret.units = proposedUnitList;\n    ret.fixPrefix = true;\n    ret.skipAutomaticSimplification = true;\n    return ret;\n  };\n  /**\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.formatUnits = function () {\n    var strNum = '';\n    var strDen = '';\n    var nNum = 0;\n    var nDen = 0;\n\n    for (var i = 0; i < this.units.length; i++) {\n      if (this.units[i].power > 0) {\n        nNum++;\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\n\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += '^' + this.units[i].power;\n        }\n      } else if (this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n\n    if (nDen > 0) {\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\n        if (this.units[_i4].power < 0) {\n          if (nNum > 0) {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\n              strDen += '^' + -this.units[_i4].power;\n            }\n          } else {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            strDen += '^' + this.units[_i4].power;\n          }\n        }\n      }\n    } // Remove leading \" \"\n\n\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\n\n    if (nNum > 1 && nDen > 0) {\n      strNum = '(' + strNum + ')';\n    }\n\n    if (nDen > 1 && nNum > 0) {\n      strDen = '(' + strDen + ')';\n    }\n\n    var str = strNum;\n\n    if (nNum > 0 && nDen > 0) {\n      str += ' / ';\n    }\n\n    str += strDen;\n    return str;\n  };\n  /**\n   * Get a string representation of the Unit, with optional formatting options.\n   * @memberof Unit\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string}\n   */\n\n\n  Unit.prototype.format = function (options) {\n    // Simplfy the unit list, unless it is valueless or was created directly in the\n    // constructor or as the result of to or toSI\n    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n\n    var isImaginary = false;\n\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\n    }\n\n    for (var i in simp.units) {\n      if (hasOwnProperty(simp.units, i)) {\n        if (simp.units[i].unit) {\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\n            simp.units[i].unit = UNITS.VAR;\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\n            simp.units[i].unit = UNITS.VA;\n          }\n        }\n      }\n    } // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n\n\n    if (simp.units.length === 1 && !simp.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        simp.units[0].prefix = simp._bestPrefix();\n      }\n    }\n\n    var value = simp._denormalize(simp.value);\n\n    var str = simp.value !== null ? format(value, options || {}) : '';\n    var unitStr = simp.formatUnits();\n\n    if (simp.value && isComplex(simp.value)) {\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\n    }\n\n    if (unitStr.length > 0 && str.length > 0) {\n      str += ' ';\n    }\n\n    str += unitStr;\n    return str;\n  };\n  /**\n   * Calculate the best prefix using current value.\n   * @memberof Unit\n   * @returns {Object} prefix\n   * @private\n   */\n\n\n  Unit.prototype._bestPrefix = function () {\n    if (this.units.length !== 1) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    } // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n\n\n    var absValue = this.value !== null ? abs(this.value) : 0;\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\n\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n\n    for (var p in prefixes) {\n      if (hasOwnProperty(prefixes, p)) {\n        var prefix = prefixes[p];\n\n        if (prefix.scientific) {\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\n            // choose the prefix with the smallest diff, or if equal, choose the one\n            // with the shortest name (can happen with SHORTLONG for example)\n            bestPrefix = prefix;\n            bestDiff = diff;\n          }\n        }\n      }\n    }\n\n    return bestPrefix;\n  };\n  /**\n   * Returns an array of units whose sum is equal to this unit\n   * @memberof Unit\n   * @param {Array} [parts] An array of strings or valueless units.\n   *\n   *   Example:\n   *\n   *   const u = new Unit(1, 'm')\n   *   u.splitUnit(['feet', 'inch'])\n   *     [ 3 feet, 3.3700787401575 inch ]\n   *\n   * @return {Array} An array of units.\n   */\n\n\n  Unit.prototype.splitUnit = function (parts) {\n    var x = this.clone();\n    var ret = [];\n\n    for (var i = 0; i < parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if (i === parts.length - 1) break; // Get the numeric value of this unit\n\n      var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n\n      var xRounded = round(xNumeric);\n      var xFixed = void 0;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      } else {\n        xFixed = fix(x.toNumeric());\n      }\n\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtract(x, y);\n    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n\n\n    var testSum = 0;\n\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\n      testSum = addScalar(testSum, ret[_i5].value);\n    }\n\n    if (equal(testSum, this.value)) {\n      x.value = 0;\n    }\n\n    ret.push(x);\n    return ret;\n  };\n\n  var PREFIXES = {\n    NONE: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      }\n    },\n    SHORT: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e1,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e2,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-1,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-2,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-3,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-6,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-9,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-12,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-15,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-18,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-21,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    LONG: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      deca: {\n        name: 'deca',\n        value: 1e1,\n        scientific: false\n      },\n      hecto: {\n        name: 'hecto',\n        value: 1e2,\n        scientific: false\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      },\n      deci: {\n        name: 'deci',\n        value: 1e-1,\n        scientific: false\n      },\n      centi: {\n        name: 'centi',\n        value: 1e-2,\n        scientific: false\n      },\n      milli: {\n        name: 'milli',\n        value: 1e-3,\n        scientific: true\n      },\n      micro: {\n        name: 'micro',\n        value: 1e-6,\n        scientific: true\n      },\n      nano: {\n        name: 'nano',\n        value: 1e-9,\n        scientific: true\n      },\n      pico: {\n        name: 'pico',\n        value: 1e-12,\n        scientific: true\n      },\n      femto: {\n        name: 'femto',\n        value: 1e-15,\n        scientific: true\n      },\n      atto: {\n        name: 'atto',\n        value: 1e-18,\n        scientific: true\n      },\n      zepto: {\n        name: 'zepto',\n        value: 1e-21,\n        scientific: true\n      },\n      yocto: {\n        name: 'yocto',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    SQUARED: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e2,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e4,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e6,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e12,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e18,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e24,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e30,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e36,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e42,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e48,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-2,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-4,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-6,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-12,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-18,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-24,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-30,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-36,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-42,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-48,\n        scientific: true\n      }\n    },\n    CUBIC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e3,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e6,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e9,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e18,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e27,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e36,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e45,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e54,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e63,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e72,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-3,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-6,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-9,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-18,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-27,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-36,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-45,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-54,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-63,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-72,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      Ki: {\n        name: 'Ki',\n        value: 1024,\n        scientific: true\n      },\n      Mi: {\n        name: 'Mi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      Gi: {\n        name: 'Gi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      Ti: {\n        name: 'Ti',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      Pi: {\n        name: 'Pi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      Ei: {\n        name: 'Ei',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      Zi: {\n        name: 'Zi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      Yi: {\n        name: 'Yi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BINARY_LONG_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_LONG_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kibi: {\n        name: 'kibi',\n        value: 1024,\n        scientific: true\n      },\n      mebi: {\n        name: 'mebi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      gibi: {\n        name: 'gibi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      tebi: {\n        name: 'tebi',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      pebi: {\n        name: 'pebi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      exi: {\n        name: 'exi',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      zebi: {\n        name: 'zebi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      yobi: {\n        name: 'yobi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BTU: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      MM: {\n        name: 'MM',\n        value: 1e6,\n        scientific: true\n      }\n    }\n  };\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n   * Index  Dimension\n   * -----  ---------\n   *   0    Length\n   *   1    Mass\n   *   2    Time\n   *   3    Current\n   *   4    Temperature\n   *   5    Luminous intensity\n   *   6    Amount of substance\n   *   7    Angle\n   *   8    Bit (digital)\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n   *\n   */\n\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n\n  for (var key in BASE_UNITS) {\n    if (hasOwnProperty(BASE_UNITS, key)) {\n      BASE_UNITS[key].key = key;\n    }\n  }\n\n  var BASE_UNIT_NONE = {};\n  var UNIT_NONE = {\n    name: '',\n    base: BASE_UNIT_NONE,\n    value: 1,\n    offset: 0,\n    dimensions: BASE_DIMENSIONS.map(x => 0)\n  };\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.0292,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    in: {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    },\n    // 1/1000 inch\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    },\n    // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    },\n    // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    },\n    // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    },\n    // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    },\n    // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    },\n    // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    },\n    // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    },\n    // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    },\n    // 10000 m2\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    },\n    // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    },\n    // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    },\n    // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    },\n    // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    },\n    // 15 mL\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00000006161152,\n      offset: 0\n    },\n    // 0.06161152 mL\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    },\n    // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.2384810,\n      offset: 0\n    },\n    // 238.4810 L\n    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\n    fldr: {\n      name: 'fldr',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    floz: {\n      name: 'floz',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gi: {\n      name: 'gi',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cp: {\n      name: 'cp',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pt: {\n      name: 'pt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    qt: {\n      name: 'qt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gal: {\n      name: 'gal',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    bbl: {\n      name: 'bbl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    obl: {\n      name: 'obl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    t: {\n      name: 't',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 1000,\n      offset: 0\n    },\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7 * 86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800,\n      // 1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600,\n      // Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'decade',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000,\n      // Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000,\n      // Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000,\n      // Julian millennium\n      offset: 0\n    },\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    radian: {\n      name: 'radian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    degree: {\n      name: 'degree',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    gradian: {\n      name: 'gradian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) / 1.8\n    // K(R) = °R / 1.8\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n    kilogramforce: {\n      name: 'kilogramforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.NONE,\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'watt',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORTLONG,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n\n    /*\n     * Unicode breaks in browsers if charset is not specified\n    Ω: {\n      name: 'Ω',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  }; // aliases (formerly plurals)\n\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fluiddrams: 'fluiddram',\n    fluidounces: 'fluidounce',\n    gills: 'gill',\n    cups: 'cup',\n    pints: 'pint',\n    quarts: 'quart',\n    gallons: 'gallon',\n    beerbarrels: 'beerbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n    kips: 'kip',\n    kgf: 'kilogramforce',\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n    decades: 'decade',\n    centuries: 'century',\n    millennia: 'millennium',\n    hertz: 'hertz',\n    radians: 'radian',\n    degrees: 'degree',\n    gradians: 'gradian',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n    amperes: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole',\n    bit: 'bits',\n    byte: 'bytes'\n  };\n  /**\n   * Calculate the values for the angle units.\n   * Value is calculated as number or BigNumber depending on the configuration\n   * @param {{number: 'number' | 'BigNumber'}} config\n   */\n\n  function calculateAngleValues(config) {\n    if (config.number === 'BigNumber') {\n      var pi = createPi(_BigNumber);\n      UNITS.rad.value = new _BigNumber(1);\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\n\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\n\n      UNITS.cycle.value = pi.times(2); // 2 * pi\n\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\n    } else {\n      // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\n\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\n\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\n\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\n    } // copy to the full names of the angles\n\n\n    UNITS.radian.value = UNITS.rad.value;\n    UNITS.degree.value = UNITS.deg.value;\n    UNITS.gradian.value = UNITS.grad.value;\n  } // apply the angle values now\n\n\n  calculateAngleValues(config);\n\n  if (on) {\n    // recalculate the values on change of configuration\n    on('config', function (curr, prev) {\n      if (curr.number !== prev.number) {\n        calculateAngleValues(curr);\n      }\n    });\n  }\n  /**\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n   */\n\n\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE: {\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE['']\n      },\n      LENGTH: {\n        unit: UNITS.m,\n        prefix: PREFIXES.SHORT['']\n      },\n      MASS: {\n        unit: UNITS.g,\n        prefix: PREFIXES.SHORT.k\n      },\n      TIME: {\n        unit: UNITS.s,\n        prefix: PREFIXES.SHORT['']\n      },\n      CURRENT: {\n        unit: UNITS.A,\n        prefix: PREFIXES.SHORT['']\n      },\n      TEMPERATURE: {\n        unit: UNITS.K,\n        prefix: PREFIXES.SHORT['']\n      },\n      LUMINOUS_INTENSITY: {\n        unit: UNITS.cd,\n        prefix: PREFIXES.SHORT['']\n      },\n      AMOUNT_OF_SUBSTANCE: {\n        unit: UNITS.mol,\n        prefix: PREFIXES.SHORT['']\n      },\n      ANGLE: {\n        unit: UNITS.rad,\n        prefix: PREFIXES.SHORT['']\n      },\n      BIT: {\n        unit: UNITS.bits,\n        prefix: PREFIXES.SHORT['']\n      },\n      // Derived units\n      FORCE: {\n        unit: UNITS.N,\n        prefix: PREFIXES.SHORT['']\n      },\n      ENERGY: {\n        unit: UNITS.J,\n        prefix: PREFIXES.SHORT['']\n      },\n      POWER: {\n        unit: UNITS.W,\n        prefix: PREFIXES.SHORT['']\n      },\n      PRESSURE: {\n        unit: UNITS.Pa,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CHARGE: {\n        unit: UNITS.C,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CAPACITANCE: {\n        unit: UNITS.F,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_POTENTIAL: {\n        unit: UNITS.V,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_RESISTANCE: {\n        unit: UNITS.ohm,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_INDUCTANCE: {\n        unit: UNITS.H,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CONDUCTANCE: {\n        unit: UNITS.S,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX: {\n        unit: UNITS.Wb,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX_DENSITY: {\n        unit: UNITS.T,\n        prefix: PREFIXES.SHORT['']\n      },\n      FREQUENCY: {\n        unit: UNITS.Hz,\n        prefix: PREFIXES.SHORT['']\n      }\n    }\n  }; // Clone to create the other unit systems\n\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {\n    unit: UNITS.m,\n    prefix: PREFIXES.SHORT.c\n  };\n  UNIT_SYSTEMS.cgs.MASS = {\n    unit: UNITS.g,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.FORCE = {\n    unit: UNITS.dyn,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.ENERGY = {\n    unit: UNITS.erg,\n    prefix: PREFIXES.NONE['']\n  }; // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH = {\n    unit: UNITS.ft,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.MASS = {\n    unit: UNITS.lbm,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.TEMPERATURE = {\n    unit: UNITS.degF,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.FORCE = {\n    unit: UNITS.lbf,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.ENERGY = {\n    unit: UNITS.BTU,\n    prefix: PREFIXES.BTU['']\n  };\n  UNIT_SYSTEMS.us.POWER = {\n    unit: UNITS.hp,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.PRESSURE = {\n    unit: UNITS.psi,\n    prefix: PREFIXES.NONE['']\n  }; // Add additional unit systems here.\n  // Choose a unit system to seed the auto unit system.\n\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system\n\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n  /**\n   * Set a unit system for formatting derived units.\n   * @param {string} [name] The name of the unit system.\n   */\n\n  Unit.setUnitSystem = function (name) {\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    } else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n  /**\n   * Return the current unit system.\n   * @return {string} The current unit system.\n   */\n\n\n  Unit.getUnitSystem = function () {\n    for (var _key in UNIT_SYSTEMS) {\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\n          return _key;\n        }\n      }\n    }\n  };\n  /**\n   * Converters to convert from number to an other numeric type like BigNumber\n   * or Fraction\n   */\n\n\n  Unit.typeConverters = {\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x);\n    },\n    Complex: function Complex(x) {\n      return x;\n    },\n    number: function number(x) {\n      return x;\n    }\n  };\n  /**\n   * Retrieve the right convertor function corresponding with the type\n   * of provided exampleValue.\n   *\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n   *                        In case of an unknown type,\n   * @return {Function}\n   */\n\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n\n    return Unit.typeConverters[type];\n  }; // Add dimensions to each built-in unit\n\n\n  for (var _key2 in UNITS) {\n    if (hasOwnProperty(UNITS, _key2)) {\n      var unit = UNITS[_key2];\n      unit.dimensions = unit.base.dimensions;\n    }\n  } // Create aliases\n\n\n  for (var _name2 in ALIASES) {\n    if (hasOwnProperty(ALIASES, _name2)) {\n      var _unit2 = UNITS[ALIASES[_name2]];\n      var alias = {};\n\n      for (var _key3 in _unit2) {\n        if (hasOwnProperty(_unit2, _key3)) {\n          alias[_key3] = _unit2[_key3];\n        }\n      }\n\n      alias.name = _name2;\n      UNITS[_name2] = alias;\n    }\n  }\n  /**\n   * Checks if a character is a valid latin letter (upper or lower case).\n   * Note that this function can be overridden, for example to allow support of other alphabets.\n   * @param {string} c Tested character\n   */\n\n\n  Unit.isValidAlpha = function isValidAlpha(c) {\n    return /^[a-zA-Z]$/.test(c);\n  };\n\n  function assertUnitNameIsValid(name) {\n    for (var i = 0; i < name.length; i++) {\n      c = name.charAt(i);\n\n      if (i === 0 && !Unit.isValidAlpha(c)) {\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n      }\n\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n      }\n    }\n  }\n  /**\n   * Wrapper around createUnitSingle.\n   * Example:\n   *  createUnit({\n   *    foo: { },\n   *    bar: {\n   *      definition: 'kg/foo',\n   *      aliases: ['ba', 'barr', 'bars'],\n   *      offset: 200\n   *    },\n   *    baz: '4 bar'\n   *  },\n   *  {\n   *    override: true\n   *  })\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\n   * @param {object} options\n   */\n\n\n  Unit.createUnit = function (obj, options) {\n    if (typeof obj !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    } // Remove all units and aliases we are overriding\n\n\n    if (options && options.override) {\n      for (var _key4 in obj) {\n        if (hasOwnProperty(obj, _key4)) {\n          Unit.deleteUnit(_key4);\n        }\n\n        if (obj[_key4].aliases) {\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\n            Unit.deleteUnit(obj[_key4].aliases[i]);\n          }\n        }\n      }\n    } // TODO: traverse multiple times until all units have been added\n\n\n    var lastUnit;\n\n    for (var _key5 in obj) {\n      if (hasOwnProperty(obj, _key5)) {\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\n      }\n    }\n\n    return lastUnit;\n  };\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   * Example:\n   *  createUnitSingle('knot', '0.514444444 m/s')\n   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit, Object} definition      Definition of the unit in terms\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\n   * or an Object. If an Object, may have the following properties:\n   *   - definition {string|Unit} The definition of this unit.\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\n   *     The default is \"none\".\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\n   *     is 459.67. Default is 0.\n   *   - baseName {string} If the unit's dimension does not match that of any other\n   *     base unit, the name of the newly create base unit. Otherwise, this property\n   *     has no effect.\n   *\n   * @param {Object} options   (optional) An object containing any of the following\n   * properties:\n   *   - override {boolean} Whether this unit should be allowed to override existing\n   *     units.\n   *\n   * @return {Unit}\n   */\n\n\n  Unit.createUnitSingle = function (name, obj, options) {\n    if (typeof obj === 'undefined' || obj === null) {\n      obj = {};\n    }\n\n    if (typeof name !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    } // Check collisions with existing units\n\n\n    if (hasOwnProperty(UNITS, name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n\n    assertUnitNameIsValid(name);\n    var defUnit = null; // The Unit from which the new unit will be created.\n\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    var baseName;\n\n    if (obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    } else if (typeof obj === 'string') {\n      if (obj !== '') {\n        definition = obj;\n      }\n    } else if (typeof obj === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes;\n      offset = obj.offset;\n      baseName = obj.baseName;\n\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    } else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        if (hasOwnProperty(UNITS, aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n\n    if (definition && typeof definition === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {\n          allowNoUnits: true\n        });\n      } catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw ex;\n      }\n    } else if (definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n\n    aliases = aliases || [];\n    offset = offset || 0;\n\n    if (prefixes && prefixes.toUpperCase) {\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    } else {\n      prefixes = PREFIXES.NONE;\n    } // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n\n\n    var newUnit = {};\n\n    if (!defUnit) {\n      // Add a new base dimension\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n\n      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units\n\n      for (var b in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\n        }\n      } // Add the new base unit\n\n\n      var newBaseUnit = {\n        dimensions: []\n      };\n\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\n        newBaseUnit.dimensions[_i6] = 0;\n      }\n\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n      newUnit = {\n        name: name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset,\n        base: BASE_UNITS[baseName]\n      };\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n    } else {\n      newUnit = {\n        name: name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset\n      }; // Create a new base if no matching base exists\n\n      var anyMatch = false;\n\n      for (var _i7 in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\n          var match = true;\n\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n\n          if (match) {\n            anyMatch = true;\n            newUnit.base = BASE_UNITS[_i7];\n            break;\n          }\n        }\n      }\n\n      if (!anyMatch) {\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n\n        var _newBaseUnit = {\n          dimensions: defUnit.dimensions.slice(0)\n        };\n        _newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = _newBaseUnit;\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n        newUnit.base = BASE_UNITS[baseName];\n      }\n    }\n\n    Unit.UNITS[name] = newUnit;\n\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\n      var aliasName = aliases[_i8];\n      var _alias = {};\n\n      for (var _key6 in newUnit) {\n        if (hasOwnProperty(newUnit, _key6)) {\n          _alias[_key6] = newUnit[_key6];\n        }\n      }\n\n      _alias.name = aliasName;\n      Unit.UNITS[aliasName] = _alias;\n    } // delete the memoization cache, since adding a new unit to the array\n    // invalidates all old results\n\n\n    delete _findUnit.cache;\n    return new Unit(null, name);\n  };\n\n  Unit.deleteUnit = function (name) {\n    delete Unit.UNITS[name];\n  }; // expose arrays with prefixes, dimensions, units, systems\n\n\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n  return Unit;\n}, {\n  isClass: true\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}