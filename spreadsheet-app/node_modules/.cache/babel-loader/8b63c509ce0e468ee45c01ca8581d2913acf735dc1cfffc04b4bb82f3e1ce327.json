{"ast":null,"code":"import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'floor';\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar'];\nexport var createFloor = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar\n  } = _ref;\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Round a value towards minus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.floor(x)\n   *    math.floor(x, n)\n   *\n   * Examples:\n   *\n   *    math.floor(3.2)              // returns number 3\n   *    math.floor(3.8)              // returns number 3\n   *    math.floor(-4.2)             // returns number -5\n   *    math.floor(-4.7)             // returns number -5\n   *\n   *    math.floor(3.212, 2)          // returns number 3.21\n   *    math.floor(3.288, 2)          // returns number 3.28\n   *    math.floor(-4.212, 2)         // returns number -4.22\n   *    math.floor(-4.782, 2)         // returns number -4.79\n   *\n   *    const c = math.complex(3.24, -2.71)\n   *    math.floor(c)                 // returns Complex 3 - 3i\n   *    math.floor(c, 1)              // returns Complex 3.2 - 2.8i\n   *\n   *    math.floor([3.2, 3.8, -4.7])       // returns Array [3, 3, -5]\n   *    math.floor([3.21, 3.82, -4.71], 1)  // returns Array [3.2, 3.8, -4.8]\n   *\n   * See also:\n   *\n   *    ceil, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  return typed('floor', {\n    number: function number(x) {\n      if (nearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return Math.floor(x);\n      }\n    },\n    'number, number': function numberNumber(x, n) {\n      if (nearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        var [number, exponent] = \"\".concat(x, \"e\").split('e');\n        var result = Math.floor(Number(\"\".concat(number, \"e\").concat(Number(exponent) + n)));\n        [number, exponent] = \"\".concat(result, \"e\").split('e');\n        return Number(\"\".concat(number, \"e\").concat(Number(exponent) - n));\n      }\n    },\n    Complex: function Complex(x) {\n      return x.floor();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      return x.floor(n);\n    },\n    BigNumber: function BigNumber(x) {\n      if (bigNearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return x.floor();\n      }\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (bigNearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        return x.toDecimalPlaces(n.toNumber(), Decimal.ROUND_FLOOR);\n      }\n    },\n    Fraction: function Fraction(x) {\n      return x.floor();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      return x.floor(n);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since floor(0) = 0\n      return deepMap(x, this, true);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(x, n) {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, i => this(i, n), true);\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});","map":{"version":3,"names":["Decimal","factory","deepMap","nearlyEqual","bigNearlyEqual","createAlgorithm11","createAlgorithm14","name","dependencies","createFloor","_ref","typed","config","round","matrix","equalScalar","algorithm11","algorithm14","number","x","epsilon","Math","floor","numberNumber","n","exponent","concat","split","result","Number","Complex","ComplexNumber","BigNumber","BigNumberBigNumber","toDecimalPlaces","toNumber","ROUND_FLOOR","Fraction","FractionNumber","ArrayMatrix","ArrayMatrixNumber","i","SparseMatrixNumberBigNumber","y","DenseMatrixNumberBigNumber","numberComplexBigNumberArray","valueOf"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/function/arithmetic/floor.js"],"sourcesContent":["import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'floor';\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar'];\nexport var createFloor = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar\n  } = _ref;\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Round a value towards minus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.floor(x)\n   *    math.floor(x, n)\n   *\n   * Examples:\n   *\n   *    math.floor(3.2)              // returns number 3\n   *    math.floor(3.8)              // returns number 3\n   *    math.floor(-4.2)             // returns number -5\n   *    math.floor(-4.7)             // returns number -5\n   *\n   *    math.floor(3.212, 2)          // returns number 3.21\n   *    math.floor(3.288, 2)          // returns number 3.28\n   *    math.floor(-4.212, 2)         // returns number -4.22\n   *    math.floor(-4.782, 2)         // returns number -4.79\n   *\n   *    const c = math.complex(3.24, -2.71)\n   *    math.floor(c)                 // returns Complex 3 - 3i\n   *    math.floor(c, 1)              // returns Complex 3.2 - 2.8i\n   *\n   *    math.floor([3.2, 3.8, -4.7])       // returns Array [3, 3, -5]\n   *    math.floor([3.21, 3.82, -4.71], 1)  // returns Array [3.2, 3.8, -4.8]\n   *\n   * See also:\n   *\n   *    ceil, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  return typed('floor', {\n    number: function number(x) {\n      if (nearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return Math.floor(x);\n      }\n    },\n    'number, number': function numberNumber(x, n) {\n      if (nearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        var [number, exponent] = \"\".concat(x, \"e\").split('e');\n        var result = Math.floor(Number(\"\".concat(number, \"e\").concat(Number(exponent) + n)));\n        [number, exponent] = \"\".concat(result, \"e\").split('e');\n        return Number(\"\".concat(number, \"e\").concat(Number(exponent) - n));\n      }\n    },\n    Complex: function Complex(x) {\n      return x.floor();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      return x.floor(n);\n    },\n    BigNumber: function BigNumber(x) {\n      if (bigNearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return x.floor();\n      }\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (bigNearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        return x.toDecimalPlaces(n.toNumber(), Decimal.ROUND_FLOOR);\n      }\n    },\n    Fraction: function Fraction(x) {\n      return x.floor();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      return x.floor(n);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since floor(0) = 0\n      return deepMap(x, this, true);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(x, n) {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, i => this(i, n), true);\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}