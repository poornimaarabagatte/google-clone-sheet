{"ast":null,"code":"import { isBigNumber, isString, typeOf } from './is.js';\nimport { format as formatNumber } from './number.js';\nimport { format as formatBigNumber } from './bignumber/formatter.js';\n/**\n * Check if a text ends with a certain string.\n * @param {string} text\n * @param {string} search\n */\n\nexport function endsWith(text, search) {\n  var start = text.length - search.length;\n  var end = text.length;\n  return text.substring(start, end) === search;\n}\n/**\n * Format a value of any type into a string.\n *\n * Usage:\n *     math.format(value)\n *     math.format(value, precision)\n *\n * When value is a function:\n *\n * - When the function has a property `syntax`, it returns this\n *   syntax description.\n * - In other cases, a string `'function'` is returned.\n *\n * When `value` is an Object:\n *\n * - When the object contains a property `format` being a function, this\n *   function is invoked as `value.format(options)` and the result is returned.\n * - When the object has its own `toString` method, this method is invoked\n *   and the result is returned.\n * - In other cases the function will loop over all object properties and\n *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n *\n * Example usage:\n *     math.format(2/7)                // '0.2857142857142857'\n *     math.format(math.pi, 3)         // '3.14'\n *     math.format(new Complex(2, 3))  // '2 + 3i'\n *     math.format('hello')            // '\"hello\"'\n *\n * @param {*} value             Value to be stringified\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @return {string} str\n */\n\nexport function format(value, options) {\n  if (typeof value === 'number') {\n    return formatNumber(value, options);\n  }\n  if (isBigNumber(value)) {\n    return formatBigNumber(value, options);\n  } // note: we use unsafe duck-typing here to check for Fractions, this is\n  // ok here since we're only invoking toString or concatenating its values\n\n  if (looksLikeFraction(value)) {\n    if (!options || options.fraction !== 'decimal') {\n      // output as ratio, like '1/3'\n      return value.s * value.n + '/' + value.d;\n    } else {\n      // output as decimal, like '0.(3)'\n      return value.toString();\n    }\n  }\n  if (Array.isArray(value)) {\n    return formatArray(value, options);\n  }\n  if (isString(value)) {\n    return '\"' + value + '\"';\n  }\n  if (typeof value === 'function') {\n    return value.syntax ? String(value.syntax) : 'function';\n  }\n  if (value && typeof value === 'object') {\n    if (typeof value.format === 'function') {\n      return value.format(options);\n    } else if (value && value.toString(options) !== {}.toString()) {\n      // this object has a non-native toString method, use that one\n      return value.toString(options);\n    } else {\n      var entries = Object.keys(value).map(key => {\n        return '\"' + key + '\": ' + format(value[key], options);\n      });\n      return '{' + entries.join(', ') + '}';\n    }\n  }\n  return String(value);\n}\n/**\n * Stringify a value into a string enclosed in double quotes.\n * Unescaped double quotes and backslashes inside the value are escaped.\n * @param {*} value\n * @return {string}\n */\n\nexport function stringify(value) {\n  var text = String(value);\n  var escaped = '';\n  var i = 0;\n  while (i < text.length) {\n    var c = text.charAt(i);\n    if (c === '\\\\') {\n      escaped += c;\n      i++;\n      c = text.charAt(i);\n      if (c === '' || '\"\\\\/bfnrtu'.indexOf(c) === -1) {\n        escaped += '\\\\'; // no valid escape character -> escape it\n      }\n      escaped += c;\n    } else if (c === '\"') {\n      escaped += '\\\\\"';\n    } else {\n      escaped += c;\n    }\n    i++;\n  }\n  return '\"' + escaped + '\"';\n}\n/**\n * Escape special HTML characters\n * @param {*} value\n * @return {string}\n */\n\nexport function escape(value) {\n  var text = String(value);\n  text = text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return text;\n}\n/**\n * Recursively format an n-dimensional matrix\n * Example output: \"[[1, 2], [3, 4]]\"\n * @param {Array} array\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @returns {string} str\n */\n\nfunction formatArray(array, options) {\n  if (Array.isArray(array)) {\n    var str = '[';\n    var len = array.length;\n    for (var i = 0; i < len; i++) {\n      if (i !== 0) {\n        str += ', ';\n      }\n      str += formatArray(array[i], options);\n    }\n    str += ']';\n    return str;\n  } else {\n    return format(array, options);\n  }\n}\n/**\n * Check whether a value looks like a Fraction (unsafe duck-type check)\n * @param {*} value\n * @return {boolean}\n */\n\nfunction looksLikeFraction(value) {\n  return value && typeof value === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;\n}\n/**\n * Compare two strings\n * @param {string} x\n * @param {string} y\n * @returns {number}\n */\n\nexport function compareText(x, y) {\n  // we don't want to convert numbers to string, only accept string input\n  if (!isString(x)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(x) + ', index: 0)');\n  }\n  if (!isString(y)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(y) + ', index: 1)');\n  }\n  return x === y ? 0 : x > y ? 1 : -1;\n}","map":{"version":3,"names":["isBigNumber","isString","typeOf","format","formatNumber","formatBigNumber","endsWith","text","search","start","length","end","substring","value","options","looksLikeFraction","fraction","s","n","d","toString","Array","isArray","formatArray","syntax","String","entries","Object","keys","map","key","join","stringify","escaped","i","c","charAt","indexOf","escape","replace","array","str","len","compareText","x","y","TypeError"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/utils/string.js"],"sourcesContent":["import { isBigNumber, isString, typeOf } from './is.js';\nimport { format as formatNumber } from './number.js';\nimport { format as formatBigNumber } from './bignumber/formatter.js';\n/**\n * Check if a text ends with a certain string.\n * @param {string} text\n * @param {string} search\n */\n\nexport function endsWith(text, search) {\n  var start = text.length - search.length;\n  var end = text.length;\n  return text.substring(start, end) === search;\n}\n/**\n * Format a value of any type into a string.\n *\n * Usage:\n *     math.format(value)\n *     math.format(value, precision)\n *\n * When value is a function:\n *\n * - When the function has a property `syntax`, it returns this\n *   syntax description.\n * - In other cases, a string `'function'` is returned.\n *\n * When `value` is an Object:\n *\n * - When the object contains a property `format` being a function, this\n *   function is invoked as `value.format(options)` and the result is returned.\n * - When the object has its own `toString` method, this method is invoked\n *   and the result is returned.\n * - In other cases the function will loop over all object properties and\n *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n *\n * Example usage:\n *     math.format(2/7)                // '0.2857142857142857'\n *     math.format(math.pi, 3)         // '3.14'\n *     math.format(new Complex(2, 3))  // '2 + 3i'\n *     math.format('hello')            // '\"hello\"'\n *\n * @param {*} value             Value to be stringified\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @return {string} str\n */\n\nexport function format(value, options) {\n  if (typeof value === 'number') {\n    return formatNumber(value, options);\n  }\n\n  if (isBigNumber(value)) {\n    return formatBigNumber(value, options);\n  } // note: we use unsafe duck-typing here to check for Fractions, this is\n  // ok here since we're only invoking toString or concatenating its values\n\n\n  if (looksLikeFraction(value)) {\n    if (!options || options.fraction !== 'decimal') {\n      // output as ratio, like '1/3'\n      return value.s * value.n + '/' + value.d;\n    } else {\n      // output as decimal, like '0.(3)'\n      return value.toString();\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return formatArray(value, options);\n  }\n\n  if (isString(value)) {\n    return '\"' + value + '\"';\n  }\n\n  if (typeof value === 'function') {\n    return value.syntax ? String(value.syntax) : 'function';\n  }\n\n  if (value && typeof value === 'object') {\n    if (typeof value.format === 'function') {\n      return value.format(options);\n    } else if (value && value.toString(options) !== {}.toString()) {\n      // this object has a non-native toString method, use that one\n      return value.toString(options);\n    } else {\n      var entries = Object.keys(value).map(key => {\n        return '\"' + key + '\": ' + format(value[key], options);\n      });\n      return '{' + entries.join(', ') + '}';\n    }\n  }\n\n  return String(value);\n}\n/**\n * Stringify a value into a string enclosed in double quotes.\n * Unescaped double quotes and backslashes inside the value are escaped.\n * @param {*} value\n * @return {string}\n */\n\nexport function stringify(value) {\n  var text = String(value);\n  var escaped = '';\n  var i = 0;\n\n  while (i < text.length) {\n    var c = text.charAt(i);\n\n    if (c === '\\\\') {\n      escaped += c;\n      i++;\n      c = text.charAt(i);\n\n      if (c === '' || '\"\\\\/bfnrtu'.indexOf(c) === -1) {\n        escaped += '\\\\'; // no valid escape character -> escape it\n      }\n\n      escaped += c;\n    } else if (c === '\"') {\n      escaped += '\\\\\"';\n    } else {\n      escaped += c;\n    }\n\n    i++;\n  }\n\n  return '\"' + escaped + '\"';\n}\n/**\n * Escape special HTML characters\n * @param {*} value\n * @return {string}\n */\n\nexport function escape(value) {\n  var text = String(value);\n  text = text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return text;\n}\n/**\n * Recursively format an n-dimensional matrix\n * Example output: \"[[1, 2], [3, 4]]\"\n * @param {Array} array\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @returns {string} str\n */\n\nfunction formatArray(array, options) {\n  if (Array.isArray(array)) {\n    var str = '[';\n    var len = array.length;\n\n    for (var i = 0; i < len; i++) {\n      if (i !== 0) {\n        str += ', ';\n      }\n\n      str += formatArray(array[i], options);\n    }\n\n    str += ']';\n    return str;\n  } else {\n    return format(array, options);\n  }\n}\n/**\n * Check whether a value looks like a Fraction (unsafe duck-type check)\n * @param {*} value\n * @return {boolean}\n */\n\n\nfunction looksLikeFraction(value) {\n  return value && typeof value === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;\n}\n/**\n * Compare two strings\n * @param {string} x\n * @param {string} y\n * @returns {number}\n */\n\n\nexport function compareText(x, y) {\n  // we don't want to convert numbers to string, only accept string input\n  if (!isString(x)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(x) + ', index: 0)');\n  }\n\n  if (!isString(y)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(y) + ', index: 1)');\n  }\n\n  return x === y ? 0 : x > y ? 1 : -1;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}