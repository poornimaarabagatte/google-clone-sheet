{"ast":null,"code":"import Spreadsheet from \"./spreadSheet\";\nfunction trimCellValue(value) {\n  return value.trim();\n}\nfunction upperCaseCellValue(value) {\n  return value.toUpperCase();\n}\nfunction lowerCaseCellValue(value) {\n  return value.toLowerCase();\n}\nfunction removeDuplicates(sheetData) {\n  const uniqueRows = [];\n  const seen = new Set();\n  sheetData.forEach(row => {\n    const rowString = JSON.stringify(row);\n    if (!seen.has(rowString)) {\n      seen.add(rowString);\n      uniqueRows.push(row);\n    }\n  });\n  return uniqueRows;\n}\nfunction findAndReplace(sheetData, findText, replaceText) {\n  return sheetData.map(row => row.map(cell => cell === findText ? replaceText : cell));\n}\nexport { trimCellValue, upperCaseCellValue, lowerCaseCellValue, removeDuplicates, findAndReplace };","map":{"version":3,"names":["Spreadsheet","trimCellValue","value","trim","upperCaseCellValue","toUpperCase","lowerCaseCellValue","toLowerCase","removeDuplicates","sheetData","uniqueRows","seen","Set","forEach","row","rowString","JSON","stringify","has","add","push","findAndReplace","findText","replaceText","map","cell"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/src/components/dataQualityFunction.js"],"sourcesContent":["import Spreadsheet from \"./spreadSheet\";\n\nfunction trimCellValue(value) {\n    return value.trim();\n  }\n  \n  function upperCaseCellValue(value) {\n    return value.toUpperCase();\n  }\n  \n  function lowerCaseCellValue(value) {\n    return value.toLowerCase();\n  }\n  \n  function removeDuplicates(sheetData) {\n    const uniqueRows = [];\n    const seen = new Set();\n    \n    sheetData.forEach((row) => {\n      const rowString = JSON.stringify(row);\n      if (!seen.has(rowString)) {\n        seen.add(rowString);\n        uniqueRows.push(row);\n      }\n    });\n    \n    return uniqueRows;\n  }\n  \n  function findAndReplace(sheetData, findText, replaceText) {\n    return sheetData.map(row =>\n      row.map(cell => (cell === findText ? replaceText : cell))\n    );\n  }\n  \n  export { trimCellValue, upperCaseCellValue, lowerCaseCellValue, removeDuplicates, findAndReplace };\n  "],"mappings":"AAAA,OAAOA,WAAW,MAAM,eAAe;AAEvC,SAASC,aAAaA,CAACC,KAAK,EAAE;EAC1B,OAAOA,KAAK,CAACC,IAAI,CAAC,CAAC;AACrB;AAEA,SAASC,kBAAkBA,CAACF,KAAK,EAAE;EACjC,OAAOA,KAAK,CAACG,WAAW,CAAC,CAAC;AAC5B;AAEA,SAASC,kBAAkBA,CAACJ,KAAK,EAAE;EACjC,OAAOA,KAAK,CAACK,WAAW,CAAC,CAAC;AAC5B;AAEA,SAASC,gBAAgBA,CAACC,SAAS,EAAE;EACnC,MAAMC,UAAU,GAAG,EAAE;EACrB,MAAMC,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;EAEtBH,SAAS,CAACI,OAAO,CAAEC,GAAG,IAAK;IACzB,MAAMC,SAAS,GAAGC,IAAI,CAACC,SAAS,CAACH,GAAG,CAAC;IACrC,IAAI,CAACH,IAAI,CAACO,GAAG,CAACH,SAAS,CAAC,EAAE;MACxBJ,IAAI,CAACQ,GAAG,CAACJ,SAAS,CAAC;MACnBL,UAAU,CAACU,IAAI,CAACN,GAAG,CAAC;IACtB;EACF,CAAC,CAAC;EAEF,OAAOJ,UAAU;AACnB;AAEA,SAASW,cAAcA,CAACZ,SAAS,EAAEa,QAAQ,EAAEC,WAAW,EAAE;EACxD,OAAOd,SAAS,CAACe,GAAG,CAACV,GAAG,IACtBA,GAAG,CAACU,GAAG,CAACC,IAAI,IAAKA,IAAI,KAAKH,QAAQ,GAAGC,WAAW,GAAGE,IAAK,CAC1D,CAAC;AACH;AAEA,SAASxB,aAAa,EAAEG,kBAAkB,EAAEE,kBAAkB,EAAEE,gBAAgB,EAAEa,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}