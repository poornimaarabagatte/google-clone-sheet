{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01.js';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02.js';\nimport { createAlgorithm06 } from '../../type/matrix/utils/algorithm06.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { nthRootNumber } from '../../plain/number/index.js';\nvar name = 'nthRoot';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber'];\nexport var createNthRoot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber: _BigNumber\n  } = _ref;\n  var algorithm01 = createAlgorithm01({\n    typed\n  });\n  var algorithm02 = createAlgorithm02({\n    typed,\n    equalScalar\n  });\n  var algorithm06 = createAlgorithm06({\n    typed,\n    equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2)    // returns 3, as 3^2 == 9\n   *     math.sqrt(9)          // returns 3, as 3^2 == 9\n   *     math.nthRoot(64, 3)   // returns 4, as 4^3 == 64\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n\n  var complexErr = '' + 'Complex number not supported in function nthRoot. ' + 'Use nthRoots instead.';\n  return typed(name, {\n    number: function number(x) {\n      return nthRootNumber(x, 2);\n    },\n    'number, number': nthRootNumber,\n    BigNumber: function BigNumber(x) {\n      return _bigNthRoot(x, new _BigNumber(2));\n    },\n    Complex: function Complex(x) {\n      throw new Error(complexErr);\n    },\n    'Complex, number': function ComplexNumber(x, y) {\n      throw new Error(complexErr);\n    },\n    'BigNumber, BigNumber': _bigNthRoot,\n    'Array | Matrix': function ArrayMatrix(x) {\n      return this(x, 2);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse + sparse\n        return algorithm06(x, y, this);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // dense + sparse\n        return algorithm01(x, y, this, false);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse - scalar\n        return algorithm11(y, x, this, true);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y)).valueOf();\n    }\n  });\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * https://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n\n  function _bigNthRoot(a, root) {\n    var precision = _BigNumber.precision;\n    var Big = _BigNumber.clone({\n      precision: precision + 2\n    });\n    var zero = new _BigNumber(0);\n    var one = new Big(1);\n    var inv = root.isNegative();\n    if (inv) {\n      root = root.neg();\n    }\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    } // edge cases zero and infinity\n\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n    var x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n\n    x = a.isNeg() ? x.neg() : x;\n    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n});\nexport var createNthRootNumber = /* #__PURE__ */factory(name, ['typed'], _ref2 => {\n  var {\n    typed\n  } = _ref2;\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber\n  });\n});","map":{"version":3,"names":["factory","createAlgorithm01","createAlgorithm02","createAlgorithm06","createAlgorithm11","createAlgorithm13","createAlgorithm14","nthRootNumber","name","dependencies","createNthRoot","_ref","typed","matrix","equalScalar","BigNumber","_BigNumber","algorithm01","algorithm02","algorithm06","algorithm11","algorithm13","algorithm14","complexErr","number","x","_bigNthRoot","Complex","Error","ComplexNumber","y","ArrayMatrix","SparseMatrixSparseMatrix","density","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","MatrixArray","SparseMatrixNumberBigNumber","DenseMatrixNumberBigNumber","numberBigNumberSparseMatrix","numberBigNumberDenseMatrix","ArrayNumberBigNumber","numberBigNumberArray","a","root","precision","Big","clone","zero","one","inv","isNegative","neg","isZero","abs","mod","equals","Infinity","isFinite","pow","div","isNeg","toPrecision","createNthRootNumber","_ref2"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/function/arithmetic/nthRoot.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01.js';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02.js';\nimport { createAlgorithm06 } from '../../type/matrix/utils/algorithm06.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { nthRootNumber } from '../../plain/number/index.js';\nvar name = 'nthRoot';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber'];\nexport var createNthRoot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber: _BigNumber\n  } = _ref;\n  var algorithm01 = createAlgorithm01({\n    typed\n  });\n  var algorithm02 = createAlgorithm02({\n    typed,\n    equalScalar\n  });\n  var algorithm06 = createAlgorithm06({\n    typed,\n    equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2)    // returns 3, as 3^2 == 9\n   *     math.sqrt(9)          // returns 3, as 3^2 == 9\n   *     math.nthRoot(64, 3)   // returns 4, as 4^3 == 64\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n\n  var complexErr = '' + 'Complex number not supported in function nthRoot. ' + 'Use nthRoots instead.';\n  return typed(name, {\n    number: function number(x) {\n      return nthRootNumber(x, 2);\n    },\n    'number, number': nthRootNumber,\n    BigNumber: function BigNumber(x) {\n      return _bigNthRoot(x, new _BigNumber(2));\n    },\n    Complex: function Complex(x) {\n      throw new Error(complexErr);\n    },\n    'Complex, number': function ComplexNumber(x, y) {\n      throw new Error(complexErr);\n    },\n    'BigNumber, BigNumber': _bigNthRoot,\n    'Array | Matrix': function ArrayMatrix(x) {\n      return this(x, 2);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse + sparse\n        return algorithm06(x, y, this);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // dense + sparse\n        return algorithm01(x, y, this, false);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse - scalar\n        return algorithm11(y, x, this, true);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y)).valueOf();\n    }\n  });\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * https://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n\n  function _bigNthRoot(a, root) {\n    var precision = _BigNumber.precision;\n\n    var Big = _BigNumber.clone({\n      precision: precision + 2\n    });\n\n    var zero = new _BigNumber(0);\n    var one = new Big(1);\n    var inv = root.isNegative();\n\n    if (inv) {\n      root = root.neg();\n    }\n\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    } // edge cases zero and infinity\n\n\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n\n    var x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n\n    x = a.isNeg() ? x.neg() : x;\n    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n});\nexport var createNthRootNumber = /* #__PURE__ */factory(name, ['typed'], _ref2 => {\n  var {\n    typed\n  } = _ref2;\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber\n  });\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}