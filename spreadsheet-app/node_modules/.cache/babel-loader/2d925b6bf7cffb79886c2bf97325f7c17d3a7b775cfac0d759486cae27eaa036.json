{"ast":null,"code":"import { isNode } from '../../utils/is.js';\nimport { forEach, map } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'BlockNode';\nvar dependencies = ['ResultSet', 'Node'];\nexport var createBlockNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    ResultSet,\n    Node\n  } = _ref;\n\n  /**\n   * @constructor BlockNode\n   * @extends {Node}\n   * Holds a set with blocks\n   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n   *            An array with blocks, where a block is constructed as an Object\n   *            with properties block, which is a Node, and visible, which is\n   *            a boolean. The property visible is optional and is true by default\n   */\n  function BlockNode(blocks) {\n    if (!(this instanceof BlockNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input, copy blocks\n\n    if (!Array.isArray(blocks)) throw new Error('Array expected');\n    this.blocks = blocks.map(function (block) {\n      var node = block && block.node;\n      var visible = block && block.visible !== undefined ? block.visible : true;\n      if (!isNode(node)) throw new TypeError('Property \"node\" must be a Node');\n      if (typeof visible !== 'boolean') throw new TypeError('Property \"visible\" must be a boolean');\n      return {\n        node: node,\n        visible: visible\n      };\n    });\n  }\n  BlockNode.prototype = new Node();\n  BlockNode.prototype.type = 'BlockNode';\n  BlockNode.prototype.isBlockNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  BlockNode.prototype._compile = function (math, argNames) {\n    var evalBlocks = map(this.blocks, function (block) {\n      return {\n        evaluate: block.node._compile(math, argNames),\n        visible: block.visible\n      };\n    });\n    return function evalBlockNodes(scope, args, context) {\n      var results = [];\n      forEach(evalBlocks, function evalBlockNode(block) {\n        var result = block.evaluate(scope, args, context);\n        if (block.visible) {\n          results.push(result);\n        }\n      });\n      return new ResultSet(results);\n    };\n  };\n  /**\n   * Execute a callback for each of the child blocks of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n  BlockNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.blocks.length; i++) {\n      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);\n    }\n  };\n  /**\n   * Create a new BlockNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {BlockNode} Returns a transformed copy of the node\n   */\n\n  BlockNode.prototype.map = function (callback) {\n    var blocks = [];\n    for (var i = 0; i < this.blocks.length; i++) {\n      var block = this.blocks[i];\n      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));\n      blocks[i] = {\n        node: node,\n        visible: block.visible\n      };\n    }\n    return new BlockNode(blocks);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {BlockNode}\n   */\n\n  BlockNode.prototype.clone = function () {\n    var blocks = this.blocks.map(function (block) {\n      return {\n        node: block.node,\n        visible: block.visible\n      };\n    });\n    return new BlockNode(blocks);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n  BlockNode.prototype._toString = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toString(options) + (param.visible ? '' : ';');\n    }).join('\\n');\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n  BlockNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'BlockNode',\n      blocks: this.blocks\n    };\n  };\n  /**\n   * Instantiate an BlockNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"BlockNode\", blocks: [{node: ..., visible: false}, ...]}`,\n   *                       where mathjs is optional\n   * @returns {BlockNode}\n   */\n\n  BlockNode.fromJSON = function (json) {\n    return new BlockNode(json.blocks);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n  BlockNode.prototype.toHTML = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toHTML(options) + (param.visible ? '' : '<span class=\"math-separator\">;</span>');\n    }).join('<span class=\"math-separator\"><br /></span>');\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  BlockNode.prototype._toTex = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toTex(options) + (param.visible ? '' : ';');\n    }).join('\\\\;\\\\;\\n');\n  };\n  return BlockNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["isNode","forEach","map","factory","name","dependencies","createBlockNode","_ref","ResultSet","Node","BlockNode","blocks","SyntaxError","Array","isArray","Error","block","node","visible","undefined","TypeError","prototype","type","isBlockNode","_compile","math","argNames","evalBlocks","evaluate","evalBlockNodes","scope","args","context","results","evalBlockNode","result","push","callback","i","length","_ifNode","clone","_toString","options","param","toString","join","toJSON","mathjs","fromJSON","json","toHTML","_toTex","toTex","isClass"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/expression/node/BlockNode.js"],"sourcesContent":["import { isNode } from '../../utils/is.js';\nimport { forEach, map } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'BlockNode';\nvar dependencies = ['ResultSet', 'Node'];\nexport var createBlockNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    ResultSet,\n    Node\n  } = _ref;\n\n  /**\n   * @constructor BlockNode\n   * @extends {Node}\n   * Holds a set with blocks\n   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n   *            An array with blocks, where a block is constructed as an Object\n   *            with properties block, which is a Node, and visible, which is\n   *            a boolean. The property visible is optional and is true by default\n   */\n  function BlockNode(blocks) {\n    if (!(this instanceof BlockNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input, copy blocks\n\n\n    if (!Array.isArray(blocks)) throw new Error('Array expected');\n    this.blocks = blocks.map(function (block) {\n      var node = block && block.node;\n      var visible = block && block.visible !== undefined ? block.visible : true;\n      if (!isNode(node)) throw new TypeError('Property \"node\" must be a Node');\n      if (typeof visible !== 'boolean') throw new TypeError('Property \"visible\" must be a boolean');\n      return {\n        node: node,\n        visible: visible\n      };\n    });\n  }\n\n  BlockNode.prototype = new Node();\n  BlockNode.prototype.type = 'BlockNode';\n  BlockNode.prototype.isBlockNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  BlockNode.prototype._compile = function (math, argNames) {\n    var evalBlocks = map(this.blocks, function (block) {\n      return {\n        evaluate: block.node._compile(math, argNames),\n        visible: block.visible\n      };\n    });\n    return function evalBlockNodes(scope, args, context) {\n      var results = [];\n      forEach(evalBlocks, function evalBlockNode(block) {\n        var result = block.evaluate(scope, args, context);\n\n        if (block.visible) {\n          results.push(result);\n        }\n      });\n      return new ResultSet(results);\n    };\n  };\n  /**\n   * Execute a callback for each of the child blocks of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  BlockNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.blocks.length; i++) {\n      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);\n    }\n  };\n  /**\n   * Create a new BlockNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {BlockNode} Returns a transformed copy of the node\n   */\n\n\n  BlockNode.prototype.map = function (callback) {\n    var blocks = [];\n\n    for (var i = 0; i < this.blocks.length; i++) {\n      var block = this.blocks[i];\n\n      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));\n\n      blocks[i] = {\n        node: node,\n        visible: block.visible\n      };\n    }\n\n    return new BlockNode(blocks);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {BlockNode}\n   */\n\n\n  BlockNode.prototype.clone = function () {\n    var blocks = this.blocks.map(function (block) {\n      return {\n        node: block.node,\n        visible: block.visible\n      };\n    });\n    return new BlockNode(blocks);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  BlockNode.prototype._toString = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toString(options) + (param.visible ? '' : ';');\n    }).join('\\n');\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  BlockNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'BlockNode',\n      blocks: this.blocks\n    };\n  };\n  /**\n   * Instantiate an BlockNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"BlockNode\", blocks: [{node: ..., visible: false}, ...]}`,\n   *                       where mathjs is optional\n   * @returns {BlockNode}\n   */\n\n\n  BlockNode.fromJSON = function (json) {\n    return new BlockNode(json.blocks);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  BlockNode.prototype.toHTML = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toHTML(options) + (param.visible ? '' : '<span class=\"math-separator\">;</span>');\n    }).join('<span class=\"math-separator\"><br /></span>');\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  BlockNode.prototype._toTex = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toTex(options) + (param.visible ? '' : ';');\n    }).join('\\\\;\\\\;\\n');\n  };\n\n  return BlockNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}