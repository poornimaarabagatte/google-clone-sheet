{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'fraction';\nvar dependencies = ['typed', 'Fraction'];\nexport var createFraction = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Fraction\n  } = _ref;\n\n  /**\n   * Create a fraction convert a value to a fraction.\n   *\n   * Syntax:\n   *     math.fraction(numerator, denominator)\n   *     math.fraction({n: numerator, d: denominator})\n   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\n   *                                                   into fractions\n   *\n   * Examples:\n   *\n   *     math.fraction(1, 3)\n   *     math.fraction('2/3')\n   *     math.fraction({n: 2, d: 3})\n   *     math.fraction([0.2, 0.25, 1.25])\n   *\n   * See also:\n   *\n   *    bignumber, number, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n   *            Arguments specifying the numerator and denominator of\n   *            the fraction\n   * @return {Fraction | Array | Matrix} Returns a fraction\n   */\n  return typed('fraction', {\n    number: function number(x) {\n      if (!isFinite(x) || isNaN(x)) {\n        throw new Error(x + ' cannot be represented as a fraction');\n      }\n      return new Fraction(x);\n    },\n    string: function string(x) {\n      return new Fraction(x);\n    },\n    'number, number': function numberNumber(numerator, denominator) {\n      return new Fraction(numerator, denominator);\n    },\n    null: function _null(x) {\n      return new Fraction(0);\n    },\n    BigNumber: function BigNumber(x) {\n      return new Fraction(x.toString());\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    Object: function Object(x) {\n      return new Fraction(x);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"names":["factory","deepMap","name","dependencies","createFraction","_ref","typed","Fraction","number","x","isFinite","isNaN","Error","string","numberNumber","numerator","denominator","null","_null","BigNumber","toString","Object","ArrayMatrix"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/type/fraction/function/fraction.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'fraction';\nvar dependencies = ['typed', 'Fraction'];\nexport var createFraction = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Fraction\n  } = _ref;\n\n  /**\n   * Create a fraction convert a value to a fraction.\n   *\n   * Syntax:\n   *     math.fraction(numerator, denominator)\n   *     math.fraction({n: numerator, d: denominator})\n   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\n   *                                                   into fractions\n   *\n   * Examples:\n   *\n   *     math.fraction(1, 3)\n   *     math.fraction('2/3')\n   *     math.fraction({n: 2, d: 3})\n   *     math.fraction([0.2, 0.25, 1.25])\n   *\n   * See also:\n   *\n   *    bignumber, number, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n   *            Arguments specifying the numerator and denominator of\n   *            the fraction\n   * @return {Fraction | Array | Matrix} Returns a fraction\n   */\n  return typed('fraction', {\n    number: function number(x) {\n      if (!isFinite(x) || isNaN(x)) {\n        throw new Error(x + ' cannot be represented as a fraction');\n      }\n\n      return new Fraction(x);\n    },\n    string: function string(x) {\n      return new Fraction(x);\n    },\n    'number, number': function numberNumber(numerator, denominator) {\n      return new Fraction(numerator, denominator);\n    },\n    null: function _null(x) {\n      return new Fraction(0);\n    },\n    BigNumber: function BigNumber(x) {\n      return new Fraction(x.toString());\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    Object: function Object(x) {\n      return new Fraction(x);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAASC,OAAO,QAAQ,8BAA8B;AACtD,IAAIC,IAAI,GAAG,UAAU;AACrB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC;AACxC,OAAO,IAAIC,cAAc,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC7E,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;;EAER;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAAC,UAAU,EAAE;IACvBE,MAAM,EAAE,SAASA,MAAMA,CAACC,CAAC,EAAE;MACzB,IAAI,CAACC,QAAQ,CAACD,CAAC,CAAC,IAAIE,KAAK,CAACF,CAAC,CAAC,EAAE;QAC5B,MAAM,IAAIG,KAAK,CAACH,CAAC,GAAG,sCAAsC,CAAC;MAC7D;MAEA,OAAO,IAAIF,QAAQ,CAACE,CAAC,CAAC;IACxB,CAAC;IACDI,MAAM,EAAE,SAASA,MAAMA,CAACJ,CAAC,EAAE;MACzB,OAAO,IAAIF,QAAQ,CAACE,CAAC,CAAC;IACxB,CAAC;IACD,gBAAgB,EAAE,SAASK,YAAYA,CAACC,SAAS,EAAEC,WAAW,EAAE;MAC9D,OAAO,IAAIT,QAAQ,CAACQ,SAAS,EAAEC,WAAW,CAAC;IAC7C,CAAC;IACDC,IAAI,EAAE,SAASC,KAAKA,CAACT,CAAC,EAAE;MACtB,OAAO,IAAIF,QAAQ,CAAC,CAAC,CAAC;IACxB,CAAC;IACDY,SAAS,EAAE,SAASA,SAASA,CAACV,CAAC,EAAE;MAC/B,OAAO,IAAIF,QAAQ,CAACE,CAAC,CAACW,QAAQ,CAAC,CAAC,CAAC;IACnC,CAAC;IACDb,QAAQ,EAAE,SAASA,QAAQA,CAACE,CAAC,EAAE;MAC7B,OAAOA,CAAC,CAAC,CAAC;IACZ,CAAC;IACDY,MAAM,EAAE,SAASA,MAAMA,CAACZ,CAAC,EAAE;MACzB,OAAO,IAAIF,QAAQ,CAACE,CAAC,CAAC;IACxB,CAAC;IACD,gBAAgB,EAAE,SAASa,WAAWA,CAACb,CAAC,EAAE;MACxC,OAAOR,OAAO,CAACQ,CAAC,EAAE,IAAI,CAAC;IACzB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}