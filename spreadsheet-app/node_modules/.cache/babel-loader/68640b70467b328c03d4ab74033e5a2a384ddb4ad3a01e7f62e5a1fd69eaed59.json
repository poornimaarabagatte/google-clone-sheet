{"ast":null,"code":"import { format } from '../../utils/string.js';\nimport { typeOf } from '../../utils/is.js';\nimport { escapeLatex } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ConstantNode';\nvar dependencies = ['Node'];\nexport var createConstantNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n\n  /**\n   * A ConstantNode holds a constant value like a number or string.\n   *\n   * Usage:\n   *\n   *     new ConstantNode(2.3)\n   *     new ConstantNode('hello')\n   *\n   * @param {*} value    Value can be any type (number, BigNumber, string, ...)\n   * @constructor ConstantNode\n   * @extends {Node}\n   */\n  function ConstantNode(value) {\n    if (!(this instanceof ConstantNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    this.value = value;\n  }\n  ConstantNode.prototype = new Node();\n  ConstantNode.prototype.type = 'ConstantNode';\n  ConstantNode.prototype.isConstantNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ConstantNode.prototype._compile = function (math, argNames) {\n    var value = this.value;\n    return function evalConstantNode() {\n      return value;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n  ConstantNode.prototype.forEach = function (callback) {// nothing to do, we don't have childs\n  };\n  /**\n   * Create a new ConstantNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ConstantNode} Returns a clone of the node\n   */\n\n  ConstantNode.prototype.map = function (callback) {\n    return this.clone();\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ConstantNode}\n   */\n\n  ConstantNode.prototype.clone = function () {\n    return new ConstantNode(this.value);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  ConstantNode.prototype._toString = function (options) {\n    return format(this.value, options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  ConstantNode.prototype.toHTML = function (options) {\n    var value = this._toString(options);\n    switch (typeOf(this.value)) {\n      case 'number':\n      case 'BigNumber':\n      case 'Fraction':\n        return '<span class=\"math-number\">' + value + '</span>';\n      case 'string':\n        return '<span class=\"math-string\">' + value + '</span>';\n      case 'boolean':\n        return '<span class=\"math-boolean\">' + value + '</span>';\n      case 'null':\n        return '<span class=\"math-null-symbol\">' + value + '</span>';\n      case 'undefined':\n        return '<span class=\"math-undefined\">' + value + '</span>';\n      default:\n        return '<span class=\"math-symbol\">' + value + '</span>';\n    }\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n  ConstantNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ConstantNode',\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate a ConstantNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SymbolNode\", value: 2.3}`,\n   *                       where mathjs is optional\n   * @returns {ConstantNode}\n   */\n\n  ConstantNode.fromJSON = function (json) {\n    return new ConstantNode(json.value);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  ConstantNode.prototype._toTex = function (options) {\n    var value = this._toString(options);\n    switch (typeOf(this.value)) {\n      case 'string':\n        return '\\\\mathtt{' + escapeLatex(value) + '}';\n      case 'number':\n      case 'BigNumber':\n        {\n          if (!isFinite(this.value)) {\n            return this.value.valueOf() < 0 ? '-\\\\infty' : '\\\\infty';\n          }\n          var index = value.toLowerCase().indexOf('e');\n          if (index !== -1) {\n            return value.substring(0, index) + '\\\\cdot10^{' + value.substring(index + 1) + '}';\n          }\n        }\n        return value;\n      case 'Fraction':\n        return this.value.toLatex();\n      default:\n        return value;\n    }\n  };\n  return ConstantNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["format","typeOf","escapeLatex","factory","name","dependencies","createConstantNode","_ref","Node","ConstantNode","value","SyntaxError","prototype","type","isConstantNode","_compile","math","argNames","evalConstantNode","forEach","callback","map","clone","_toString","options","toHTML","toJSON","mathjs","fromJSON","json","_toTex","isFinite","valueOf","index","toLowerCase","indexOf","substring","toLatex","isClass","isNode"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/expression/node/ConstantNode.js"],"sourcesContent":["import { format } from '../../utils/string.js';\nimport { typeOf } from '../../utils/is.js';\nimport { escapeLatex } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ConstantNode';\nvar dependencies = ['Node'];\nexport var createConstantNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n\n  /**\n   * A ConstantNode holds a constant value like a number or string.\n   *\n   * Usage:\n   *\n   *     new ConstantNode(2.3)\n   *     new ConstantNode('hello')\n   *\n   * @param {*} value    Value can be any type (number, BigNumber, string, ...)\n   * @constructor ConstantNode\n   * @extends {Node}\n   */\n  function ConstantNode(value) {\n    if (!(this instanceof ConstantNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.value = value;\n  }\n\n  ConstantNode.prototype = new Node();\n  ConstantNode.prototype.type = 'ConstantNode';\n  ConstantNode.prototype.isConstantNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ConstantNode.prototype._compile = function (math, argNames) {\n    var value = this.value;\n    return function evalConstantNode() {\n      return value;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ConstantNode.prototype.forEach = function (callback) {// nothing to do, we don't have childs\n  };\n  /**\n   * Create a new ConstantNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ConstantNode} Returns a clone of the node\n   */\n\n\n  ConstantNode.prototype.map = function (callback) {\n    return this.clone();\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ConstantNode}\n   */\n\n\n  ConstantNode.prototype.clone = function () {\n    return new ConstantNode(this.value);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toString = function (options) {\n    return format(this.value, options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype.toHTML = function (options) {\n    var value = this._toString(options);\n\n    switch (typeOf(this.value)) {\n      case 'number':\n      case 'BigNumber':\n      case 'Fraction':\n        return '<span class=\"math-number\">' + value + '</span>';\n\n      case 'string':\n        return '<span class=\"math-string\">' + value + '</span>';\n\n      case 'boolean':\n        return '<span class=\"math-boolean\">' + value + '</span>';\n\n      case 'null':\n        return '<span class=\"math-null-symbol\">' + value + '</span>';\n\n      case 'undefined':\n        return '<span class=\"math-undefined\">' + value + '</span>';\n\n      default:\n        return '<span class=\"math-symbol\">' + value + '</span>';\n    }\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ConstantNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ConstantNode',\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate a ConstantNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SymbolNode\", value: 2.3}`,\n   *                       where mathjs is optional\n   * @returns {ConstantNode}\n   */\n\n\n  ConstantNode.fromJSON = function (json) {\n    return new ConstantNode(json.value);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toTex = function (options) {\n    var value = this._toString(options);\n\n    switch (typeOf(this.value)) {\n      case 'string':\n        return '\\\\mathtt{' + escapeLatex(value) + '}';\n\n      case 'number':\n      case 'BigNumber':\n        {\n          if (!isFinite(this.value)) {\n            return this.value.valueOf() < 0 ? '-\\\\infty' : '\\\\infty';\n          }\n\n          var index = value.toLowerCase().indexOf('e');\n\n          if (index !== -1) {\n            return value.substring(0, index) + '\\\\cdot10^{' + value.substring(index + 1) + '}';\n          }\n        }\n        return value;\n\n      case 'Fraction':\n        return this.value.toLatex();\n\n      default:\n        return value;\n    }\n  };\n\n  return ConstantNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}