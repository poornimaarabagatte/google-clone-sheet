{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'algorithm09';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createAlgorithm09 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n\n  /**\n   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij).\n   * Callback function invoked NZA times, number of nonzero elements in A.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm09(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // workspaces\n\n    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var w = []; // vars\n\n    var i, j, k, k0, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // column mark\n\n      var mark = j + 1; // check we need to process values\n\n      if (x) {\n        // loop B(:,j)\n        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n          // row\n          i = bindex[k]; // update workspace\n\n          w[i] = mark;\n          x[i] = bvalues[k];\n        }\n      } // loop A(:,j)\n\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k]; // check we need to process values\n\n        if (x) {\n          // b value @ i,j\n          var vb = w[i] === mark ? x[i] : zero; // invoke f\n\n          var vc = cf(avalues[k], vb); // check zero value\n\n          if (!eq(vc, zero)) {\n            // push index\n            cindex.push(i); // push value\n\n            cvalues.push(vc);\n          }\n        } else {\n          // push index\n          cindex.push(i);\n        }\n      }\n    } // update cptr\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","map":{"version":3,"names":["factory","DimensionError","name","dependencies","createAlgorithm09","_ref","typed","equalScalar","algorithm09","a","b","callback","avalues","_values","aindex","_index","aptr","_ptr","asize","_size","adt","_datatype","bvalues","bindex","bptr","bsize","bdt","length","RangeError","rows","columns","dt","eq","zero","cf","find","convert","cvalues","undefined","cindex","cptr","x","w","i","j","k","k0","k1","mark","vb","vc","push","createSparseMatrix","values","index","ptr","size","datatype"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/type/matrix/utils/algorithm09.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'algorithm09';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createAlgorithm09 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n\n  /**\n   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij).\n   * Callback function invoked NZA times, number of nonzero elements in A.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm09(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // workspaces\n\n    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var w = []; // vars\n\n    var i, j, k, k0, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // column mark\n\n      var mark = j + 1; // check we need to process values\n\n      if (x) {\n        // loop B(:,j)\n        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n          // row\n          i = bindex[k]; // update workspace\n\n          w[i] = mark;\n          x[i] = bvalues[k];\n        }\n      } // loop A(:,j)\n\n\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k]; // check we need to process values\n\n        if (x) {\n          // b value @ i,j\n          var vb = w[i] === mark ? x[i] : zero; // invoke f\n\n          var vc = cf(avalues[k], vb); // check zero value\n\n          if (!eq(vc, zero)) {\n            // push index\n            cindex.push(i); // push value\n\n            cvalues.push(vc);\n          }\n        } else {\n          // push index\n          cindex.push(i);\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}