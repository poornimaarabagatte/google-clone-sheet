{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { addNumber } from '../../plain/number/index.js';\nvar name = 'addScalar';\nvar dependencies = ['typed'];\nexport var createAddScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Add two scalar values, `x + y`.\n   * This function is meant for internal use: it is used by the public function\n   * `add`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': addNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.add(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.plus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.add(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');\n      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n      var res = x.clone();\n      res.value = this(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    }\n  });\n});","map":{"version":3,"names":["factory","addNumber","name","dependencies","createAddScalar","_ref","typed","ComplexComplex","x","y","add","BigNumberBigNumber","plus","FractionFraction","UnitUnit","value","undefined","Error","equalBase","res","clone","fixPrefix"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/function/arithmetic/addScalar.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { addNumber } from '../../plain/number/index.js';\nvar name = 'addScalar';\nvar dependencies = ['typed'];\nexport var createAddScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Add two scalar values, `x + y`.\n   * This function is meant for internal use: it is used by the public function\n   * `add`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': addNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.add(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.plus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.add(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');\n      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n      var res = x.clone();\n      res.value = this(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,SAAS,QAAQ,6BAA6B;AACvD,IAAIC,IAAI,GAAG,WAAW;AACtB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,eAAe,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC9E,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;;EAER;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAED,SAAS;IAC3B,kBAAkB,EAAE,SAASM,cAAcA,CAACC,CAAC,EAAEC,CAAC,EAAE;MAChD,OAAOD,CAAC,CAACE,GAAG,CAACD,CAAC,CAAC;IACjB,CAAC;IACD,sBAAsB,EAAE,SAASE,kBAAkBA,CAACH,CAAC,EAAEC,CAAC,EAAE;MACxD,OAAOD,CAAC,CAACI,IAAI,CAACH,CAAC,CAAC;IAClB,CAAC;IACD,oBAAoB,EAAE,SAASI,gBAAgBA,CAACL,CAAC,EAAEC,CAAC,EAAE;MACpD,OAAOD,CAAC,CAACE,GAAG,CAACD,CAAC,CAAC;IACjB,CAAC;IACD,YAAY,EAAE,SAASK,QAAQA,CAACN,CAAC,EAAEC,CAAC,EAAE;MACpC,IAAID,CAAC,CAACO,KAAK,KAAK,IAAI,IAAIP,CAAC,CAACO,KAAK,KAAKC,SAAS,EAAE,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;MAClH,IAAIR,CAAC,CAACM,KAAK,KAAK,IAAI,IAAIN,CAAC,CAACM,KAAK,KAAKC,SAAS,EAAE,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;MAClH,IAAI,CAACT,CAAC,CAACU,SAAS,CAACT,CAAC,CAAC,EAAE,MAAM,IAAIQ,KAAK,CAAC,oBAAoB,CAAC;MAC1D,IAAIE,GAAG,GAAGX,CAAC,CAACY,KAAK,CAAC,CAAC;MACnBD,GAAG,CAACJ,KAAK,GAAG,IAAI,CAACI,GAAG,CAACJ,KAAK,EAAEN,CAAC,CAACM,KAAK,CAAC;MACpCI,GAAG,CAACE,SAAS,GAAG,KAAK;MACrB,OAAOF,GAAG;IACZ;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}