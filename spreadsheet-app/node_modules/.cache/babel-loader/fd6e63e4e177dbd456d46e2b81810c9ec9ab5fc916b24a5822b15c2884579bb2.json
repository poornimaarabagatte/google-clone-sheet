{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'algorithm05';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createAlgorithm05 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm05(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // workspaces\n\n    var xa = cvalues ? [] : undefined;\n    var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // vars\n\n    var i, j, k, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop values A(:,j)\n\n      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {\n        // row\n        i = aindex[k]; // push index\n\n        cindex.push(i); // update workspace\n\n        wa[i] = mark; // check we need to process values\n\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      } // loop values B(:,j)\n\n      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {\n        // row\n        i = bindex[k]; // check row existed in A\n\n        if (wa[i] !== mark) {\n          // push index\n          cindex.push(i);\n        } // update workspace\n\n        wb[i] = mark; // check we need to process values\n\n        if (xb) {\n          xb[i] = bvalues[k];\n        }\n      } // check we need to process values (non pattern matrix)\n\n      if (cvalues) {\n        // initialize first index in j\n        k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          i = cindex[k]; // marks\n\n          var wai = wa[i];\n          var wbi = wb[i]; // check Aij or Bij are nonzero\n\n          if (wai === mark || wbi === mark) {\n            // matrix values @ i,j\n            var va = wai === mark ? xa[i] : zero;\n            var vb = wbi === mark ? xb[i] : zero; // Cij\n\n            var vc = cf(va, vb); // check for zero\n\n            if (!eq(vc, zero)) {\n              // push value\n              cvalues.push(vc); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          }\n        }\n      }\n    } // update cptr\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","map":{"version":3,"names":["factory","DimensionError","name","dependencies","createAlgorithm05","_ref","typed","equalScalar","algorithm05","a","b","callback","avalues","_values","aindex","_index","aptr","_ptr","asize","_size","adt","_datatype","bvalues","bindex","bptr","bsize","bdt","length","RangeError","rows","columns","dt","eq","zero","cf","find","convert","cvalues","undefined","cindex","cptr","xa","xb","wa","wb","i","j","k","k1","mark","push","wai","wbi","va","vb","vc","splice","createSparseMatrix","values","index","ptr","size","datatype"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/type/matrix/utils/algorithm05.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'algorithm05';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createAlgorithm05 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm05(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // workspaces\n\n    var xa = cvalues ? [] : undefined;\n    var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // vars\n\n    var i, j, k, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop values A(:,j)\n\n      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {\n        // row\n        i = aindex[k]; // push index\n\n        cindex.push(i); // update workspace\n\n        wa[i] = mark; // check we need to process values\n\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      } // loop values B(:,j)\n\n\n      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {\n        // row\n        i = bindex[k]; // check row existed in A\n\n        if (wa[i] !== mark) {\n          // push index\n          cindex.push(i);\n        } // update workspace\n\n\n        wb[i] = mark; // check we need to process values\n\n        if (xb) {\n          xb[i] = bvalues[k];\n        }\n      } // check we need to process values (non pattern matrix)\n\n\n      if (cvalues) {\n        // initialize first index in j\n        k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          i = cindex[k]; // marks\n\n          var wai = wa[i];\n          var wbi = wb[i]; // check Aij or Bij are nonzero\n\n          if (wai === mark || wbi === mark) {\n            // matrix values @ i,j\n            var va = wai === mark ? xa[i] : zero;\n            var vb = wbi === mark ? xb[i] : zero; // Cij\n\n            var vc = cf(va, vb); // check for zero\n\n            if (!eq(vc, zero)) {\n              // push value\n              cvalues.push(vc); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}