{"ast":null,"code":"var _jsxFileName = \"/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/src/components/spreadSheet.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { evaluate } from \"mathjs\";\nimport { FaArrowUp, FaArrowDown, FaCut, FaPlusCircle, FaMinusCircle, FaSortAmountDown, FaSortAmountUp, FaCount, FaSave, FaFolderOpen, FaEdit, FaRegCheckSquare, FaSearch, FaUndo, FaRedo } from \"react-icons/fa\";\nimport \"./spreadSheet.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Spreadsheet = () => {\n  _s();\n  const [cells, setCells] = useState(Array(10).fill(null).map(() => Array(10).fill(\"\")));\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [formula, setFormula] = useState(\"\");\n  const [isFormulaMode, setIsFormulaMode] = useState(false);\n  const [findValue, setFindValue] = useState(\"\");\n  const [replaceValue, setReplaceValue] = useState(\"\");\n  const handleCellChange = (row, col, value) => {\n    const newCells = cells.map((r, i) => r.map((c, j) => i === row && j === col ? value : c));\n    setCells(newCells);\n  };\n  const applyMathFunction = operation => {\n    if (selectedCells.length === 0) return;\n    const [row, col] = selectedCells[0];\n    let value = parseFloat(cells[row][col]);\n    if (isNaN(value)) return;\n    if (operation === \"SUM\") {\n      let sum = 0;\n      cells.forEach(row => row.forEach(cell => {\n        let num = parseFloat(cell);\n        if (!isNaN(num)) sum += num;\n      }));\n      value = sum;\n    } else if (operation === \"AVG\") {\n      let sum = 0,\n        count = 0;\n      cells.forEach(row => row.forEach(cell => {\n        let num = parseFloat(cell);\n        if (!isNaN(num)) {\n          sum += num;\n          count++;\n        }\n      }));\n      value = count > 0 ? sum / count : 0;\n    } else if (operation === \"MIN\") {\n      let numbers = cells.flat().map(cell => parseFloat(cell)).filter(num => !isNaN(num));\n      value = numbers.length > 0 ? Math.min(...numbers) : 0;\n    } else if (operation === \"MAX\") {\n      let numbers = cells.flat().map(cell => parseFloat(cell)).filter(num => !isNaN(num));\n      value = numbers.length > 0 ? Math.max(...numbers) : 0;\n    } else if (operation === \"COUNT\") {\n      let count = cells.flat().filter(cell => !isNaN(parseFloat(cell))).length;\n      value = count;\n    }\n    const newCells = [...cells];\n    newCells[row][col] = value.toString();\n    setCells(newCells);\n  };\n  const saveSpreadsheet = () => {\n    localStorage.setItem(\"spreadsheetData\", JSON.stringify(cells));\n    alert(\"Spreadsheet saved successfully!\");\n  };\n  const loadSpreadsheet = () => {\n    const data = localStorage.getItem(\"spreadsheetData\");\n    if (data) {\n      setCells(JSON.parse(data));\n      alert(\"Spreadsheet loaded successfully!\");\n    } else {\n      alert(\"No saved spreadsheet found!\");\n    }\n  };\n  const handleFormulaInputChange = e => {\n    setFormula(e.target.value);\n  };\n  const applyFormula = () => {\n    if (selectedCells.length === 0 || formula === \"\") return;\n    try {\n      const [row, col] = selectedCells[0];\n      const newCells = [...cells];\n      const result = evaluate(formula.replace(/[A-J][1-9]/g, match => {\n        const r = parseInt(match[1], 10) - 1;\n        const c = match.charCodeAt(0) - 65;\n        return cells[r][c] || 0;\n      }));\n      newCells[row][col] = result.toString();\n      setCells(newCells);\n      setIsFormulaMode(false); // Exit formula mode after applying\n    } catch (error) {\n      alert(\"Error evaluating formula. Please check your formula syntax.\");\n    }\n  };\n\n  // REMOVE_DUPLICATES function: Removes duplicate rows\n  const removeDuplicates = () => {\n    const newCells = [...cells];\n    const uniqueRows = [];\n    newCells.forEach(row => {\n      const rowString = JSON.stringify(row); // Convert row to string for comparison\n      if (!uniqueRows.includes(rowString)) {\n        uniqueRows.push(rowString); // Only keep unique rows\n      }\n    });\n    const finalCells = uniqueRows.map(rowString => JSON.parse(rowString));\n    setCells(finalCells);\n  };\n\n  // FIND_AND_REPLACE function: Finds and replaces text in a range of cells\n  const findAndReplace = () => {\n    if (!findValue || !replaceValue) return;\n    const newCells = cells.map(row => row.map(cell => {\n      if (cell.includes(findValue)) {\n        return cell.replace(new RegExp(findValue, \"g\"), replaceValue); // Replace all instances\n      }\n      return cell;\n    }));\n    setCells(newCells);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spreadsheet\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyMathFunction(\"SUM\"),\n        children: [/*#__PURE__*/_jsxDEV(FaPlusCircle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 66\n        }, this), \" Sum\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyMathFunction(\"AVG\"),\n        children: [/*#__PURE__*/_jsxDEV(FaMinusCircle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 66\n        }, this), \" Average\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyMathFunction(\"MIN\"),\n        children: [/*#__PURE__*/_jsxDEV(FaSortAmountDown, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 66\n        }, this), \" Min\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyMathFunction(\"MAX\"),\n        children: [/*#__PURE__*/_jsxDEV(FaSortAmountUp, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 66\n        }, this), \" Max\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyMathFunction(\"COUNT\"),\n        children: [/*#__PURE__*/_jsxDEV(FaCount, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 68\n        }, this), \" Count\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveSpreadsheet,\n        children: [/*#__PURE__*/_jsxDEV(FaSave, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 51\n        }, this), \" Save\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadSpreadsheet,\n        children: [/*#__PURE__*/_jsxDEV(FaFolderOpen, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 51\n        }, this), \" Load\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsFormulaMode(true),\n        children: [/*#__PURE__*/_jsxDEV(FaEdit, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 64\n        }, this), \" Enter Formula\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), isFormulaMode && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: formula,\n          onChange: handleFormulaInputChange,\n          placeholder: \"Enter formula (e.g. A1+B1)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: applyFormula,\n          children: [/*#__PURE__*/_jsxDEV(FaRegCheckSquare, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 29\n          }, this), \" Apply Formula\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: removeDuplicates,\n        children: [/*#__PURE__*/_jsxDEV(FaUndo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 52\n        }, this), \" Remove Duplicates\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: findAndReplace,\n        children: [/*#__PURE__*/_jsxDEV(FaSearch, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 50\n        }, this), \" Find & Replace\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Find\",\n          value: findValue,\n          onChange: e => setFindValue(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Replace\",\n          value: replaceValue,\n          onChange: e => setReplaceValue(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this), cells[0].map((_, colIndex) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: String.fromCharCode(65 + colIndex)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: cells.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: rowIndex + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 29\n          }, this), row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              value: cell,\n              onChange: e => handleCellChange(rowIndex, colIndex, e.target.value),\n              onClick: () => setSelectedCells([[rowIndex, colIndex]])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 37\n            }, this)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 33\n          }, this))]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n};\n_s(Spreadsheet, \"lsI1optduCBdZkD/J5eEve/SlGM=\");\n_c = Spreadsheet;\nexport default Spreadsheet;\nvar _c;\n$RefreshReg$(_c, \"Spreadsheet\");","map":{"version":3,"names":["React","useState","evaluate","FaArrowUp","FaArrowDown","FaCut","FaPlusCircle","FaMinusCircle","FaSortAmountDown","FaSortAmountUp","FaCount","FaSave","FaFolderOpen","FaEdit","FaRegCheckSquare","FaSearch","FaUndo","FaRedo","jsxDEV","_jsxDEV","Fragment","_Fragment","Spreadsheet","_s","cells","setCells","Array","fill","map","selectedCells","setSelectedCells","formula","setFormula","isFormulaMode","setIsFormulaMode","findValue","setFindValue","replaceValue","setReplaceValue","handleCellChange","row","col","value","newCells","r","i","c","j","applyMathFunction","operation","length","parseFloat","isNaN","sum","forEach","cell","num","count","numbers","flat","filter","Math","min","max","toString","saveSpreadsheet","localStorage","setItem","JSON","stringify","alert","loadSpreadsheet","data","getItem","parse","handleFormulaInputChange","e","target","applyFormula","result","replace","match","parseInt","charCodeAt","error","removeDuplicates","uniqueRows","rowString","includes","push","finalCells","findAndReplace","RegExp","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","_","colIndex","String","fromCharCode","rowIndex","_c","$RefreshReg$"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/src/components/spreadSheet.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { evaluate } from \"mathjs\";\nimport { FaArrowUp, FaArrowDown, FaCut, FaPlusCircle, FaMinusCircle, FaSortAmountDown, FaSortAmountUp, FaCount, FaSave, FaFolderOpen, FaEdit, FaRegCheckSquare, FaSearch, FaUndo, FaRedo } from \"react-icons/fa\";\nimport \"./spreadSheet.css\"\n\nconst Spreadsheet = () => {\n    const [cells, setCells] = useState(Array(10).fill(null).map(() => Array(10).fill(\"\")));\n    const [selectedCells, setSelectedCells] = useState([]);\n    const [formula, setFormula] = useState(\"\");\n    const [isFormulaMode, setIsFormulaMode] = useState(false);\n    const [findValue, setFindValue] = useState(\"\");\n    const [replaceValue, setReplaceValue] = useState(\"\");\n\n    const handleCellChange = (row, col, value) => {\n        const newCells = cells.map((r, i) => r.map((c, j) => (i === row && j === col ? value : c)));\n        setCells(newCells);\n    };\n\n    const applyMathFunction = (operation) => {\n        if (selectedCells.length === 0) return;\n        const [row, col] = selectedCells[0];\n        let value = parseFloat(cells[row][col]);\n        if (isNaN(value)) return;\n\n        if (operation === \"SUM\") {\n            let sum = 0;\n            cells.forEach(row => row.forEach(cell => {\n                let num = parseFloat(cell);\n                if (!isNaN(num)) sum += num;\n            }));\n            value = sum;\n        } else if (operation === \"AVG\") {\n            let sum = 0, count = 0;\n            cells.forEach(row => row.forEach(cell => {\n                let num = parseFloat(cell);\n                if (!isNaN(num)) {\n                    sum += num;\n                    count++;\n                }\n            }));\n            value = count > 0 ? sum / count : 0;\n        } else if (operation === \"MIN\") {\n            let numbers = cells.flat().map(cell => parseFloat(cell)).filter(num => !isNaN(num));\n            value = numbers.length > 0 ? Math.min(...numbers) : 0;\n        } else if (operation === \"MAX\") {\n            let numbers = cells.flat().map(cell => parseFloat(cell)).filter(num => !isNaN(num));\n            value = numbers.length > 0 ? Math.max(...numbers) : 0;\n        } else if (operation === \"COUNT\") {\n            let count = cells.flat().filter(cell => !isNaN(parseFloat(cell))).length;\n            value = count;\n        }\n\n        const newCells = [...cells];\n        newCells[row][col] = value.toString();\n        setCells(newCells);\n    };\n\n    const saveSpreadsheet = () => {\n        localStorage.setItem(\"spreadsheetData\", JSON.stringify(cells));\n        alert(\"Spreadsheet saved successfully!\");\n    };\n\n    const loadSpreadsheet = () => {\n        const data = localStorage.getItem(\"spreadsheetData\");\n        if (data) {\n            setCells(JSON.parse(data));\n            alert(\"Spreadsheet loaded successfully!\");\n        } else {\n            alert(\"No saved spreadsheet found!\");\n        }\n    };\n\n    const handleFormulaInputChange = (e) => {\n        setFormula(e.target.value);\n    };\n\n    const applyFormula = () => {\n        if (selectedCells.length === 0 || formula === \"\") return;\n\n        try {\n            const [row, col] = selectedCells[0];\n            const newCells = [...cells];\n            const result = evaluate(formula.replace(/[A-J][1-9]/g, (match) => {\n                const r = parseInt(match[1], 10) - 1;\n                const c = match.charCodeAt(0) - 65;\n                return cells[r][c] || 0;\n            }));\n\n            newCells[row][col] = result.toString();\n            setCells(newCells);\n            setIsFormulaMode(false); // Exit formula mode after applying\n        } catch (error) {\n            alert(\"Error evaluating formula. Please check your formula syntax.\");\n        }\n    };\n\n    // REMOVE_DUPLICATES function: Removes duplicate rows\n    const removeDuplicates = () => {\n        const newCells = [...cells];\n        const uniqueRows = [];\n\n        newCells.forEach(row => {\n            const rowString = JSON.stringify(row); // Convert row to string for comparison\n            if (!uniqueRows.includes(rowString)) {\n                uniqueRows.push(rowString); // Only keep unique rows\n            }\n        });\n\n        const finalCells = uniqueRows.map(rowString => JSON.parse(rowString));\n        setCells(finalCells);\n    };\n\n    // FIND_AND_REPLACE function: Finds and replaces text in a range of cells\n    const findAndReplace = () => {\n        if (!findValue || !replaceValue) return;\n\n        const newCells = cells.map(row => row.map(cell => {\n            if (cell.includes(findValue)) {\n                return cell.replace(new RegExp(findValue, \"g\"), replaceValue); // Replace all instances\n            }\n            return cell;\n        }));\n\n        setCells(newCells);\n    };\n\n    return (\n        <div className=\"spreadsheet\">\n            <div className=\"toolbar\">\n                <button onClick={() => applyMathFunction(\"SUM\")}><FaPlusCircle /> Sum</button>\n                <button onClick={() => applyMathFunction(\"AVG\")}><FaMinusCircle /> Average</button>\n                <button onClick={() => applyMathFunction(\"MIN\")}><FaSortAmountDown /> Min</button>\n                <button onClick={() => applyMathFunction(\"MAX\")}><FaSortAmountUp /> Max</button>\n                <button onClick={() => applyMathFunction(\"COUNT\")}><FaCount /> Count</button>\n                <button onClick={saveSpreadsheet}><FaSave /> Save</button>\n                <button onClick={loadSpreadsheet}><FaFolderOpen /> Load</button>\n                <button onClick={() => setIsFormulaMode(true)}><FaEdit /> Enter Formula</button>\n\n                {/* Formula Mode UI */}\n                {isFormulaMode && (\n                    <>\n                        <input\n                            type=\"text\"\n                            value={formula}\n                            onChange={handleFormulaInputChange}\n                            placeholder=\"Enter formula (e.g. A1+B1)\"\n                        />\n                        <button onClick={applyFormula}>\n                            <FaRegCheckSquare /> Apply Formula\n                        </button>\n                    </>\n                )}\n\n                {/* Data Quality Functions */}\n                <button onClick={removeDuplicates}><FaUndo /> Remove Duplicates</button>\n                <button onClick={findAndReplace}><FaSearch /> Find & Replace</button>\n\n                {/* Find and Replace Input */}\n                <div>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Find\"\n                        value={findValue}\n                        onChange={(e) => setFindValue(e.target.value)}\n                    />\n                    <input\n                        type=\"text\"\n                        placeholder=\"Replace\"\n                        value={replaceValue}\n                        onChange={(e) => setReplaceValue(e.target.value)}\n                    />\n                </div>\n            </div>\n\n            <table>\n                <thead>\n                    <tr>\n                        <th></th>\n                        {cells[0].map((_, colIndex) => (\n                            <th key={colIndex}>{String.fromCharCode(65 + colIndex)}</th>\n                        ))}\n                    </tr>\n                </thead>\n                <tbody>\n                    {cells.map((row, rowIndex) => (\n                        <tr key={rowIndex}>\n                            <th>{rowIndex + 1}</th>\n                            {row.map((cell, colIndex) => (\n                                <td key={colIndex}>\n                                    <input\n                                        value={cell}\n                                        onChange={(e) => handleCellChange(rowIndex, colIndex, e.target.value)}\n                                        onClick={() => setSelectedCells([[rowIndex, colIndex]])}\n                                    />\n                                </td>\n                            ))}\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default Spreadsheet;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}