{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { asechNumber } from '../../plain/number/index.js';\nvar name = 'asech';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport var createAsech = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex,\n    BigNumber: _BigNumber\n  } = _ref;\n\n  /**\n   * Calculate the hyperbolic arcsecant of a value,\n   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.asech(x)\n   *\n   * Examples:\n   *\n   *    math.asech(0.5)       // returns 1.3169578969248166\n   *\n   * See also:\n   *\n   *    acsch, acoth\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= 1 && x >= -1 || config.predictable) {\n        var xInv = 1 / x;\n        if (xInv > 0 || config.predictable) {\n          return asechNumber(x);\n        }\n        var ret = Math.sqrt(xInv * xInv - 1);\n        return new Complex(Math.log(ret - xInv), Math.PI);\n      }\n      return new Complex(x, 0).asech();\n    },\n    Complex: function Complex(x) {\n      return x.asech();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).acosh();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"names":["factory","deepMap","asechNumber","name","dependencies","createAsech","_ref","typed","config","Complex","BigNumber","_BigNumber","number","x","predictable","xInv","ret","Math","sqrt","log","PI","asech","div","acosh","ArrayMatrix"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/function/trigonometry/asech.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { asechNumber } from '../../plain/number/index.js';\nvar name = 'asech';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport var createAsech = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex,\n    BigNumber: _BigNumber\n  } = _ref;\n\n  /**\n   * Calculate the hyperbolic arcsecant of a value,\n   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.asech(x)\n   *\n   * Examples:\n   *\n   *    math.asech(0.5)       // returns 1.3169578969248166\n   *\n   * See also:\n   *\n   *    acsch, acoth\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= 1 && x >= -1 || config.predictable) {\n        var xInv = 1 / x;\n\n        if (xInv > 0 || config.predictable) {\n          return asechNumber(x);\n        }\n\n        var ret = Math.sqrt(xInv * xInv - 1);\n        return new Complex(Math.log(ret - xInv), Math.PI);\n      }\n\n      return new Complex(x, 0).asech();\n    },\n    Complex: function Complex(x) {\n      return x.asech();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).acosh();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,WAAW,QAAQ,6BAA6B;AACzD,IAAIC,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,CAAC;AAC9D,OAAO,IAAIC,WAAW,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC1E,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,OAAO;IACPC,SAAS,EAAEC;EACb,CAAC,GAAGL,IAAI;;EAER;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBS,MAAM,EAAE,SAASA,MAAMA,CAACC,CAAC,EAAE;MACzB,IAAIA,CAAC,IAAI,CAAC,IAAIA,CAAC,IAAI,CAAC,CAAC,IAAIL,MAAM,CAACM,WAAW,EAAE;QAC3C,IAAIC,IAAI,GAAG,CAAC,GAAGF,CAAC;QAEhB,IAAIE,IAAI,GAAG,CAAC,IAAIP,MAAM,CAACM,WAAW,EAAE;UAClC,OAAOZ,WAAW,CAACW,CAAC,CAAC;QACvB;QAEA,IAAIG,GAAG,GAAGC,IAAI,CAACC,IAAI,CAACH,IAAI,GAAGA,IAAI,GAAG,CAAC,CAAC;QACpC,OAAO,IAAIN,OAAO,CAACQ,IAAI,CAACE,GAAG,CAACH,GAAG,GAAGD,IAAI,CAAC,EAAEE,IAAI,CAACG,EAAE,CAAC;MACnD;MAEA,OAAO,IAAIX,OAAO,CAACI,CAAC,EAAE,CAAC,CAAC,CAACQ,KAAK,CAAC,CAAC;IAClC,CAAC;IACDZ,OAAO,EAAE,SAASA,OAAOA,CAACI,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACQ,KAAK,CAAC,CAAC;IAClB,CAAC;IACDX,SAAS,EAAE,SAASA,SAASA,CAACG,CAAC,EAAE;MAC/B,OAAO,IAAIF,UAAU,CAAC,CAAC,CAAC,CAACW,GAAG,CAACT,CAAC,CAAC,CAACU,KAAK,CAAC,CAAC;IACzC,CAAC;IACD,gBAAgB,EAAE,SAASC,WAAWA,CAACX,CAAC,EAAE;MACxC,OAAOZ,OAAO,CAACY,CAAC,EAAE,IAAI,CAAC;IACzB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}