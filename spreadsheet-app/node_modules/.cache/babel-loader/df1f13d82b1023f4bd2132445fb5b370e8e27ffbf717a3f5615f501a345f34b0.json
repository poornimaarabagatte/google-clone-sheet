{"ast":null,"code":"var _jsxFileName = \"/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/src/components/spreadSheet.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { FaPlus, FaSortNumericUp, FaSortNumericDown, FaCalculator, FaHashtag } from \"react-icons/fa\";\nimport Draggable from \"react-draggable\";\nimport { getSelectedRange } from \"../utils\";\nimport \"./spreadSheet.css\";\nimport '../App.css'; // Correct relative path\nimport { evaluate } from 'mathjs';\nimport { create, all } from \"mathjs\";\nimport { trimCellValue, upperCaseCellValue, lowerCaseCellValue, removeDuplicates, findAndReplace } from \"./dataQualityFunction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = {};\nconst math = create(all, config);\n\n// Define missing functions manually\nmath.import({\n  UPPER: function (text) {\n    if (typeof text === \"string\") return text.toUpperCase();\n    throw new Error(\"UPPER function expects a string input\");\n  },\n  LOWER: function (text) {\n    if (typeof text === \"string\") return text.toLowerCase();\n    throw new Error(\"LOWER function expects a string input\");\n  },\n  TRIM: function (text) {\n    if (typeof text === \"string\") return text.trim();\n    throw new Error(\"TRIM function expects a string input\");\n  }\n}, {\n  override: true\n});\nconst Spreadsheet = () => {\n  _s();\n  const rows = 10;\n  const cols = 10;\n  const [cells, setCells] = useState({});\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [formula, setFormula] = useState(\"\");\n  const [dragging, setDragging] = useState(false);\n  const [startCell, setStartCell] = useState(null);\n  const trimFunction = value => value.trim();\n  const upperFunction = value => value.toUpperCase();\n  const lowerFunction = value => value.toLowerCase();\n  const trimmedFormula = formula.slice(1).trim(); // Remove '='\n\n  // converts cell referances\n\n  const getCellCoordinates = cellRef => {\n    const col = cellRef.charCodeAt(0) - 65; // Convert 'A' to 0, 'B' to 1, etc.\n    const row = parseInt(cellRef.substring(1)) - 1; // Convert '3' to row index 2\n    return [row, col];\n  };\n\n  // create separate icon functions \n\n  const applyTextTransformation = type => {\n    if (!selectedCell) return; // If no cell is selected, do nothing\n\n    const currentValue = cells[selectedCell] || \"\";\n    let newValue = currentValue;\n    if (type === \"UPPER\") newValue = currentValue.toUpperCase();\n    if (type === \"LOWER\") newValue = currentValue.toLowerCase();\n    if (type === \"TRIM\") newValue = currentValue.trim();\n    setCells({\n      ...cells,\n      [selectedCell]: newValue\n    });\n  };\n\n  // Spreadsheet Class: Handles Data, Formulas, and Operations\n  class Spreadsheet {\n    constructor(rows, cols) {\n      // Get cell value\n      this.getCellValue = cellRef => {\n        // Extract column letter and row number (e.g., \"A1\" -> \"A\", \"1\")\n        const column = cellRef.charAt(0);\n        const row = parseInt(cellRef.slice(1), 10) - 1;\n\n        // Assuming `cells` is your state for storing spreadsheet values\n        return cells[row] && cells[row][column] ? cells[row][column] : \"\";\n      };\n      this.rows = rows;\n      this.cols = cols;\n      this.data = {}; // Store cell values\n    }\n\n    // Set cell value (Handles formulas too)\n    setCell(row, col, value) {\n      const cellRef = this.getCellRef(row, col);\n      if (typeof value === \"string\" && value.startsWith(\"=\")) {\n        this.data[cellRef] = this.evaluateFormula(value);\n      } else {\n        this.data[cellRef] = value;\n      }\n    }\n\n    // Get cell reference (e.g., A1, B2)\n    getCellRef(row, col) {\n      return String.fromCharCode(65 + col) + (row + 1);\n    }\n    // Evaluate formulas like =SUM(A1:A3), =UPPER(A1), =LOWER(A1), =TRIM(A1)\n    // Formula Evaluator (Fix for UPPER, LOWER, TRIM)\n\n    // SUM Function: Calculates sum in a given range (e.g., SUM(A1:A3))\n    calculateSum(range) {\n      const [start, end] = range.split(\":\");\n      const startRow = parseInt(start.match(/\\d+/)[0]) - 1;\n      const endRow = parseInt(end.match(/\\d+/)[0]) - 1;\n      const col = start[0];\n      let sum = 0;\n      for (let row = startRow; row <= endRow; row++) {\n        const cellRef = col + (row + 1);\n        sum += Number(this.getCellValue(cellRef)) || 0;\n      }\n      return sum;\n    }\n  }\n  const [data, setData] = useState(Array.from({\n    length: rows\n  }, () => Array(cols).fill(\"\")));\n  const [dependencies, setDependencies] = useState({});\n  const [result, setResult] = useState(null);\n  const isFormula = value => value.startsWith(\"=\");\n  const removeDuplicates = () => {\n    const uniqueRows = [];\n    const seen = new Set();\n    data.forEach(row => {\n      const rowString = row.join(\"|\");\n      if (!seen.has(rowString)) {\n        seen.add(rowString);\n        uniqueRows.push(row);\n      }\n    });\n    setData(uniqueRows);\n  };\n  const findAndReplace = (findText, replaceText) => {\n    const newData = data.map(row => row.map(cell => cell.replace(new RegExp(findText, 'g'), replaceText)));\n    setData(newData);\n  };\n  const validateInput = (type, value) => {\n    if (type === \"number\") return !isNaN(value) ? value : \"\";\n    if (type === \"date\") return !isNaN(Date.parse(value)) ? new Date(value).toISOString().split(\"T\")[0] : \"\";\n    return value;\n  };\n  const getValuesFromRange = (range, data) => {\n    try {\n      let [start, end] = range.split(\":\"); // Example: \"A1:A3\"\n      let [startCol, startRow] = [start.charAt(0), parseInt(start.slice(1))];\n      let [endCol, endRow] = [end.charAt(0), parseInt(end.slice(1))];\n      let values = [];\n      for (let row = startRow - 1; row <= endRow - 1; row++) {\n        let colIndex = startCol.charCodeAt(0) - \"A\".charCodeAt(0);\n        if (data[row] && data[row][colIndex] !== undefined) {\n          values.push(parseFloat(data[row][colIndex]) || 0); // Convert to number\n        }\n      }\n      return values;\n    } catch (error) {\n      console.error(\"Error parsing range:\", range, error);\n      return [];\n    }\n    ;\n  };\n\n  // SUM parse function\n\n  const parseFormula = (formula, cells) => {\n    const regex = /=SUM\\((\\w+\\d+):(\\w+\\d+)\\)/; // Match range like A1:A3\n    const match = formula.match(regex);\n    if (!match) {\n      return \"Formula Error!\";\n    }\n    const [_, startCell, endCell] = match;\n    const startCol = startCell[0]; // e.g., 'A'\n    const startRow = parseInt(startCell.slice(1), 10); // e.g., 1\n    const endRow = parseInt(endCell.slice(1), 10); // e.g., 3\n\n    let sum = 0;\n    for (let row = startRow; row <= endRow; row++) {\n      const cellKey = `${startCol}${row}`; // e.g., A1, A2, A3\n      sum += cells[cellKey] ? parseFloat(cells[cellKey]) || 0 : 0;\n    }\n    return sum;\n  };\n  // apply formula\n\n  const applyFormula = (formula, cells) => {\n    if (formula.startsWith(\"=\")) {\n      return parseFormula(formula, cells);\n    }\n    return \"Formula Error!\";\n  };\n\n  // getselectedrange function\n\n  const getSelectedRange = (startCell, endCell) => {\n    const [startRow, startCol] = startCell.split(\"-\").map(Number);\n    const [endRow, endCol] = endCell.split(\"-\").map(Number);\n    let selectedCells = [];\n    for (let row = Math.min(startRow, endRow); row <= Math.max(startRow, endRow); row++) {\n      for (let col = Math.min(startCol, endCol); col <= Math.max(startCol, endCol); col++) {\n        selectedCells.push(`${row}-${col}`);\n      }\n    }\n    return selectedCells;\n  };\n\n  // use of getselecterange to drag function \n\n  const handleDragSelection = (startCell, endCell) => {\n    console.log(selectedCells, cells);\n    const selectedRange = getSelectedRange(startCell, endCell);\n    console.log(\"Selected Cells:\", selectedRange);\n  };\n  const parseCellReference = cellRef => {\n    const match = cellRef.match(/^([A-Z]+)([0-9]+)$/);\n    if (!match) return null;\n    return {\n      col: match[1],\n      row: parseInt(match[2], 10) - 1\n    };\n  };\n  const evaluateFormula = (formula, cellData) => {\n    try {\n      if (typeof formula !== \"string\") return \"Invalid Input!\";\n      if (!formula.startsWith(\"=\")) return formula; // If not a formula, return as-is\n\n      let expression = formula.substring(1); // Remove \"=\"\n\n      // Handle UPPER function\n      if (expression.startsWith(\"UPPER(\") && expression.endsWith(\")\")) {\n        var _cellData$cellRef;\n        let cellRef = expression.slice(6, -1).trim();\n        return ((_cellData$cellRef = cellData[cellRef]) === null || _cellData$cellRef === void 0 ? void 0 : _cellData$cellRef.toUpperCase()) || \"Error!\";\n      }\n\n      // Handle LOWER function\n      if (expression.startsWith(\"LOWER(\") && expression.endsWith(\")\")) {\n        var _cellData$cellRef2;\n        let cellRef = expression.slice(6, -1).trim();\n        return ((_cellData$cellRef2 = cellData[cellRef]) === null || _cellData$cellRef2 === void 0 ? void 0 : _cellData$cellRef2.toLowerCase()) || \"Error!\";\n      }\n\n      // Handle TRIM function\n      if (expression.startsWith(\"TRIM(\") && expression.endsWith(\")\")) {\n        var _cellData$cellRef3;\n        let cellRef = expression.slice(5, -1).trim();\n        return ((_cellData$cellRef3 = cellData[cellRef]) === null || _cellData$cellRef3 === void 0 ? void 0 : _cellData$cellRef3.trim()) || \"Error!\";\n      }\n\n      // General formula evaluation\n      expression = expression.replace(/([A-Z]+[0-9]+)/g, match => {\n        var _cellData$match;\n        const {\n          row,\n          col\n        } = parseCellReference(match);\n        return (_cellData$match = cellData[match]) !== null && _cellData$match !== void 0 ? _cellData$match : 0; // Use `match` directly as key for `cellData`\n      });\n      return Function(`\"use strict\"; return (${expression});`)();\n    } catch (error) {\n      return \"Formula Error!\";\n    }\n  };\n  const parseRange = (range, data) => {\n    const [start, end] = range.split(\":\");\n    let cells = [];\n    const getCellValue = cell => {\n      var _data$row;\n      const col = cell.charCodeAt(0) - 65; // Convert 'A' to 0, 'B' to 1, etc.\n      const row = parseInt(cell.substring(1)) - 1;\n      return parseFloat((_data$row = data[row]) === null || _data$row === void 0 ? void 0 : _data$row[col]) || 0; // Ensure numeric values\n    };\n    if (start && end) {\n      const startRow = parseInt(start.substring(1)) - 1;\n      const endRow = parseInt(end.substring(1)) - 1;\n      const col = start.charCodeAt(0) - 65;\n      for (let i = startRow; i <= endRow; i++) {\n        cells.push(getCellValue(`${String.fromCharCode(65 + col)}${i + 1}`));\n      }\n    }\n    console.log(`Parsed range ${range}:`, cells);\n    return cells;\n  };\n  const updateCell = (row, col, value) => {\n    setData(prevData => {\n      const newData = prevData.map(rowArr => [...rowArr]); // Deep copy of array\n      newData[row][col] = value;\n      return newData;\n    });\n  };\n  const handleCellChange = (rowIndex, colIndex, value, setCells) => {\n    setCells(prevCells => {\n      const updatedCells = [...prevCells];\n      const cellRef = `${rowIndex}-${colIndex}`;\n      updatedCells[rowIndex][colIndex] = evaluateFormula(value, cellRef => {\n        var _prevCells$r;\n        const [r, c] = parseCellReference(cellRef);\n        return ((_prevCells$r = prevCells[r]) === null || _prevCells$r === void 0 ? void 0 : _prevCells$r[c]) || \"\";\n      });\n      return updatedCells;\n    });\n  };\n  const handleChange = (row, col, value) => {\n    const cellId = `${row}-${col}`;\n    setCells(prev => ({\n      ...prev,\n      [cellId]: value\n    }));\n    console.log(`Cell (${row}, ${col}) changed to: ${value}`);\n    let newValue = value;\n\n    // Detect if it's a formula (starts with `=`)\n    if (value.startsWith(\"=\")) {\n      console.log(`Formula detected in cell (${row}, ${col}): ${value}`);\n      newValue = evaluateFormula(value, cells);\n    }\n    setCells(prev => ({\n      ...prev,\n      [`${row}-${col}`]: newValue\n    }));\n    setResult(`Updated cell (${row + 1}, ${col + 1}) with : ${newValue}`);\n    const formula = value.substring(1); // Remove `=`\n    const match = formula.match(/(\\w+)\\((\\w+\\d+)\\)/); // Match \"UPPER(A3)\"\n\n    if (match) {\n      const [_, func, refCell] = match;\n      const [refRow, refCol] = getCellCoordinates(refCell); // Convert A3 -> (row, col)\n      const refValue = cells[`${refRow}-${refCol}`] || \"\"; // Get referenced cell value\n\n      // Apply function\n      let newValue = refValue;\n      if (func === \"UPPER\") newValue = refValue.toUpperCase();\n      if (func === \"LOWER\") newValue = refValue.toLowerCase();\n      if (func === \"TRIM\") newValue = refValue.trim();\n      console.log(`Applying ${func} to ${refCell}:`, newValue);\n      setCells({\n        ...cells,\n        [cellId]: newValue\n      });\n      return;\n    }\n\n    // Otherwise, store normal value\n    setCells({\n      ...cells,\n      [cellId]: value\n    });\n  };\n\n  // handle dragging\n\n  const handleMouseDowm = (row, col) => {\n    setDragging(true);\n    setStartCell({\n      row,\n      col,\n      value: cells[`${row}-${col}`] || \"\"\n    });\n  };\n  const handleMouseUp = () => {\n    setDragging(false);\n  };\n  const handleMouseEnter = (row, col) => {\n    if (dragging && startCell) {\n      // Fill cells dynamically during drag\n      const cellId = `${row}-${col}`;\n      setCells(prev => ({\n        ...prev,\n        [cellId]: startCell.value\n      }));\n    }\n  };\n  const handleTypeChange = (row, col, type) => {\n    setData(prevData => {\n      const newData = prevData.map(rowArr => [...rowArr]); // Deep copy\n      newData[row][col] = validateInput(type, newData[row][col]); // Apply validation\n      return newData;\n    });\n  };\n\n  // to MIN MAX function\n\n  const applyFunction = (funcType, cells, selectedCells) => {\n    console.log(selectedCells, cells);\n    const selectedRange = getSelectedRange(cells, selectedCells); // Implement logic to get the selected cells\n\n    if (!selectedRange.length) return;\n    if (funcName === \"SUM\") {\n      console.log(selectedCells, cells);\n      const values = getSelectedRange(cells, selectedCells);\n      const sum = values.reduce((acc, val) => acc + val, 0);\n      console.log(\"Sum:\", sum); // Debugging\n      return sum;\n    }\n    let result;\n    const values = selectedRange.map(cell => parseFloat(cell) || 0); // Convert to numbers, default to 0\n\n    switch (funcType) {\n      case \"MAX\":\n        result = Math.max(...values);\n        break;\n      case \"MIN\":\n        result = Math.min(...values);\n        break;\n      case \"SUM\":\n        result = values.reduce((acc, val) => acc + val, 0);\n        break;\n      case \"AVG\":\n        result = values.length ? values.reduce((acc, val) => acc + val, 0) / values.length : 0;\n        break;\n      case \"COUNT\":\n        result = values.length;\n        break;\n      default:\n        return;\n    }\n    alert(`${funcType}: ${result}`); // Show result (You can also display it in a cell)\n  };\n\n  // to add \" Apply formula\" button to test functionality\n\n  const [testFormula, setTestFormula] = useState(\"\"); // User Input Formula\n  const [testResult, setTestResult] = useState(\"\"); // Result Display\n\n  const handleFormulaExecution = () => {\n    if (!testFormula.startsWith(\"=\")) {\n      setTestResult(\"Error: Formulas must start with '='\");\n      return;\n    }\n    const result = evaluateFormula(testFormula, cells);\n    setTestResult(`Result: ${result}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spreadsheet-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" Google Sheets Clone \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbar\",\n      style: {\n        display: \"flex\",\n        gap: \"5px\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyFunction(\"MAX\"),\n        children: [/*#__PURE__*/_jsxDEV(FaSortNumericUp, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 62\n        }, this), \" MAX\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyFunction(\"MIN\"),\n        children: [/*#__PURE__*/_jsxDEV(FaSortNumericDown, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 62\n        }, this), \" MIN\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyFunction(\"SUM\"),\n        children: [/*#__PURE__*/_jsxDEV(FaPlus, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 62\n        }, this), \" SUM\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyFunction(\"AVG\"),\n        children: [/*#__PURE__*/_jsxDEV(FaCalculator, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 62\n        }, this), \" AVG\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyFunction(\"COUNT\"),\n        children: [/*#__PURE__*/_jsxDEV(FaHashtag, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 64\n        }, this), \" COUNT\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyTextTransformation(\"UPPER\"),\n        children: \"\\uD83D\\uDD20 UPPER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyTextTransformation(\"LOWER\"),\n        children: \"\\uD83D\\uDD21 lower\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyTextTransformation(\"TRIM\"),\n        children: \"\\u2702\\uFE0F Trim\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: removeDuplicates,\n        children: \"Remove Duplicates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => findAndReplace(prompt(\"Find:\"), prompt(\"Replace with:\")),\n        children: \"Find & Replace\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Bold\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Italic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Underline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Align Left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Align Center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Align Right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-formula-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter formula (e.g., =SUM(A1:A5))\",\n        value: testFormula,\n        onChange: e => setTestFormula(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFormulaExecution,\n        children: \"Apply Formula\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 7\n    }, this), testResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"formula-result\",\n      children: testResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"formula-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"fx\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"formula-input\",\n        value: formula,\n        onChange: e => setFormula(e.target.value),\n        onKeyDown: e => e.key === \"Enter\" && applyFormula()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spreadsheet-container\",\n      onMouseUp: handleMouseUp,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sheet-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell header\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 9\n        }, this), Array.from({\n          length: 10\n        }, (_, col) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell header\",\n          children: String.fromCharCode(65 + col)\n        }, `col-${col}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 11\n        }, this)), Array.from({\n          length: 20\n        }, (_, row) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cell header\",\n            children: row + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 13\n          }, this), \" \", Array.from({\n            length: 10\n          }, (_, col) => {\n            var _cells$cellId;\n            const cellId = `${row}-${col}`;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cell - wrapper\",\n              onMouseEnter: () => handleMouseEnter(row, col),\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"cell\",\n                value: cells[cellId] || \"\",\n                onChange: e => handleChange(row, col, e.target.value),\n                onFocus: () => setSelectedCell(cellId),\n                \"data-formula\": (_cells$cellId = cells[cellId]) === null || _cells$cellId === void 0 ? void 0 : _cells$cellId.startsWith(\"=\")\n              }, cellId, false, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"drag-handle\",\n                onMouseDown: () => handleMouseDowm(row, col)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 560,\n                columnNumber: 17\n              }, this)]\n            }, cellId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 17\n            }, this);\n          })]\n        }, `row-${row}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 7\n      }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-display\",\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 474,\n    columnNumber: 5\n  }, this);\n};\n_s(Spreadsheet, \"0OFOfbLb/RLV/ot4fjPdtd8skNw=\");\n_c = Spreadsheet;\nexport default Spreadsheet;\nvar _c;\n$RefreshReg$(_c, \"Spreadsheet\");","map":{"version":3,"names":["React","useState","useEffect","FaPlus","FaSortNumericUp","FaSortNumericDown","FaCalculator","FaHashtag","Draggable","getSelectedRange","evaluate","create","all","trimCellValue","upperCaseCellValue","lowerCaseCellValue","removeDuplicates","findAndReplace","jsxDEV","_jsxDEV","config","math","import","UPPER","text","toUpperCase","Error","LOWER","toLowerCase","TRIM","trim","override","Spreadsheet","_s","rows","cols","cells","setCells","selectedCell","setSelectedCell","formula","setFormula","dragging","setDragging","startCell","setStartCell","trimFunction","value","upperFunction","lowerFunction","trimmedFormula","slice","getCellCoordinates","cellRef","col","charCodeAt","row","parseInt","substring","applyTextTransformation","type","currentValue","newValue","constructor","getCellValue","column","charAt","data","setCell","getCellRef","startsWith","evaluateFormula","String","fromCharCode","calculateSum","range","start","end","split","startRow","match","endRow","sum","Number","setData","Array","from","length","fill","dependencies","setDependencies","result","setResult","isFormula","uniqueRows","seen","Set","forEach","rowString","join","has","add","push","findText","replaceText","newData","map","cell","replace","RegExp","validateInput","isNaN","Date","parse","toISOString","getValuesFromRange","startCol","endCol","values","colIndex","undefined","parseFloat","error","console","parseFormula","regex","_","endCell","cellKey","applyFormula","selectedCells","Math","min","max","handleDragSelection","log","selectedRange","parseCellReference","cellData","expression","endsWith","_cellData$cellRef","_cellData$cellRef2","_cellData$cellRef3","_cellData$match","Function","parseRange","_data$row","i","updateCell","prevData","rowArr","handleCellChange","rowIndex","prevCells","updatedCells","_prevCells$r","r","c","handleChange","cellId","prev","func","refCell","refRow","refCol","refValue","handleMouseDowm","handleMouseUp","handleMouseEnter","handleTypeChange","applyFunction","funcType","funcName","reduce","acc","val","alert","testFormula","setTestFormula","testResult","setTestResult","handleFormulaExecution","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gap","alignItems","onClick","prompt","placeholder","onChange","e","target","onKeyDown","key","onMouseUp","Fragment","_cells$cellId","onMouseEnter","onFocus","onMouseDown","_c","$RefreshReg$"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/src/components/spreadSheet.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { FaPlus, FaSortNumericUp, FaSortNumericDown, FaCalculator, FaHashtag } from \"react-icons/fa\";\nimport Draggable from \"react-draggable\";\nimport { getSelectedRange } from \"../utils\";\n\nimport \"./spreadSheet.css\";\nimport '../App.css'; // Correct relative path\nimport { evaluate } from 'mathjs';\nimport { create, all } from \"mathjs\";\nimport { trimCellValue, upperCaseCellValue, lowerCaseCellValue, removeDuplicates, findAndReplace } from \"./dataQualityFunction\";\n\nconst config = { };\nconst math = create(all, config);\n\n\n// Define missing functions manually\nmath.import(\n  {\n    UPPER: function (text) {\n      if (typeof text === \"string\") return text.toUpperCase();\n      throw new Error(\"UPPER function expects a string input\");\n    },\n    LOWER: function (text) {\n      if (typeof text === \"string\") return text.toLowerCase();\n      throw new Error(\"LOWER function expects a string input\");\n    },\n    TRIM: function (text) {\n      if (typeof text === \"string\") return text.trim();\n      throw new Error(\"TRIM function expects a string input\");\n    },\n  },\n  { override: true }\n);\n\n\nconst Spreadsheet = () => {\n\nconst rows = 10;\nconst cols = 10;\n\nconst [cells, setCells] = useState({});\nconst [selectedCell, setSelectedCell] = useState(null);\nconst [formula, setFormula]= useState(\"\");\n\nconst [dragging,setDragging]=useState(false);\nconst [startCell, setStartCell]=useState(null);\n\n  const trimFunction = (value) => value.trim();\n  const upperFunction = (value) => value.toUpperCase();\n  const lowerFunction = (value) => value.toLowerCase();\n  const trimmedFormula = formula.slice(1).trim(); // Remove '='\n\n\n  // converts cell referances\n\n  const getCellCoordinates = (cellRef) => {\n    const col = cellRef.charCodeAt(0) - 65; // Convert 'A' to 0, 'B' to 1, etc.\n    const row = parseInt(cellRef.substring(1)) - 1; // Convert '3' to row index 2\n    return [row, col];\n};\n\n// create separate icon functions \n\nconst applyTextTransformation = (type) => {\n  if (!selectedCell) return; // If no cell is selected, do nothing\n\n  const currentValue = cells[selectedCell] || \"\";\n\n  let newValue = currentValue;\n  if (type === \"UPPER\") newValue = currentValue.toUpperCase();\n  if (type === \"LOWER\") newValue = currentValue.toLowerCase();\n  if (type === \"TRIM\") newValue = currentValue.trim();\n\n  setCells({ ...cells, [selectedCell]: newValue });\n};\n\n// Spreadsheet Class: Handles Data, Formulas, and Operations\nclass Spreadsheet \n{\n       constructor(rows, cols) {\n          this.rows = rows;\n          this.cols = cols;\n          this.data = {}; // Store cell values\n         }\n\n        // Set cell value (Handles formulas too)\n        setCell(row, col, value) \n        {\n        const cellRef = this.getCellRef(row, col);\n        if (typeof value === \"string\" && value.startsWith(\"=\")) {\n        this.data[cellRef] = this.evaluateFormula(value);\n        } else {\n                  this.data[cellRef] = value;\n                }\n        }\n\n      // Get cell reference (e.g., A1, B2)\n      getCellRef(row, col) \n      {\n      return String.fromCharCode(65 + col) + (row + 1);\n      }\n\n      // Get cell value\n      getCellValue = (cellRef) => \n      {\n      // Extract column letter and row number (e.g., \"A1\" -> \"A\", \"1\")\n      const column = cellRef.charAt(0);\n      const row = parseInt(cellRef.slice(1), 10) - 1;\n\n      // Assuming `cells` is your state for storing spreadsheet values\n      return cells[row] && cells[row][column] ? cells[row][column] : \"\";\n      };\n\n      // Evaluate formulas like =SUM(A1:A3), =UPPER(A1), =LOWER(A1), =TRIM(A1)\n      // Formula Evaluator (Fix for UPPER, LOWER, TRIM)\n    \n      // SUM Function: Calculates sum in a given range (e.g., SUM(A1:A3))\n      calculateSum(range) \n        {\n          const [start, end] = range.split(\":\");\n          const startRow = parseInt(start.match(/\\d+/)[0]) - 1;\n          const endRow = parseInt(end.match(/\\d+/)[0]) - 1;\n          const col = start[0];\n\n          let sum = 0;\n          for (let row = startRow; row <= endRow; row++) \n            {\n              const cellRef = col + (row + 1);\n              sum += Number(this.getCellValue(cellRef)) || 0;\n            }\n          return sum;\n        }\n\n      }\n\n        const [data, setData] = useState(\n          Array.from({ length: rows }, () => Array(cols).fill(\"\"))\n        );\n        \n  const [dependencies, setDependencies] = useState({});\n  const [result, setResult] = useState(null);\n\n  const isFormula = (value) => value.startsWith(\"=\");\n\n  const removeDuplicates = () => \n    {\n      const uniqueRows = [];\n      const seen = new Set();\n      data.forEach((row) => \n        {\n            const rowString = row.join(\"|\");\n            if (!seen.has(rowString)) \n            {\n            seen.add(rowString);\n            uniqueRows.push(row);\n            }\n        });\n    setData(uniqueRows);\n    };\n\n  const findAndReplace = (findText, replaceText) => \n    {\n    const newData = data.map(row => row.map(cell => cell.replace(new RegExp(findText, 'g'), replaceText)));\n    setData(newData);\n    };\n\n  const validateInput = (type, value) => {\n    if (type === \"number\") return !isNaN(value) ? value : \"\";\n    if (type === \"date\") return !isNaN(Date.parse(value)) ? new Date(value).toISOString().split(\"T\")[0] : \"\";\n    return value;\n  };\n\n  const getValuesFromRange = (range, data) => \n    {\n      try \n      {\n        let [start, end] = range.split(\":\"); // Example: \"A1:A3\"\n        let [startCol, startRow] = [start.charAt(0), parseInt(start.slice(1))];\n        let [endCol, endRow] = [end.charAt(0), parseInt(end.slice(1))];\n  \n        let values = [];\n        for (let row = startRow - 1; row <= endRow - 1; row++) {\n            let colIndex = startCol.charCodeAt(0) - \"A\".charCodeAt(0);\n            if (data[row] && data[row][colIndex] !== undefined) {\n                values.push(parseFloat(data[row][colIndex]) || 0); // Convert to number\n            }\n        }\n        return values;\n         } catch (error) {\n          console.error(\"Error parsing range:\", range, error);\n          return [];\n      };\n    }\n\n    // SUM parse function\n\n    const parseFormula = (formula, cells) => {\n      const regex = /=SUM\\((\\w+\\d+):(\\w+\\d+)\\)/; // Match range like A1:A3\n      const match = formula.match(regex);\n  \n      if (!match) {\n          return \"Formula Error!\";\n      }\n  \n      const [_, startCell, endCell] = match;\n      \n      const startCol = startCell[0]; // e.g., 'A'\n      const startRow = parseInt(startCell.slice(1), 10); // e.g., 1\n      const endRow = parseInt(endCell.slice(1), 10); // e.g., 3\n  \n      let sum = 0;\n      \n      for (let row = startRow; row <= endRow; row++) {\n          const cellKey = `${startCol}${row}`; // e.g., A1, A2, A3\n          sum += cells[cellKey] ? parseFloat(cells[cellKey]) || 0 : 0;\n      }\n  \n      return sum;\n  };\n    // apply formula\n    \n    const applyFormula = (formula, cells) => {\n      if (formula.startsWith(\"=\")) {\n          return parseFormula(formula, cells);\n      }\n      return \"Formula Error!\";\n  };  \n\n    // getselectedrange function\n\n    const getSelectedRange = (startCell, endCell) => {\n      const [startRow, startCol] = startCell.split(\"-\").map(Number);\n      const [endRow, endCol] = endCell.split(\"-\").map(Number);\n  \n      let selectedCells = [];\n  \n      for (let row = Math.min(startRow, endRow); row <= Math.max(startRow, endRow); row++) {\n          for (let col = Math.min(startCol, endCol); col <= Math.max(startCol, endCol); col++) {\n              selectedCells.push(`${row}-${col}`);\n          }\n      }\n  \n      return selectedCells;\n\n  };\n\n  // use of getselecterange to drag function \n\n  const handleDragSelection = (startCell, endCell) => {\n    console.log(selectedCells, cells);\n    const selectedRange = getSelectedRange(startCell, endCell);\n    console.log(\"Selected Cells:\", selectedRange);\n};\n\n\n    const parseCellReference = (cellRef) => {\n      const match = cellRef.match(/^([A-Z]+)([0-9]+)$/);\n      if (!match) return null;\n      return { col: match[1], row: parseInt(match[2], 10) - 1 };\n  };\n  \n  const evaluateFormula = (formula, cellData) => {\n      try {\n          if (typeof formula !== \"string\") return \"Invalid Input!\";\n          if (!formula.startsWith(\"=\")) return formula; // If not a formula, return as-is\n  \n          let expression = formula.substring(1); // Remove \"=\"\n  \n          // Handle UPPER function\n          if (expression.startsWith(\"UPPER(\") && expression.endsWith(\")\")) {\n              let cellRef = expression.slice(6, -1).trim();\n              return cellData[cellRef]?.toUpperCase() || \"Error!\";\n          }\n  \n          // Handle LOWER function\n          if (expression.startsWith(\"LOWER(\") && expression.endsWith(\")\")) {\n              let cellRef = expression.slice(6, -1).trim();\n              return cellData[cellRef]?.toLowerCase() || \"Error!\";\n          }\n  \n          // Handle TRIM function\n          if (expression.startsWith(\"TRIM(\") && expression.endsWith(\")\")) {\n              let cellRef = expression.slice(5, -1).trim();\n              return cellData[cellRef]?.trim() || \"Error!\";\n          }\n  \n          // General formula evaluation\n          expression = expression.replace(/([A-Z]+[0-9]+)/g, (match) => {\n              const { row, col } = parseCellReference(match);\n              return cellData[match] ?? 0; // Use `match` directly as key for `cellData`\n          });\n  \n          return Function(`\"use strict\"; return (${expression});`)();\n      } catch (error) {\n          return \"Formula Error!\";\n      }\n  };\n  \nconst parseRange = (range, data) => {\n    const [start, end] = range.split(\":\");\n    let cells = [];\n\n    const getCellValue = (cell) => {\n        const col = cell.charCodeAt(0) - 65; // Convert 'A' to 0, 'B' to 1, etc.\n        const row = parseInt(cell.substring(1)) - 1;\n        return parseFloat(data[row]?.[col]) || 0; // Ensure numeric values\n       \n    };\n\n    if (start && end) {\n        const startRow = parseInt(start.substring(1)) - 1;\n        const endRow = parseInt(end.substring(1)) - 1;\n        const col = start.charCodeAt(0) - 65;\n\n        for (let i = startRow; i <= endRow; i++) {\n            cells.push(getCellValue(`${String.fromCharCode(65 + col)}${i + 1}`));\n\n        }\n    }\n    console.log(`Parsed range ${range}:`, cells);\n    return cells;\n};\n\nconst updateCell = (row, col, value) => \n  {\n    setData(prevData => {\n      const newData = prevData.map(rowArr => [...rowArr]); // Deep copy of array\n      newData[row][col] = value;\n      return newData;\n    });\n  };\n\n  const handleCellChange = (rowIndex, colIndex, value, setCells) => {\n    setCells((prevCells) => {\n        const updatedCells = [...prevCells];\n        const cellRef = `${rowIndex}-${colIndex}`;\n        updatedCells[rowIndex][colIndex] = evaluateFormula(value, (cellRef) => {\n            const [r, c] = parseCellReference(cellRef);\n            return prevCells[r]?.[c] || \"\";\n        });\n        return updatedCells;\n    });\n};\n\n\nconst handleChange = (row, col, value) => {\n  const cellId = `${row}-${col}`;\n  setCells((prev) => ({ ...prev,[cellId]:value}));\n  console.log(`Cell (${row}, ${col}) changed to: ${value}`);\n  let newValue = value ;\n\n  \n  // Detect if it's a formula (starts with `=`)\n  if (value.startsWith(\"=\")) {\n      console.log(`Formula detected in cell (${row}, ${col}): ${value}`);\n      newValue = evaluateFormula(value, cells);}\n\n      setCells(prev => ({ ...prev, [`${row}-${col}`]: newValue}));\n      setResult(`Updated cell (${row + 1}, ${col + 1}) with : ${newValue}`);\n  \n\n      const formula = value.substring(1); // Remove `=`\n      const match = formula.match(/(\\w+)\\((\\w+\\d+)\\)/); // Match \"UPPER(A3)\"\n\n      if (match) {\n          const [_, func, refCell] = match;\n          const [refRow, refCol] = getCellCoordinates(refCell); // Convert A3 -> (row, col)\n          const refValue = cells[`${refRow}-${refCol}`] || \"\"; // Get referenced cell value\n\n          // Apply function\n          let newValue = refValue;\n          if (func === \"UPPER\") newValue = refValue.toUpperCase();\n          if (func === \"LOWER\") newValue = refValue.toLowerCase();\n          if (func === \"TRIM\") newValue = refValue.trim();\n\n          console.log(`Applying ${func} to ${refCell}:`, newValue);\n          setCells({ ...cells, [cellId]: newValue });\n          return;\n      }\n\n  // Otherwise, store normal value\n  setCells({ ...cells, [cellId]: value });\n\n};\n\n// handle dragging\n\nconst handleMouseDowm = (row, col)=> {\n  setDragging(true);\n  setStartCell({row,col,value:cells[`${row}-${col}`]|| \"\"});\n}\n\nconst handleMouseUp = () =>{\n  setDragging(false);\n};\n\nconst handleMouseEnter = (row,col) => {\n  if(dragging && startCell){\n    // Fill cells dynamically during drag\n    const cellId = `${row}-${col}`;\n    setCells((prev) => ({...prev,[cellId]: startCell.value,}));\n  }\n};\n\n  const handleTypeChange = (row, col, type) => {\n    setData(prevData => {\n      const newData = prevData.map(rowArr => [...rowArr]); // Deep copy\n      newData[row][col] = validateInput(type, newData[row][col]); // Apply validation\n      return newData;\n    });\n  };\n\n\n  // to MIN MAX function\n\n  const applyFunction = (funcType, cells, selectedCells) => {\n    console.log(selectedCells, cells);\n    const selectedRange = getSelectedRange(cells, selectedCells); // Implement logic to get the selected cells\n\n    if (!selectedRange.length) return;\n\n    if (funcName === \"SUM\") {\n      console.log(selectedCells, cells);\n      const values = getSelectedRange(cells, selectedCells);\n      const sum = values.reduce((acc, val) => acc + val, 0);\n      console.log(\"Sum:\", sum);  // Debugging\n      return sum;\n  }\n\n  \n    let result;\n    const values = selectedRange.map(cell => parseFloat(cell) || 0); // Convert to numbers, default to 0\n  \n    switch (funcType) {\n        case \"MAX\":\n            result = Math.max(...values);\n            break;\n        case \"MIN\":\n            result = Math.min(...values);\n            break;\n        case \"SUM\":\n            result = values.reduce((acc, val) => acc + val, 0);\n            break;\n        case \"AVG\":\n            result = values.length ? (values.reduce((acc, val) => acc + val, 0) / values.length) : 0;\n            break;\n        case \"COUNT\":\n            result = values.length;\n            break;\n        default:\n            return;\n    }\n  \n    alert(`${funcType}: ${result}`); // Show result (You can also display it in a cell)\n  };  \n\n  // to add \" Apply formula\" button to test functionality\n  \nconst [testFormula, setTestFormula] = useState(\"\"); // User Input Formula\nconst [testResult, setTestResult] = useState(\"\");   // Result Display\n\nconst handleFormulaExecution = () => {\n    if (!testFormula.startsWith(\"=\")) {\n        setTestResult(\"Error: Formulas must start with '='\");\n        return;\n    }\n\n    const result = evaluateFormula(testFormula, cells);\n    setTestResult(`Result: ${result}`);\n};\n\n\n  return (\n    <div className=\"spreadsheet-container\">\n      <h2> Google Sheets Clone </h2>\n\n                <div className=\"toolbar\" style={{display: \"flex\" , gap: \"5px\", alignItems: \"center\"}}>\n\n                <button onClick={() => applyFunction(\"MAX\")}><FaSortNumericUp /> MAX</button>\n                <button onClick={() => applyFunction(\"MIN\")}><FaSortNumericDown /> MIN</button>\n                <button onClick={() => applyFunction(\"SUM\")}><FaPlus /> SUM</button>\n                <button onClick={() => applyFunction(\"AVG\")}><FaCalculator /> AVG</button>\n                <button onClick={() => applyFunction(\"COUNT\")}><FaHashtag /> COUNT</button>\n\n\n                <button onClick={() => applyTextTransformation(\"UPPER\")}>🔠 UPPER</button>\n                <button onClick={() => applyTextTransformation(\"LOWER\")}>🔡 lower</button>\n                <button onClick={() => applyTextTransformation(\"TRIM\")}>✂️ Trim</button>\n\n                <button onClick={removeDuplicates}>Remove Duplicates</button>\n                <button onClick={() => findAndReplace(prompt(\"Find:\"), prompt(\"Replace with:\"))}>Find & Replace</button>\n                <button>Bold</button>\n                <button>Italic</button>\n                <button>Underline</button>\n                <button>Align Left</button>\n                <button>Align Center</button>\n                <button>Align Right</button>\n\n                </div>\n\n      <div className=\"test-formula-section\">\n        <input\n        type=\"text\"\n        placeholder=\"Enter formula (e.g., =SUM(A1:A5))\"\n        value={testFormula}\n        onChange={(e) => setTestFormula(e.target.value)}\n         />\n        <button onClick={handleFormulaExecution}>Apply Formula</button>\n      </div>\n\n      {/* Display Execution Result */}\n      {testResult && <div className=\"formula-result\">{testResult}</div>}\n\n      {/* Formula Bar */}\n      <div className=\"formula-bar\">\n        <span>fx</span>\n        <input\n          className=\"formula-input\"\n          value={formula}\n          onChange={(e) => setFormula(e.target.value)}\n          onKeyDown={(e) => e.key === \"Enter\" && applyFormula()}\n        />\n      </div>\n\n      <div className=\"spreadsheet-container\" onMouseUp={handleMouseUp}>\n\n      {/* Spreadsheet Grid */}\n      <div className=\"sheet-grid\">\n        {/* Column Headers (A, B, C, ...) */}\n        <div className=\"cell header\"></div> \n        {/* Empty corner */}\n        {Array.from({ length: 10 }, (_, col) => (\n          <div key={`col-${col}`} className=\"cell header\">\n            {String.fromCharCode(65 + col)}\n          </div>\n        ))}\n\n        {/* Rows */}\n        {Array.from({ length: 20 }, (_, row) => (\n          <React.Fragment key={`row-${row}`}>\n            <div className=\"cell header\">{row + 1}</div> {/* Row Numbers */}\n            {Array.from({ length: 10 }, (_, col) => {\n              const cellId = `${row}-${col}`;\n              return (\n                <div\n                 key={cellId}\n                 className=\"cell - wrapper\"\n                  onMouseEnter={() => handleMouseEnter(row, col)}\n                >\n\n                <input\n                  key={cellId}\n                  className=\"cell\"\n                  value={cells[cellId] || \"\"}\n                  onChange={(e) => handleChange(row, col, e.target.value)}\n                  onFocus={() => setSelectedCell(cellId)}\n                  data-formula = {cells[cellId]?.startsWith(\"=\")}\n                />\n                {/* drag handle */}\n                <div\n                className=\"drag-handle\"\n                onMouseDown={() => handleMouseDowm(row, col)}\n                ></div>\n                </div>\n              );\n            })}\n          </React.Fragment>\n        ))}\n      </div>\n\n      {result && <div className=\"result-display\">{result}</div>}\n    </div> \n    </div>\n    \n);\n};\n\nexport default Spreadsheet;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,EAAEC,eAAe,EAAEC,iBAAiB,EAAEC,YAAY,EAAEC,SAAS,QAAQ,gBAAgB;AACpG,OAAOC,SAAS,MAAM,iBAAiB;AACvC,SAASC,gBAAgB,QAAQ,UAAU;AAE3C,OAAO,mBAAmB;AAC1B,OAAO,YAAY,CAAC,CAAC;AACrB,SAASC,QAAQ,QAAQ,QAAQ;AACjC,SAASC,MAAM,EAAEC,GAAG,QAAQ,QAAQ;AACpC,SAASC,aAAa,EAAEC,kBAAkB,EAAEC,kBAAkB,EAAEC,gBAAgB,EAAEC,cAAc,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhI,MAAMC,MAAM,GAAG,CAAE,CAAC;AAClB,MAAMC,IAAI,GAAGV,MAAM,CAACC,GAAG,EAAEQ,MAAM,CAAC;;AAGhC;AACAC,IAAI,CAACC,MAAM,CACT;EACEC,KAAK,EAAE,SAAAA,CAAUC,IAAI,EAAE;IACrB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE,OAAOA,IAAI,CAACC,WAAW,CAAC,CAAC;IACvD,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;EAC1D,CAAC;EACDC,KAAK,EAAE,SAAAA,CAAUH,IAAI,EAAE;IACrB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE,OAAOA,IAAI,CAACI,WAAW,CAAC,CAAC;IACvD,MAAM,IAAIF,KAAK,CAAC,uCAAuC,CAAC;EAC1D,CAAC;EACDG,IAAI,EAAE,SAAAA,CAAUL,IAAI,EAAE;IACpB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE,OAAOA,IAAI,CAACM,IAAI,CAAC,CAAC;IAChD,MAAM,IAAIJ,KAAK,CAAC,sCAAsC,CAAC;EACzD;AACF,CAAC,EACD;EAAEK,QAAQ,EAAE;AAAK,CACnB,CAAC;AAGD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE1B,MAAMC,IAAI,GAAG,EAAE;EACf,MAAMC,IAAI,GAAG,EAAE;EAEf,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGpC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtC,MAAM,CAACqC,YAAY,EAAEC,eAAe,CAAC,GAAGtC,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACuC,OAAO,EAAEC,UAAU,CAAC,GAAExC,QAAQ,CAAC,EAAE,CAAC;EAEzC,MAAM,CAACyC,QAAQ,EAACC,WAAW,CAAC,GAAC1C,QAAQ,CAAC,KAAK,CAAC;EAC5C,MAAM,CAAC2C,SAAS,EAAEC,YAAY,CAAC,GAAC5C,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAM6C,YAAY,GAAIC,KAAK,IAAKA,KAAK,CAACjB,IAAI,CAAC,CAAC;EAC5C,MAAMkB,aAAa,GAAID,KAAK,IAAKA,KAAK,CAACtB,WAAW,CAAC,CAAC;EACpD,MAAMwB,aAAa,GAAIF,KAAK,IAAKA,KAAK,CAACnB,WAAW,CAAC,CAAC;EACpD,MAAMsB,cAAc,GAAGV,OAAO,CAACW,KAAK,CAAC,CAAC,CAAC,CAACrB,IAAI,CAAC,CAAC,CAAC,CAAC;;EAGhD;;EAEA,MAAMsB,kBAAkB,GAAIC,OAAO,IAAK;IACtC,MAAMC,GAAG,GAAGD,OAAO,CAACE,UAAU,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IACxC,MAAMC,GAAG,GAAGC,QAAQ,CAACJ,OAAO,CAACK,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAChD,OAAO,CAACF,GAAG,EAAEF,GAAG,CAAC;EACrB,CAAC;;EAED;;EAEA,MAAMK,uBAAuB,GAAIC,IAAI,IAAK;IACxC,IAAI,CAACtB,YAAY,EAAE,OAAO,CAAC;;IAE3B,MAAMuB,YAAY,GAAGzB,KAAK,CAACE,YAAY,CAAC,IAAI,EAAE;IAE9C,IAAIwB,QAAQ,GAAGD,YAAY;IAC3B,IAAID,IAAI,KAAK,OAAO,EAAEE,QAAQ,GAAGD,YAAY,CAACpC,WAAW,CAAC,CAAC;IAC3D,IAAImC,IAAI,KAAK,OAAO,EAAEE,QAAQ,GAAGD,YAAY,CAACjC,WAAW,CAAC,CAAC;IAC3D,IAAIgC,IAAI,KAAK,MAAM,EAAEE,QAAQ,GAAGD,YAAY,CAAC/B,IAAI,CAAC,CAAC;IAEnDO,QAAQ,CAAC;MAAE,GAAGD,KAAK;MAAE,CAACE,YAAY,GAAGwB;IAAS,CAAC,CAAC;EAClD,CAAC;;EAED;EACA,MAAM9B,WAAW,CACjB;IACO+B,WAAWA,CAAC7B,IAAI,EAAEC,IAAI,EAAE;MAuBzB;MAAA,KACA6B,YAAY,GAAIX,OAAO,IACvB;QACA;QACA,MAAMY,MAAM,GAAGZ,OAAO,CAACa,MAAM,CAAC,CAAC,CAAC;QAChC,MAAMV,GAAG,GAAGC,QAAQ,CAACJ,OAAO,CAACF,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC;;QAE9C;QACA,OAAOf,KAAK,CAACoB,GAAG,CAAC,IAAIpB,KAAK,CAACoB,GAAG,CAAC,CAACS,MAAM,CAAC,GAAG7B,KAAK,CAACoB,GAAG,CAAC,CAACS,MAAM,CAAC,GAAG,EAAE;MACjE,CAAC;MA/BG,IAAI,CAAC/B,IAAI,GAAGA,IAAI;MAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;MAChB,IAAI,CAACgC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;IACjB;;IAED;IACAC,OAAOA,CAACZ,GAAG,EAAEF,GAAG,EAAEP,KAAK,EACvB;MACA,MAAMM,OAAO,GAAG,IAAI,CAACgB,UAAU,CAACb,GAAG,EAAEF,GAAG,CAAC;MACzC,IAAI,OAAOP,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACuB,UAAU,CAAC,GAAG,CAAC,EAAE;QACxD,IAAI,CAACH,IAAI,CAACd,OAAO,CAAC,GAAG,IAAI,CAACkB,eAAe,CAACxB,KAAK,CAAC;MAChD,CAAC,MAAM;QACG,IAAI,CAACoB,IAAI,CAACd,OAAO,CAAC,GAAGN,KAAK;MAC5B;IACR;;IAEF;IACAsB,UAAUA,CAACb,GAAG,EAAEF,GAAG,EACnB;MACA,OAAOkB,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGnB,GAAG,CAAC,IAAIE,GAAG,GAAG,CAAC,CAAC;IAChD;IAaA;IACA;;IAEA;IACAkB,YAAYA,CAACC,KAAK,EAChB;MACE,MAAM,CAACC,KAAK,EAAEC,GAAG,CAAC,GAAGF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC;MACrC,MAAMC,QAAQ,GAAGtB,QAAQ,CAACmB,KAAK,CAACI,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;MACpD,MAAMC,MAAM,GAAGxB,QAAQ,CAACoB,GAAG,CAACG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;MAChD,MAAM1B,GAAG,GAAGsB,KAAK,CAAC,CAAC,CAAC;MAEpB,IAAIM,GAAG,GAAG,CAAC;MACX,KAAK,IAAI1B,GAAG,GAAGuB,QAAQ,EAAEvB,GAAG,IAAIyB,MAAM,EAAEzB,GAAG,EAAE,EAC3C;QACE,MAAMH,OAAO,GAAGC,GAAG,IAAIE,GAAG,GAAG,CAAC,CAAC;QAC/B0B,GAAG,IAAIC,MAAM,CAAC,IAAI,CAACnB,YAAY,CAACX,OAAO,CAAC,CAAC,IAAI,CAAC;MAChD;MACF,OAAO6B,GAAG;IACZ;EAEF;EAEE,MAAM,CAACf,IAAI,EAAEiB,OAAO,CAAC,GAAGnF,QAAQ,CAC9BoF,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAErD;EAAK,CAAC,EAAE,MAAMmD,KAAK,CAAClD,IAAI,CAAC,CAACqD,IAAI,CAAC,EAAE,CAAC,CACzD,CAAC;EAEP,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGzF,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAAC0F,MAAM,EAAEC,SAAS,CAAC,GAAG3F,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAM4F,SAAS,GAAI9C,KAAK,IAAKA,KAAK,CAACuB,UAAU,CAAC,GAAG,CAAC;EAElD,MAAMtD,gBAAgB,GAAGA,CAAA,KACvB;IACE,MAAM8E,UAAU,GAAG,EAAE;IACrB,MAAMC,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;IACtB7B,IAAI,CAAC8B,OAAO,CAAEzC,GAAG,IACf;MACI,MAAM0C,SAAS,GAAG1C,GAAG,CAAC2C,IAAI,CAAC,GAAG,CAAC;MAC/B,IAAI,CAACJ,IAAI,CAACK,GAAG,CAACF,SAAS,CAAC,EACxB;QACAH,IAAI,CAACM,GAAG,CAACH,SAAS,CAAC;QACnBJ,UAAU,CAACQ,IAAI,CAAC9C,GAAG,CAAC;MACpB;IACJ,CAAC,CAAC;IACN4B,OAAO,CAACU,UAAU,CAAC;EACnB,CAAC;EAEH,MAAM7E,cAAc,GAAGA,CAACsF,QAAQ,EAAEC,WAAW,KAC3C;IACA,MAAMC,OAAO,GAAGtC,IAAI,CAACuC,GAAG,CAAClD,GAAG,IAAIA,GAAG,CAACkD,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,OAAO,CAAC,IAAIC,MAAM,CAACN,QAAQ,EAAE,GAAG,CAAC,EAAEC,WAAW,CAAC,CAAC,CAAC;IACtGpB,OAAO,CAACqB,OAAO,CAAC;EAChB,CAAC;EAEH,MAAMK,aAAa,GAAGA,CAAClD,IAAI,EAAEb,KAAK,KAAK;IACrC,IAAIa,IAAI,KAAK,QAAQ,EAAE,OAAO,CAACmD,KAAK,CAAChE,KAAK,CAAC,GAAGA,KAAK,GAAG,EAAE;IACxD,IAAIa,IAAI,KAAK,MAAM,EAAE,OAAO,CAACmD,KAAK,CAACC,IAAI,CAACC,KAAK,CAAClE,KAAK,CAAC,CAAC,GAAG,IAAIiE,IAAI,CAACjE,KAAK,CAAC,CAACmE,WAAW,CAAC,CAAC,CAACpC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;IACxG,OAAO/B,KAAK;EACd,CAAC;EAED,MAAMoE,kBAAkB,GAAGA,CAACxC,KAAK,EAAER,IAAI,KACrC;IACE,IACA;MACE,IAAI,CAACS,KAAK,EAAEC,GAAG,CAAC,GAAGF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;MACrC,IAAI,CAACsC,QAAQ,EAAErC,QAAQ,CAAC,GAAG,CAACH,KAAK,CAACV,MAAM,CAAC,CAAC,CAAC,EAAET,QAAQ,CAACmB,KAAK,CAACzB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;MACtE,IAAI,CAACkE,MAAM,EAAEpC,MAAM,CAAC,GAAG,CAACJ,GAAG,CAACX,MAAM,CAAC,CAAC,CAAC,EAAET,QAAQ,CAACoB,GAAG,CAAC1B,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;MAE9D,IAAImE,MAAM,GAAG,EAAE;MACf,KAAK,IAAI9D,GAAG,GAAGuB,QAAQ,GAAG,CAAC,EAAEvB,GAAG,IAAIyB,MAAM,GAAG,CAAC,EAAEzB,GAAG,EAAE,EAAE;QACnD,IAAI+D,QAAQ,GAAGH,QAAQ,CAAC7D,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,CAACA,UAAU,CAAC,CAAC,CAAC;QACzD,IAAIY,IAAI,CAACX,GAAG,CAAC,IAAIW,IAAI,CAACX,GAAG,CAAC,CAAC+D,QAAQ,CAAC,KAAKC,SAAS,EAAE;UAChDF,MAAM,CAAChB,IAAI,CAACmB,UAAU,CAACtD,IAAI,CAACX,GAAG,CAAC,CAAC+D,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACvD;MACJ;MACA,OAAOD,MAAM;IACZ,CAAC,CAAC,OAAOI,KAAK,EAAE;MACfC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAE/C,KAAK,EAAE+C,KAAK,CAAC;MACnD,OAAO,EAAE;IACb;IAAC;EACH,CAAC;;EAED;;EAEA,MAAME,YAAY,GAAGA,CAACpF,OAAO,EAAEJ,KAAK,KAAK;IACvC,MAAMyF,KAAK,GAAG,2BAA2B,CAAC,CAAC;IAC3C,MAAM7C,KAAK,GAAGxC,OAAO,CAACwC,KAAK,CAAC6C,KAAK,CAAC;IAElC,IAAI,CAAC7C,KAAK,EAAE;MACR,OAAO,gBAAgB;IAC3B;IAEA,MAAM,CAAC8C,CAAC,EAAElF,SAAS,EAAEmF,OAAO,CAAC,GAAG/C,KAAK;IAErC,MAAMoC,QAAQ,GAAGxE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/B,MAAMmC,QAAQ,GAAGtB,QAAQ,CAACb,SAAS,CAACO,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACnD,MAAM8B,MAAM,GAAGxB,QAAQ,CAACsE,OAAO,CAAC5E,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;IAE/C,IAAI+B,GAAG,GAAG,CAAC;IAEX,KAAK,IAAI1B,GAAG,GAAGuB,QAAQ,EAAEvB,GAAG,IAAIyB,MAAM,EAAEzB,GAAG,EAAE,EAAE;MAC3C,MAAMwE,OAAO,GAAG,GAAGZ,QAAQ,GAAG5D,GAAG,EAAE,CAAC,CAAC;MACrC0B,GAAG,IAAI9C,KAAK,CAAC4F,OAAO,CAAC,GAAGP,UAAU,CAACrF,KAAK,CAAC4F,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;IAC/D;IAEA,OAAO9C,GAAG;EACd,CAAC;EACC;;EAEA,MAAM+C,YAAY,GAAGA,CAACzF,OAAO,EAAEJ,KAAK,KAAK;IACvC,IAAII,OAAO,CAAC8B,UAAU,CAAC,GAAG,CAAC,EAAE;MACzB,OAAOsD,YAAY,CAACpF,OAAO,EAAEJ,KAAK,CAAC;IACvC;IACA,OAAO,gBAAgB;EAC3B,CAAC;;EAEC;;EAEA,MAAM3B,gBAAgB,GAAGA,CAACmC,SAAS,EAAEmF,OAAO,KAAK;IAC/C,MAAM,CAAChD,QAAQ,EAAEqC,QAAQ,CAAC,GAAGxE,SAAS,CAACkC,KAAK,CAAC,GAAG,CAAC,CAAC4B,GAAG,CAACvB,MAAM,CAAC;IAC7D,MAAM,CAACF,MAAM,EAAEoC,MAAM,CAAC,GAAGU,OAAO,CAACjD,KAAK,CAAC,GAAG,CAAC,CAAC4B,GAAG,CAACvB,MAAM,CAAC;IAEvD,IAAI+C,aAAa,GAAG,EAAE;IAEtB,KAAK,IAAI1E,GAAG,GAAG2E,IAAI,CAACC,GAAG,CAACrD,QAAQ,EAAEE,MAAM,CAAC,EAAEzB,GAAG,IAAI2E,IAAI,CAACE,GAAG,CAACtD,QAAQ,EAAEE,MAAM,CAAC,EAAEzB,GAAG,EAAE,EAAE;MACjF,KAAK,IAAIF,GAAG,GAAG6E,IAAI,CAACC,GAAG,CAAChB,QAAQ,EAAEC,MAAM,CAAC,EAAE/D,GAAG,IAAI6E,IAAI,CAACE,GAAG,CAACjB,QAAQ,EAAEC,MAAM,CAAC,EAAE/D,GAAG,EAAE,EAAE;QACjF4E,aAAa,CAAC5B,IAAI,CAAC,GAAG9C,GAAG,IAAIF,GAAG,EAAE,CAAC;MACvC;IACJ;IAEA,OAAO4E,aAAa;EAExB,CAAC;;EAED;;EAEA,MAAMI,mBAAmB,GAAGA,CAAC1F,SAAS,EAAEmF,OAAO,KAAK;IAClDJ,OAAO,CAACY,GAAG,CAACL,aAAa,EAAE9F,KAAK,CAAC;IACjC,MAAMoG,aAAa,GAAG/H,gBAAgB,CAACmC,SAAS,EAAEmF,OAAO,CAAC;IAC1DJ,OAAO,CAACY,GAAG,CAAC,iBAAiB,EAAEC,aAAa,CAAC;EACjD,CAAC;EAGG,MAAMC,kBAAkB,GAAIpF,OAAO,IAAK;IACtC,MAAM2B,KAAK,GAAG3B,OAAO,CAAC2B,KAAK,CAAC,oBAAoB,CAAC;IACjD,IAAI,CAACA,KAAK,EAAE,OAAO,IAAI;IACvB,OAAO;MAAE1B,GAAG,EAAE0B,KAAK,CAAC,CAAC,CAAC;MAAExB,GAAG,EAAEC,QAAQ,CAACuB,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG;IAAE,CAAC;EAC7D,CAAC;EAED,MAAMT,eAAe,GAAGA,CAAC/B,OAAO,EAAEkG,QAAQ,KAAK;IAC3C,IAAI;MACA,IAAI,OAAOlG,OAAO,KAAK,QAAQ,EAAE,OAAO,gBAAgB;MACxD,IAAI,CAACA,OAAO,CAAC8B,UAAU,CAAC,GAAG,CAAC,EAAE,OAAO9B,OAAO,CAAC,CAAC;;MAE9C,IAAImG,UAAU,GAAGnG,OAAO,CAACkB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;;MAEvC;MACA,IAAIiF,UAAU,CAACrE,UAAU,CAAC,QAAQ,CAAC,IAAIqE,UAAU,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAAA,IAAAC,iBAAA;QAC7D,IAAIxF,OAAO,GAAGsF,UAAU,CAACxF,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACrB,IAAI,CAAC,CAAC;QAC5C,OAAO,EAAA+G,iBAAA,GAAAH,QAAQ,CAACrF,OAAO,CAAC,cAAAwF,iBAAA,uBAAjBA,iBAAA,CAAmBpH,WAAW,CAAC,CAAC,KAAI,QAAQ;MACvD;;MAEA;MACA,IAAIkH,UAAU,CAACrE,UAAU,CAAC,QAAQ,CAAC,IAAIqE,UAAU,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAAA,IAAAE,kBAAA;QAC7D,IAAIzF,OAAO,GAAGsF,UAAU,CAACxF,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACrB,IAAI,CAAC,CAAC;QAC5C,OAAO,EAAAgH,kBAAA,GAAAJ,QAAQ,CAACrF,OAAO,CAAC,cAAAyF,kBAAA,uBAAjBA,kBAAA,CAAmBlH,WAAW,CAAC,CAAC,KAAI,QAAQ;MACvD;;MAEA;MACA,IAAI+G,UAAU,CAACrE,UAAU,CAAC,OAAO,CAAC,IAAIqE,UAAU,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAAA,IAAAG,kBAAA;QAC5D,IAAI1F,OAAO,GAAGsF,UAAU,CAACxF,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACrB,IAAI,CAAC,CAAC;QAC5C,OAAO,EAAAiH,kBAAA,GAAAL,QAAQ,CAACrF,OAAO,CAAC,cAAA0F,kBAAA,uBAAjBA,kBAAA,CAAmBjH,IAAI,CAAC,CAAC,KAAI,QAAQ;MAChD;;MAEA;MACA6G,UAAU,GAAGA,UAAU,CAAC/B,OAAO,CAAC,iBAAiB,EAAG5B,KAAK,IAAK;QAAA,IAAAgE,eAAA;QAC1D,MAAM;UAAExF,GAAG;UAAEF;QAAI,CAAC,GAAGmF,kBAAkB,CAACzD,KAAK,CAAC;QAC9C,QAAAgE,eAAA,GAAON,QAAQ,CAAC1D,KAAK,CAAC,cAAAgE,eAAA,cAAAA,eAAA,GAAI,CAAC,CAAC,CAAC;MACjC,CAAC,CAAC;MAEF,OAAOC,QAAQ,CAAC,yBAAyBN,UAAU,IAAI,CAAC,CAAC,CAAC;IAC9D,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACZ,OAAO,gBAAgB;IAC3B;EACJ,CAAC;EAEH,MAAMwB,UAAU,GAAGA,CAACvE,KAAK,EAAER,IAAI,KAAK;IAChC,MAAM,CAACS,KAAK,EAAEC,GAAG,CAAC,GAAGF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC;IACrC,IAAI1C,KAAK,GAAG,EAAE;IAEd,MAAM4B,YAAY,GAAI2C,IAAI,IAAK;MAAA,IAAAwC,SAAA;MAC3B,MAAM7F,GAAG,GAAGqD,IAAI,CAACpD,UAAU,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;MACrC,MAAMC,GAAG,GAAGC,QAAQ,CAACkD,IAAI,CAACjD,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;MAC3C,OAAO+D,UAAU,EAAA0B,SAAA,GAAChF,IAAI,CAACX,GAAG,CAAC,cAAA2F,SAAA,uBAATA,SAAA,CAAY7F,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAE9C,CAAC;IAED,IAAIsB,KAAK,IAAIC,GAAG,EAAE;MACd,MAAME,QAAQ,GAAGtB,QAAQ,CAACmB,KAAK,CAAClB,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;MACjD,MAAMuB,MAAM,GAAGxB,QAAQ,CAACoB,GAAG,CAACnB,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;MAC7C,MAAMJ,GAAG,GAAGsB,KAAK,CAACrB,UAAU,CAAC,CAAC,CAAC,GAAG,EAAE;MAEpC,KAAK,IAAI6F,CAAC,GAAGrE,QAAQ,EAAEqE,CAAC,IAAInE,MAAM,EAAEmE,CAAC,EAAE,EAAE;QACrChH,KAAK,CAACkE,IAAI,CAACtC,YAAY,CAAC,GAAGQ,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGnB,GAAG,CAAC,GAAG8F,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;MAExE;IACJ;IACAzB,OAAO,CAACY,GAAG,CAAC,gBAAgB5D,KAAK,GAAG,EAAEvC,KAAK,CAAC;IAC5C,OAAOA,KAAK;EAChB,CAAC;EAED,MAAMiH,UAAU,GAAGA,CAAC7F,GAAG,EAAEF,GAAG,EAAEP,KAAK,KACjC;IACEqC,OAAO,CAACkE,QAAQ,IAAI;MAClB,MAAM7C,OAAO,GAAG6C,QAAQ,CAAC5C,GAAG,CAAC6C,MAAM,IAAI,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC,CAAC;MACrD9C,OAAO,CAACjD,GAAG,CAAC,CAACF,GAAG,CAAC,GAAGP,KAAK;MACzB,OAAO0D,OAAO;IAChB,CAAC,CAAC;EACJ,CAAC;EAED,MAAM+C,gBAAgB,GAAGA,CAACC,QAAQ,EAAElC,QAAQ,EAAExE,KAAK,EAAEV,QAAQ,KAAK;IAChEA,QAAQ,CAAEqH,SAAS,IAAK;MACpB,MAAMC,YAAY,GAAG,CAAC,GAAGD,SAAS,CAAC;MACnC,MAAMrG,OAAO,GAAG,GAAGoG,QAAQ,IAAIlC,QAAQ,EAAE;MACzCoC,YAAY,CAACF,QAAQ,CAAC,CAAClC,QAAQ,CAAC,GAAGhD,eAAe,CAACxB,KAAK,EAAGM,OAAO,IAAK;QAAA,IAAAuG,YAAA;QACnE,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAGrB,kBAAkB,CAACpF,OAAO,CAAC;QAC1C,OAAO,EAAAuG,YAAA,GAAAF,SAAS,CAACG,CAAC,CAAC,cAAAD,YAAA,uBAAZA,YAAA,CAAeE,CAAC,CAAC,KAAI,EAAE;MAClC,CAAC,CAAC;MACF,OAAOH,YAAY;IACvB,CAAC,CAAC;EACN,CAAC;EAGD,MAAMI,YAAY,GAAGA,CAACvG,GAAG,EAAEF,GAAG,EAAEP,KAAK,KAAK;IACxC,MAAMiH,MAAM,GAAG,GAAGxG,GAAG,IAAIF,GAAG,EAAE;IAC9BjB,QAAQ,CAAE4H,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAC,CAACD,MAAM,GAAEjH;IAAK,CAAC,CAAC,CAAC;IAC/C4E,OAAO,CAACY,GAAG,CAAC,SAAS/E,GAAG,KAAKF,GAAG,iBAAiBP,KAAK,EAAE,CAAC;IACzD,IAAIe,QAAQ,GAAGf,KAAK;;IAGpB;IACA,IAAIA,KAAK,CAACuB,UAAU,CAAC,GAAG,CAAC,EAAE;MACvBqD,OAAO,CAACY,GAAG,CAAC,6BAA6B/E,GAAG,KAAKF,GAAG,MAAMP,KAAK,EAAE,CAAC;MAClEe,QAAQ,GAAGS,eAAe,CAACxB,KAAK,EAAEX,KAAK,CAAC;IAAC;IAEzCC,QAAQ,CAAC4H,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE,CAAC,GAAGzG,GAAG,IAAIF,GAAG,EAAE,GAAGQ;IAAQ,CAAC,CAAC,CAAC;IAC3D8B,SAAS,CAAC,iBAAiBpC,GAAG,GAAG,CAAC,KAAKF,GAAG,GAAG,CAAC,YAAYQ,QAAQ,EAAE,CAAC;IAGrE,MAAMtB,OAAO,GAAGO,KAAK,CAACW,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,MAAMsB,KAAK,GAAGxC,OAAO,CAACwC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC;;IAElD,IAAIA,KAAK,EAAE;MACP,MAAM,CAAC8C,CAAC,EAAEoC,IAAI,EAAEC,OAAO,CAAC,GAAGnF,KAAK;MAChC,MAAM,CAACoF,MAAM,EAAEC,MAAM,CAAC,GAAGjH,kBAAkB,CAAC+G,OAAO,CAAC,CAAC,CAAC;MACtD,MAAMG,QAAQ,GAAGlI,KAAK,CAAC,GAAGgI,MAAM,IAAIC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;;MAErD;MACA,IAAIvG,QAAQ,GAAGwG,QAAQ;MACvB,IAAIJ,IAAI,KAAK,OAAO,EAAEpG,QAAQ,GAAGwG,QAAQ,CAAC7I,WAAW,CAAC,CAAC;MACvD,IAAIyI,IAAI,KAAK,OAAO,EAAEpG,QAAQ,GAAGwG,QAAQ,CAAC1I,WAAW,CAAC,CAAC;MACvD,IAAIsI,IAAI,KAAK,MAAM,EAAEpG,QAAQ,GAAGwG,QAAQ,CAACxI,IAAI,CAAC,CAAC;MAE/C6F,OAAO,CAACY,GAAG,CAAC,YAAY2B,IAAI,OAAOC,OAAO,GAAG,EAAErG,QAAQ,CAAC;MACxDzB,QAAQ,CAAC;QAAE,GAAGD,KAAK;QAAE,CAAC4H,MAAM,GAAGlG;MAAS,CAAC,CAAC;MAC1C;IACJ;;IAEJ;IACAzB,QAAQ,CAAC;MAAE,GAAGD,KAAK;MAAE,CAAC4H,MAAM,GAAGjH;IAAM,CAAC,CAAC;EAEzC,CAAC;;EAED;;EAEA,MAAMwH,eAAe,GAAGA,CAAC/G,GAAG,EAAEF,GAAG,KAAI;IACnCX,WAAW,CAAC,IAAI,CAAC;IACjBE,YAAY,CAAC;MAACW,GAAG;MAACF,GAAG;MAACP,KAAK,EAACX,KAAK,CAAC,GAAGoB,GAAG,IAAIF,GAAG,EAAE,CAAC,IAAG;IAAE,CAAC,CAAC;EAC3D,CAAC;EAED,MAAMkH,aAAa,GAAGA,CAAA,KAAK;IACzB7H,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,MAAM8H,gBAAgB,GAAGA,CAACjH,GAAG,EAACF,GAAG,KAAK;IACpC,IAAGZ,QAAQ,IAAIE,SAAS,EAAC;MACvB;MACA,MAAMoH,MAAM,GAAG,GAAGxG,GAAG,IAAIF,GAAG,EAAE;MAC9BjB,QAAQ,CAAE4H,IAAI,KAAM;QAAC,GAAGA,IAAI;QAAC,CAACD,MAAM,GAAGpH,SAAS,CAACG;MAAM,CAAC,CAAC,CAAC;IAC5D;EACF,CAAC;EAEC,MAAM2H,gBAAgB,GAAGA,CAAClH,GAAG,EAAEF,GAAG,EAAEM,IAAI,KAAK;IAC3CwB,OAAO,CAACkE,QAAQ,IAAI;MAClB,MAAM7C,OAAO,GAAG6C,QAAQ,CAAC5C,GAAG,CAAC6C,MAAM,IAAI,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC,CAAC;MACrD9C,OAAO,CAACjD,GAAG,CAAC,CAACF,GAAG,CAAC,GAAGwD,aAAa,CAAClD,IAAI,EAAE6C,OAAO,CAACjD,GAAG,CAAC,CAACF,GAAG,CAAC,CAAC,CAAC,CAAC;MAC5D,OAAOmD,OAAO;IAChB,CAAC,CAAC;EACJ,CAAC;;EAGD;;EAEA,MAAMkE,aAAa,GAAGA,CAACC,QAAQ,EAAExI,KAAK,EAAE8F,aAAa,KAAK;IACxDP,OAAO,CAACY,GAAG,CAACL,aAAa,EAAE9F,KAAK,CAAC;IACjC,MAAMoG,aAAa,GAAG/H,gBAAgB,CAAC2B,KAAK,EAAE8F,aAAa,CAAC,CAAC,CAAC;;IAE9D,IAAI,CAACM,aAAa,CAACjD,MAAM,EAAE;IAE3B,IAAIsF,QAAQ,KAAK,KAAK,EAAE;MACtBlD,OAAO,CAACY,GAAG,CAACL,aAAa,EAAE9F,KAAK,CAAC;MACjC,MAAMkF,MAAM,GAAG7G,gBAAgB,CAAC2B,KAAK,EAAE8F,aAAa,CAAC;MACrD,MAAMhD,GAAG,GAAGoC,MAAM,CAACwD,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC;MACrDrD,OAAO,CAACY,GAAG,CAAC,MAAM,EAAErD,GAAG,CAAC,CAAC,CAAE;MAC3B,OAAOA,GAAG;IACd;IAGE,IAAIS,MAAM;IACV,MAAM2B,MAAM,GAAGkB,aAAa,CAAC9B,GAAG,CAACC,IAAI,IAAIc,UAAU,CAACd,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;IAEjE,QAAQiE,QAAQ;MACZ,KAAK,KAAK;QACNjF,MAAM,GAAGwC,IAAI,CAACE,GAAG,CAAC,GAAGf,MAAM,CAAC;QAC5B;MACJ,KAAK,KAAK;QACN3B,MAAM,GAAGwC,IAAI,CAACC,GAAG,CAAC,GAAGd,MAAM,CAAC;QAC5B;MACJ,KAAK,KAAK;QACN3B,MAAM,GAAG2B,MAAM,CAACwD,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC;QAClD;MACJ,KAAK,KAAK;QACNrF,MAAM,GAAG2B,MAAM,CAAC/B,MAAM,GAAI+B,MAAM,CAACwD,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC,GAAG1D,MAAM,CAAC/B,MAAM,GAAI,CAAC;QACxF;MACJ,KAAK,OAAO;QACRI,MAAM,GAAG2B,MAAM,CAAC/B,MAAM;QACtB;MACJ;QACI;IACR;IAEA0F,KAAK,CAAC,GAAGL,QAAQ,KAAKjF,MAAM,EAAE,CAAC,CAAC,CAAC;EACnC,CAAC;;EAED;;EAEF,MAAM,CAACuF,WAAW,EAAEC,cAAc,CAAC,GAAGlL,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACpD,MAAM,CAACmL,UAAU,EAAEC,aAAa,CAAC,GAAGpL,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAG;;EAEpD,MAAMqL,sBAAsB,GAAGA,CAAA,KAAM;IACjC,IAAI,CAACJ,WAAW,CAAC5G,UAAU,CAAC,GAAG,CAAC,EAAE;MAC9B+G,aAAa,CAAC,qCAAqC,CAAC;MACpD;IACJ;IAEA,MAAM1F,MAAM,GAAGpB,eAAe,CAAC2G,WAAW,EAAE9I,KAAK,CAAC;IAClDiJ,aAAa,CAAC,WAAW1F,MAAM,EAAE,CAAC;EACtC,CAAC;EAGC,oBACExE,OAAA;IAAKoK,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBACpCrK,OAAA;MAAAqK,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEpBzK,OAAA;MAAKoK,SAAS,EAAC,SAAS;MAACM,KAAK,EAAE;QAACC,OAAO,EAAE,MAAM;QAAGC,GAAG,EAAE,KAAK;QAAEC,UAAU,EAAE;MAAQ,CAAE;MAAAR,QAAA,gBAErFrK,OAAA;QAAQ8K,OAAO,EAAEA,CAAA,KAAMtB,aAAa,CAAC,KAAK,CAAE;QAAAa,QAAA,gBAACrK,OAAA,CAACf,eAAe;UAAAqL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,QAAI;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC7EzK,OAAA;QAAQ8K,OAAO,EAAEA,CAAA,KAAMtB,aAAa,CAAC,KAAK,CAAE;QAAAa,QAAA,gBAACrK,OAAA,CAACd,iBAAiB;UAAAoL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,QAAI;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC/EzK,OAAA;QAAQ8K,OAAO,EAAEA,CAAA,KAAMtB,aAAa,CAAC,KAAK,CAAE;QAAAa,QAAA,gBAACrK,OAAA,CAAChB,MAAM;UAAAsL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,QAAI;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACpEzK,OAAA;QAAQ8K,OAAO,EAAEA,CAAA,KAAMtB,aAAa,CAAC,KAAK,CAAE;QAAAa,QAAA,gBAACrK,OAAA,CAACb,YAAY;UAAAmL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,QAAI;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC1EzK,OAAA;QAAQ8K,OAAO,EAAEA,CAAA,KAAMtB,aAAa,CAAC,OAAO,CAAE;QAAAa,QAAA,gBAACrK,OAAA,CAACZ,SAAS;UAAAkL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,UAAM;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAG3EzK,OAAA;QAAQ8K,OAAO,EAAEA,CAAA,KAAMtI,uBAAuB,CAAC,OAAO,CAAE;QAAA6H,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC1EzK,OAAA;QAAQ8K,OAAO,EAAEA,CAAA,KAAMtI,uBAAuB,CAAC,OAAO,CAAE;QAAA6H,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC1EzK,OAAA;QAAQ8K,OAAO,EAAEA,CAAA,KAAMtI,uBAAuB,CAAC,MAAM,CAAE;QAAA6H,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAExEzK,OAAA;QAAQ8K,OAAO,EAAEjL,gBAAiB;QAAAwK,QAAA,EAAC;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC7DzK,OAAA;QAAQ8K,OAAO,EAAEA,CAAA,KAAMhL,cAAc,CAACiL,MAAM,CAAC,OAAO,CAAC,EAAEA,MAAM,CAAC,eAAe,CAAC,CAAE;QAAAV,QAAA,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACxGzK,OAAA;QAAAqK,QAAA,EAAQ;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACrBzK,OAAA;QAAAqK,QAAA,EAAQ;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACvBzK,OAAA;QAAAqK,QAAA,EAAQ;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC1BzK,OAAA;QAAAqK,QAAA,EAAQ;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC3BzK,OAAA;QAAAqK,QAAA,EAAQ;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC7BzK,OAAA;QAAAqK,QAAA,EAAQ;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEvB,CAAC,eAEhBzK,OAAA;MAAKoK,SAAS,EAAC,sBAAsB;MAAAC,QAAA,gBACnCrK,OAAA;QACAyC,IAAI,EAAC,MAAM;QACXuI,WAAW,EAAC,mCAAmC;QAC/CpJ,KAAK,EAAEmI,WAAY;QACnBkB,QAAQ,EAAGC,CAAC,IAAKlB,cAAc,CAACkB,CAAC,CAACC,MAAM,CAACvJ,KAAK;MAAE;QAAA0I,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C,CAAC,eACHzK,OAAA;QAAQ8K,OAAO,EAAEX,sBAAuB;QAAAE,QAAA,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5D,CAAC,EAGLR,UAAU,iBAAIjK,OAAA;MAAKoK,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAAEJ;IAAU;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAGjEzK,OAAA;MAAKoK,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1BrK,OAAA;QAAAqK,QAAA,EAAM;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACfzK,OAAA;QACEoK,SAAS,EAAC,eAAe;QACzBxI,KAAK,EAAEP,OAAQ;QACf4J,QAAQ,EAAGC,CAAC,IAAK5J,UAAU,CAAC4J,CAAC,CAACC,MAAM,CAACvJ,KAAK,CAAE;QAC5CwJ,SAAS,EAAGF,CAAC,IAAKA,CAAC,CAACG,GAAG,KAAK,OAAO,IAAIvE,YAAY,CAAC;MAAE;QAAAwD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENzK,OAAA;MAAKoK,SAAS,EAAC,uBAAuB;MAACkB,SAAS,EAAEjC,aAAc;MAAAgB,QAAA,gBAGhErK,OAAA;QAAKoK,SAAS,EAAC,YAAY;QAAAC,QAAA,gBAEzBrK,OAAA;UAAKoK,SAAS,EAAC;QAAa;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,EAElCvG,KAAK,CAACC,IAAI,CAAC;UAAEC,MAAM,EAAE;QAAG,CAAC,EAAE,CAACuC,CAAC,EAAExE,GAAG,kBACjCnC,OAAA;UAAwBoK,SAAS,EAAC,aAAa;UAAAC,QAAA,EAC5ChH,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGnB,GAAG;QAAC,GADtB,OAAOA,GAAG,EAAE;UAAAmI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEjB,CACN,CAAC,EAGDvG,KAAK,CAACC,IAAI,CAAC;UAAEC,MAAM,EAAE;QAAG,CAAC,EAAE,CAACuC,CAAC,EAAEtE,GAAG,kBACjCrC,OAAA,CAACnB,KAAK,CAAC0M,QAAQ;UAAAlB,QAAA,gBACbrK,OAAA;YAAKoK,SAAS,EAAC,aAAa;YAAAC,QAAA,EAAEhI,GAAG,GAAG;UAAC;YAAAiI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,KAAC,EAC5CvG,KAAK,CAACC,IAAI,CAAC;YAAEC,MAAM,EAAE;UAAG,CAAC,EAAE,CAACuC,CAAC,EAAExE,GAAG,KAAK;YAAA,IAAAqJ,aAAA;YACtC,MAAM3C,MAAM,GAAG,GAAGxG,GAAG,IAAIF,GAAG,EAAE;YAC9B,oBACEnC,OAAA;cAECoK,SAAS,EAAC,gBAAgB;cACzBqB,YAAY,EAAEA,CAAA,KAAMnC,gBAAgB,CAACjH,GAAG,EAAEF,GAAG,CAAE;cAAAkI,QAAA,gBAGjDrK,OAAA;gBAEEoK,SAAS,EAAC,MAAM;gBAChBxI,KAAK,EAAEX,KAAK,CAAC4H,MAAM,CAAC,IAAI,EAAG;gBAC3BoC,QAAQ,EAAGC,CAAC,IAAKtC,YAAY,CAACvG,GAAG,EAAEF,GAAG,EAAE+I,CAAC,CAACC,MAAM,CAACvJ,KAAK,CAAE;gBACxD8J,OAAO,EAAEA,CAAA,KAAMtK,eAAe,CAACyH,MAAM,CAAE;gBACvC,iBAAA2C,aAAA,GAAgBvK,KAAK,CAAC4H,MAAM,CAAC,cAAA2C,aAAA,uBAAbA,aAAA,CAAerI,UAAU,CAAC,GAAG;cAAE,GAL1C0F,MAAM;gBAAAyB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAMZ,CAAC,eAEFzK,OAAA;gBACAoK,SAAS,EAAC,aAAa;gBACvBuB,WAAW,EAAEA,CAAA,KAAMvC,eAAe,CAAC/G,GAAG,EAAEF,GAAG;cAAE;gBAAAmI,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACvC,CAAC;YAAA,GAjBD5B,MAAM;cAAAyB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAkBP,CAAC;UAEV,CAAC,CAAC;QAAA,GA1BiB,OAAOpI,GAAG,EAAE;UAAAiI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OA2BjB,CACjB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,EAELjG,MAAM,iBAAIxE,OAAA;QAAKoK,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAAE7F;MAAM;QAAA8F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAGV,CAAC;AAAC3J,EAAA,CA5hBID,WAAW;AAAA+K,EAAA,GAAX/K,WAAW;AA8hBjB,eAAeA,WAAW;AAAC,IAAA+K,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}