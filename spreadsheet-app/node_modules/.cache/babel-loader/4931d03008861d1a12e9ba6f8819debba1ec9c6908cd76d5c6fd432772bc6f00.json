{"ast":null,"code":"import { isAccessorNode, isFunctionAssignmentNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { escape } from '../../utils/string.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { getSafeProperty, validateSafeMethod } from '../../utils/customs.js';\nimport { createSubScope } from '../../utils/scope.js';\nimport { factory } from '../../utils/factory.js';\nimport { defaultTemplate, latexFunctions } from '../../utils/latex.js';\nvar name = 'FunctionNode';\nvar dependencies = ['math', 'Node', 'SymbolNode'];\nexport var createFunctionNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    math,\n    Node,\n    SymbolNode\n  } = _ref;\n\n  /**\n   * @constructor FunctionNode\n   * @extends {./Node}\n   * invoke a list with arguments on a node\n   * @param {./Node | string} fn Node resolving with a function on which to invoke\n   *                             the arguments, typically a SymboNode or AccessorNode\n   * @param {./Node[]} args\n   */\n  function FunctionNode(fn, args) {\n    if (!(this instanceof FunctionNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (typeof fn === 'string') {\n      fn = new SymbolNode(fn);\n    } // validate input\n\n    if (!isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n    if (!Array.isArray(args) || !args.every(isNode)) {\n      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n    }\n    this.fn = fn;\n    this.args = args || []; // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        return this.fn.name || '';\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n  FunctionNode.prototype = new Node();\n  FunctionNode.prototype.type = 'FunctionNode';\n  FunctionNode.prototype.isFunctionNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  FunctionNode.prototype._compile = function (math, argNames) {\n    if (!(this instanceof FunctionNode)) {\n      throw new TypeError('No valid FunctionNode');\n    } // compile arguments\n\n    var evalArgs = this.args.map(arg => arg._compile(math, argNames));\n    if (isSymbolNode(this.fn)) {\n      // we can statically determine whether the function has an rawArgs property\n      var _name = this.fn.name;\n      var fn = _name in math ? getSafeProperty(math, _name) : undefined;\n      var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n      var resolveFn = scope => {\n        if (scope.has(_name)) {\n          return scope.get(_name);\n        }\n        if (_name in math) {\n          return getSafeProperty(math, _name);\n        }\n        return FunctionNode.onUndefinedFunction(_name);\n      };\n      if (isRaw) {\n        // pass unevaluated parameters (nodes) to the function\n        // \"raw\" evaluation\n        var rawArgs = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var fn = resolveFn(scope);\n          return fn(rawArgs, math, createSubScope(scope, args), scope);\n        };\n      } else {\n        // \"regular\" evaluation\n        switch (evalArgs.length) {\n          case 0:\n            return function evalFunctionNode(scope, args, context) {\n              var fn = resolveFn(scope);\n              return fn();\n            };\n          case 1:\n            return function evalFunctionNode(scope, args, context) {\n              var fn = resolveFn(scope);\n              var evalArg0 = evalArgs[0];\n              return fn(evalArg0(scope, args, context));\n            };\n          case 2:\n            return function evalFunctionNode(scope, args, context) {\n              var fn = resolveFn(scope);\n              var evalArg0 = evalArgs[0];\n              var evalArg1 = evalArgs[1];\n              return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));\n            };\n          default:\n            return function evalFunctionNode(scope, args, context) {\n              var fn = resolveFn(scope);\n              var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n              return fn(...values);\n            };\n        }\n      }\n    } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n      // execute the function with the right context: the object of the AccessorNode\n      var evalObject = this.fn.object._compile(math, argNames);\n      var prop = this.fn.index.getObjectProperty();\n      var _rawArgs = this.args;\n      return function evalFunctionNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        validateSafeMethod(object, prop);\n        var isRaw = object[prop] && object[prop].rawArgs;\n        if (isRaw) {\n          return object[prop](_rawArgs, math, createSubScope(scope, args), scope); // \"raw\" evaluation\n        } else {\n          // \"regular\" evaluation\n          var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n          return object[prop].apply(object, values);\n        }\n      };\n    } else {\n      // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n      // we have to dynamically determine whether the function has a rawArgs property\n      var evalFn = this.fn._compile(math, argNames);\n      var _rawArgs2 = this.args;\n      return function evalFunctionNode(scope, args, context) {\n        var fn = evalFn(scope, args, context);\n        var isRaw = fn && fn.rawArgs;\n        if (isRaw) {\n          return fn(_rawArgs2, math, createSubScope(scope, args), scope); // \"raw\" evaluation\n        } else {\n          // \"regular\" evaluation\n          var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n          return fn.apply(fn, values);\n        }\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n  FunctionNode.prototype.forEach = function (callback) {\n    callback(this.fn, 'fn', this);\n    for (var i = 0; i < this.args.length; i++) {\n      callback(this.args[i], 'args[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new FunctionNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {FunctionNode} Returns a transformed copy of the node\n   */\n\n  FunctionNode.prototype.map = function (callback) {\n    var fn = this._ifNode(callback(this.fn, 'fn', this));\n    var args = [];\n    for (var i = 0; i < this.args.length; i++) {\n      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n    }\n    return new FunctionNode(fn, args);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {FunctionNode}\n   */\n\n  FunctionNode.prototype.clone = function () {\n    return new FunctionNode(this.fn, this.args.slice(0));\n  };\n  /**\n   * Throws an error 'Undefined function {name}'\n   * @param {string} name\n   */\n\n  FunctionNode.onUndefinedFunction = function (name) {\n    throw new Error('Undefined function ' + name);\n  }; // backup Node's toString function\n  // @private\n\n  var nodeToString = FunctionNode.prototype.toString;\n  /**\n   * Get string representation. (wrapper function)\n   * This overrides parts of Node's toString function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toString\n   * function.\n   *\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n  FunctionNode.prototype.toString = function (options) {\n    var customString;\n    var name = this.fn.toString(options);\n    if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, name)) {\n      // callback is a map of callback functions\n      customString = options.handler[name](this, options);\n    }\n    if (typeof customString !== 'undefined') {\n      return customString;\n    } // fall back to Node's toString\n\n    return nodeToString.call(this, options);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  FunctionNode.prototype._toString = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toString(options);\n    });\n    var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like \"add(2, 4.2)\"\n\n    return fn + '(' + args.join(', ') + ')';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n  FunctionNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'FunctionNode',\n      fn: this.fn,\n      args: this.args\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n   *                       where mathjs is optional\n   * @returns {FunctionNode}\n   */\n\n  FunctionNode.fromJSON = function (json) {\n    return new FunctionNode(json.fn, json.args);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  FunctionNode.prototype.toHTML = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toHTML(options);\n    }); // format the arguments like \"add(2, 4.2)\"\n\n    return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n  };\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n\n  function expandTemplate(template, node, options) {\n    var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n\n    var regex = /\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)/gi;\n    var inputPos = 0; // position in the input string\n\n    var match;\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (typeof property) {\n            case 'string':\n              latex += property;\n              break;\n            case 'object':\n              if (isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n              break;\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  } // backup Node's toTex function\n  // @private\n\n  var nodeToTex = FunctionNode.prototype.toTex;\n  /**\n   * Get LaTeX representation. (wrapper function)\n   * This overrides parts of Node's toTex function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toTex\n   * function.\n   *\n   * @param {Object} options\n   * @return {string}\n   */\n\n  FunctionNode.prototype.toTex = function (options) {\n    var customTex;\n    if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, this.name)) {\n      // callback is a map of callback functions\n      customTex = options.handler[this.name](this, options);\n    }\n    if (typeof customTex !== 'undefined') {\n      return customTex;\n    } // fall back to Node's toTex\n\n    return nodeToTex.call(this, options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  FunctionNode.prototype._toTex = function (options) {\n    var args = this.args.map(function (arg) {\n      // get LaTeX of the arguments\n      return arg.toTex(options);\n    });\n    var latexConverter;\n    if (latexFunctions[this.name]) {\n      latexConverter = latexFunctions[this.name];\n    } // toTex property on the function itself\n\n    if (math[this.name] && (typeof math[this.name].toTex === 'function' || typeof math[this.name].toTex === 'object' || typeof math[this.name].toTex === 'string')) {\n      // .toTex is a callback function\n      latexConverter = math[this.name].toTex;\n    }\n    var customToTex;\n    switch (typeof latexConverter) {\n      case 'function':\n        // a callback function\n        customToTex = latexConverter(this, options);\n        break;\n      case 'string':\n        // a template string\n        customToTex = expandTemplate(latexConverter, this, options);\n        break;\n      case 'object':\n        // an object with different \"converters\" for different numbers of arguments\n        switch (typeof latexConverter[args.length]) {\n          case 'function':\n            customToTex = latexConverter[args.length](this, options);\n            break;\n          case 'string':\n            customToTex = expandTemplate(latexConverter[args.length], this, options);\n            break;\n        }\n    }\n    if (typeof customToTex !== 'undefined') {\n      return customToTex;\n    }\n    return expandTemplate(defaultTemplate, this, options);\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n  FunctionNode.prototype.getIdentifier = function () {\n    return this.type + ':' + this.name;\n  };\n  return FunctionNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["isAccessorNode","isFunctionAssignmentNode","isIndexNode","isNode","isSymbolNode","escape","hasOwnProperty","getSafeProperty","validateSafeMethod","createSubScope","factory","defaultTemplate","latexFunctions","name","dependencies","createFunctionNode","_ref","math","Node","SymbolNode","FunctionNode","fn","args","SyntaxError","TypeError","Array","isArray","every","Object","defineProperty","get","bind","set","Error","prototype","type","isFunctionNode","_compile","argNames","evalArgs","map","arg","_name","undefined","isRaw","rawArgs","resolveFn","scope","has","onUndefinedFunction","evalFunctionNode","context","length","evalArg0","evalArg1","values","evalArg","index","isObjectProperty","evalObject","object","prop","getObjectProperty","_rawArgs","apply","evalFn","_rawArgs2","forEach","callback","i","_ifNode","clone","slice","nodeToString","toString","options","customString","handler","call","_toString","join","toJSON","mathjs","fromJSON","json","toHTML","expandTemplate","template","node","latex","regex","inputPos","match","exec","substring","property","ReferenceError","toTex","nodeToTex","customTex","_toTex","latexConverter","customToTex","getIdentifier","isClass"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/expression/node/FunctionNode.js"],"sourcesContent":["import { isAccessorNode, isFunctionAssignmentNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { escape } from '../../utils/string.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { getSafeProperty, validateSafeMethod } from '../../utils/customs.js';\nimport { createSubScope } from '../../utils/scope.js';\nimport { factory } from '../../utils/factory.js';\nimport { defaultTemplate, latexFunctions } from '../../utils/latex.js';\nvar name = 'FunctionNode';\nvar dependencies = ['math', 'Node', 'SymbolNode'];\nexport var createFunctionNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    math,\n    Node,\n    SymbolNode\n  } = _ref;\n\n  /**\n   * @constructor FunctionNode\n   * @extends {./Node}\n   * invoke a list with arguments on a node\n   * @param {./Node | string} fn Node resolving with a function on which to invoke\n   *                             the arguments, typically a SymboNode or AccessorNode\n   * @param {./Node[]} args\n   */\n  function FunctionNode(fn, args) {\n    if (!(this instanceof FunctionNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (typeof fn === 'string') {\n      fn = new SymbolNode(fn);\n    } // validate input\n\n\n    if (!isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n\n    if (!Array.isArray(args) || !args.every(isNode)) {\n      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n    }\n\n    this.fn = fn;\n    this.args = args || []; // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        return this.fn.name || '';\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  FunctionNode.prototype = new Node();\n  FunctionNode.prototype.type = 'FunctionNode';\n  FunctionNode.prototype.isFunctionNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  FunctionNode.prototype._compile = function (math, argNames) {\n    if (!(this instanceof FunctionNode)) {\n      throw new TypeError('No valid FunctionNode');\n    } // compile arguments\n\n\n    var evalArgs = this.args.map(arg => arg._compile(math, argNames));\n\n    if (isSymbolNode(this.fn)) {\n      // we can statically determine whether the function has an rawArgs property\n      var _name = this.fn.name;\n      var fn = _name in math ? getSafeProperty(math, _name) : undefined;\n      var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n\n      var resolveFn = scope => {\n        if (scope.has(_name)) {\n          return scope.get(_name);\n        }\n\n        if (_name in math) {\n          return getSafeProperty(math, _name);\n        }\n\n        return FunctionNode.onUndefinedFunction(_name);\n      };\n\n      if (isRaw) {\n        // pass unevaluated parameters (nodes) to the function\n        // \"raw\" evaluation\n        var rawArgs = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var fn = resolveFn(scope);\n          return fn(rawArgs, math, createSubScope(scope, args), scope);\n        };\n      } else {\n        // \"regular\" evaluation\n        switch (evalArgs.length) {\n          case 0:\n            return function evalFunctionNode(scope, args, context) {\n              var fn = resolveFn(scope);\n              return fn();\n            };\n\n          case 1:\n            return function evalFunctionNode(scope, args, context) {\n              var fn = resolveFn(scope);\n              var evalArg0 = evalArgs[0];\n              return fn(evalArg0(scope, args, context));\n            };\n\n          case 2:\n            return function evalFunctionNode(scope, args, context) {\n              var fn = resolveFn(scope);\n              var evalArg0 = evalArgs[0];\n              var evalArg1 = evalArgs[1];\n              return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));\n            };\n\n          default:\n            return function evalFunctionNode(scope, args, context) {\n              var fn = resolveFn(scope);\n              var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n              return fn(...values);\n            };\n        }\n      }\n    } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n      // execute the function with the right context: the object of the AccessorNode\n      var evalObject = this.fn.object._compile(math, argNames);\n\n      var prop = this.fn.index.getObjectProperty();\n      var _rawArgs = this.args;\n      return function evalFunctionNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        validateSafeMethod(object, prop);\n        var isRaw = object[prop] && object[prop].rawArgs;\n\n        if (isRaw) {\n          return object[prop](_rawArgs, math, createSubScope(scope, args), scope); // \"raw\" evaluation\n        } else {\n          // \"regular\" evaluation\n          var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n          return object[prop].apply(object, values);\n        }\n      };\n    } else {\n      // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n      // we have to dynamically determine whether the function has a rawArgs property\n      var evalFn = this.fn._compile(math, argNames);\n\n      var _rawArgs2 = this.args;\n      return function evalFunctionNode(scope, args, context) {\n        var fn = evalFn(scope, args, context);\n        var isRaw = fn && fn.rawArgs;\n\n        if (isRaw) {\n          return fn(_rawArgs2, math, createSubScope(scope, args), scope); // \"raw\" evaluation\n        } else {\n          // \"regular\" evaluation\n          var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n          return fn.apply(fn, values);\n        }\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  FunctionNode.prototype.forEach = function (callback) {\n    callback(this.fn, 'fn', this);\n\n    for (var i = 0; i < this.args.length; i++) {\n      callback(this.args[i], 'args[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new FunctionNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {FunctionNode} Returns a transformed copy of the node\n   */\n\n\n  FunctionNode.prototype.map = function (callback) {\n    var fn = this._ifNode(callback(this.fn, 'fn', this));\n\n    var args = [];\n\n    for (var i = 0; i < this.args.length; i++) {\n      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n    }\n\n    return new FunctionNode(fn, args);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {FunctionNode}\n   */\n\n\n  FunctionNode.prototype.clone = function () {\n    return new FunctionNode(this.fn, this.args.slice(0));\n  };\n  /**\n   * Throws an error 'Undefined function {name}'\n   * @param {string} name\n   */\n\n\n  FunctionNode.onUndefinedFunction = function (name) {\n    throw new Error('Undefined function ' + name);\n  }; // backup Node's toString function\n  // @private\n\n\n  var nodeToString = FunctionNode.prototype.toString;\n  /**\n   * Get string representation. (wrapper function)\n   * This overrides parts of Node's toString function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toString\n   * function.\n   *\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n  FunctionNode.prototype.toString = function (options) {\n    var customString;\n    var name = this.fn.toString(options);\n\n    if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, name)) {\n      // callback is a map of callback functions\n      customString = options.handler[name](this, options);\n    }\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    } // fall back to Node's toString\n\n\n    return nodeToString.call(this, options);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype._toString = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toString(options);\n    });\n    var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like \"add(2, 4.2)\"\n\n    return fn + '(' + args.join(', ') + ')';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  FunctionNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'FunctionNode',\n      fn: this.fn,\n      args: this.args\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n   *                       where mathjs is optional\n   * @returns {FunctionNode}\n   */\n\n\n  FunctionNode.fromJSON = function (json) {\n    return new FunctionNode(json.fn, json.args);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype.toHTML = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toHTML(options);\n    }); // format the arguments like \"add(2, 4.2)\"\n\n    return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n  };\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n\n\n  function expandTemplate(template, node, options) {\n    var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n\n    var regex = /\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)/gi;\n    var inputPos = 0; // position in the input string\n\n    var match;\n\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (typeof property) {\n            case 'string':\n              latex += property;\n              break;\n\n            case 'object':\n              if (isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n\n              break;\n\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  } // backup Node's toTex function\n  // @private\n\n\n  var nodeToTex = FunctionNode.prototype.toTex;\n  /**\n   * Get LaTeX representation. (wrapper function)\n   * This overrides parts of Node's toTex function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toTex\n   * function.\n   *\n   * @param {Object} options\n   * @return {string}\n   */\n\n  FunctionNode.prototype.toTex = function (options) {\n    var customTex;\n\n    if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, this.name)) {\n      // callback is a map of callback functions\n      customTex = options.handler[this.name](this, options);\n    }\n\n    if (typeof customTex !== 'undefined') {\n      return customTex;\n    } // fall back to Node's toTex\n\n\n    return nodeToTex.call(this, options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype._toTex = function (options) {\n    var args = this.args.map(function (arg) {\n      // get LaTeX of the arguments\n      return arg.toTex(options);\n    });\n    var latexConverter;\n\n    if (latexFunctions[this.name]) {\n      latexConverter = latexFunctions[this.name];\n    } // toTex property on the function itself\n\n\n    if (math[this.name] && (typeof math[this.name].toTex === 'function' || typeof math[this.name].toTex === 'object' || typeof math[this.name].toTex === 'string')) {\n      // .toTex is a callback function\n      latexConverter = math[this.name].toTex;\n    }\n\n    var customToTex;\n\n    switch (typeof latexConverter) {\n      case 'function':\n        // a callback function\n        customToTex = latexConverter(this, options);\n        break;\n\n      case 'string':\n        // a template string\n        customToTex = expandTemplate(latexConverter, this, options);\n        break;\n\n      case 'object':\n        // an object with different \"converters\" for different numbers of arguments\n        switch (typeof latexConverter[args.length]) {\n          case 'function':\n            customToTex = latexConverter[args.length](this, options);\n            break;\n\n          case 'string':\n            customToTex = expandTemplate(latexConverter[args.length], this, options);\n            break;\n        }\n\n    }\n\n    if (typeof customToTex !== 'undefined') {\n      return customToTex;\n    }\n\n    return expandTemplate(defaultTemplate, this, options);\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n\n  FunctionNode.prototype.getIdentifier = function () {\n    return this.type + ':' + this.name;\n  };\n\n  return FunctionNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}