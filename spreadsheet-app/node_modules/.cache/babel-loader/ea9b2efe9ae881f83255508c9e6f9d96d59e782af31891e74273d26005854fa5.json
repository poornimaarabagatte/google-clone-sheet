{"ast":null,"code":"import { isAccessorNode, isArrayNode, isConstantNode, isFunctionNode, isIndexNode, isNode, isObjectNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nvar name = 'AccessorNode';\nvar dependencies = ['subset', 'Node'];\nexport var createAccessorNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n  /**\n   * @constructor AccessorNode\n   * @extends {Node}\n   * Access an object property or get a matrix subset\n   *\n   * @param {Node} object                 The object from which to retrieve\n   *                                      a property or subset.\n   * @param {IndexNode} index             IndexNode containing ranges\n   */\n\n  function AccessorNode(object, index) {\n    if (!(this instanceof AccessorNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (!isNode(object)) {\n      throw new TypeError('Node expected for parameter \"object\"');\n    }\n    if (!isIndexNode(index)) {\n      throw new TypeError('IndexNode expected for parameter \"index\"');\n    }\n    this.object = object || null;\n    this.index = index; // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n  AccessorNode.prototype = new Node();\n  AccessorNode.prototype.type = 'AccessorNode';\n  AccessorNode.prototype.isAccessorNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AccessorNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n    var evalIndex = this.index._compile(math, argNames);\n    if (this.index.isObjectProperty()) {\n      var prop = this.index.getObjectProperty();\n      return function evalAccessorNode(scope, args, context) {\n        // get a property from an object evaluated using the scope.\n        return getSafeProperty(evalObject(scope, args, context), prop);\n      };\n    } else {\n      return function evalAccessorNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var index = evalIndex(scope, args, object); // we pass object here instead of context\n\n        return access(object, index);\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n  AccessorNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n    callback(this.index, 'index', this);\n  };\n  /**\n   * Create a new AccessorNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AccessorNode} Returns a transformed copy of the node\n   */\n\n  AccessorNode.prototype.map = function (callback) {\n    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AccessorNode}\n   */\n\n  AccessorNode.prototype.clone = function () {\n    return new AccessorNode(this.object, this.index);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n  AccessorNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n    if (needParenthesis(this.object)) {\n      object = '(' + object + ')';\n    }\n    return object + this.index.toString(options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n  AccessorNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n    if (needParenthesis(this.object)) {\n      object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n    return object + this.index.toHTML(options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n  AccessorNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n    if (needParenthesis(this.object)) {\n      object = '\\\\left(\\' + object + \\'\\\\right)';\n    }\n    return object + this.index.toTex(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n  AccessorNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AccessorNode',\n      object: this.object,\n      index: this.index\n    };\n  };\n  /**\n   * Instantiate an AccessorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AccessorNode\", object: ..., index: ...}`,\n   *                       where mathjs is optional\n   * @returns {AccessorNode}\n   */\n\n  AccessorNode.fromJSON = function (json) {\n    return new AccessorNode(json.object, json.index);\n  };\n  /**\n   * Are parenthesis needed?\n   * @private\n   */\n\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !(isAccessorNode(node) || isArrayNode(node) || isConstantNode(node) || isFunctionNode(node) || isObjectNode(node) || isParenthesisNode(node) || isSymbolNode(node));\n  }\n  return AccessorNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["isAccessorNode","isArrayNode","isConstantNode","isFunctionNode","isIndexNode","isNode","isObjectNode","isParenthesisNode","isSymbolNode","getSafeProperty","factory","accessFactory","name","dependencies","createAccessorNode","_ref","subset","Node","access","AccessorNode","object","index","SyntaxError","TypeError","Object","defineProperty","get","isObjectProperty","getObjectProperty","bind","set","Error","prototype","type","_compile","math","argNames","evalObject","evalIndex","prop","evalAccessorNode","scope","args","context","forEach","callback","map","_ifNode","clone","_toString","options","toString","needParenthesis","toHTML","_toTex","toTex","toJSON","mathjs","fromJSON","json","node","isClass"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/expression/node/AccessorNode.js"],"sourcesContent":["import { isAccessorNode, isArrayNode, isConstantNode, isFunctionNode, isIndexNode, isNode, isObjectNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nvar name = 'AccessorNode';\nvar dependencies = ['subset', 'Node'];\nexport var createAccessorNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n  /**\n   * @constructor AccessorNode\n   * @extends {Node}\n   * Access an object property or get a matrix subset\n   *\n   * @param {Node} object                 The object from which to retrieve\n   *                                      a property or subset.\n   * @param {IndexNode} index             IndexNode containing ranges\n   */\n\n  function AccessorNode(object, index) {\n    if (!(this instanceof AccessorNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!isNode(object)) {\n      throw new TypeError('Node expected for parameter \"object\"');\n    }\n\n    if (!isIndexNode(index)) {\n      throw new TypeError('IndexNode expected for parameter \"index\"');\n    }\n\n    this.object = object || null;\n    this.index = index; // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AccessorNode.prototype = new Node();\n  AccessorNode.prototype.type = 'AccessorNode';\n  AccessorNode.prototype.isAccessorNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AccessorNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n\n    var evalIndex = this.index._compile(math, argNames);\n\n    if (this.index.isObjectProperty()) {\n      var prop = this.index.getObjectProperty();\n      return function evalAccessorNode(scope, args, context) {\n        // get a property from an object evaluated using the scope.\n        return getSafeProperty(evalObject(scope, args, context), prop);\n      };\n    } else {\n      return function evalAccessorNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var index = evalIndex(scope, args, object); // we pass object here instead of context\n\n        return access(object, index);\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  AccessorNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n    callback(this.index, 'index', this);\n  };\n  /**\n   * Create a new AccessorNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AccessorNode} Returns a transformed copy of the node\n   */\n\n\n  AccessorNode.prototype.map = function (callback) {\n    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AccessorNode}\n   */\n\n\n  AccessorNode.prototype.clone = function () {\n    return new AccessorNode(this.object, this.index);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n\n    if (needParenthesis(this.object)) {\n      object = '(' + object + ')';\n    }\n\n    return object + this.index.toString(options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n\n    if (needParenthesis(this.object)) {\n      object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + this.index.toHTML(options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n\n    if (needParenthesis(this.object)) {\n      object = '\\\\left(\\' + object + \\'\\\\right)';\n    }\n\n    return object + this.index.toTex(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  AccessorNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AccessorNode',\n      object: this.object,\n      index: this.index\n    };\n  };\n  /**\n   * Instantiate an AccessorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AccessorNode\", object: ..., index: ...}`,\n   *                       where mathjs is optional\n   * @returns {AccessorNode}\n   */\n\n\n  AccessorNode.fromJSON = function (json) {\n    return new AccessorNode(json.object, json.index);\n  };\n  /**\n   * Are parenthesis needed?\n   * @private\n   */\n\n\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !(isAccessorNode(node) || isArrayNode(node) || isConstantNode(node) || isFunctionNode(node) || isObjectNode(node) || isParenthesisNode(node) || isSymbolNode(node));\n  }\n\n  return AccessorNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}