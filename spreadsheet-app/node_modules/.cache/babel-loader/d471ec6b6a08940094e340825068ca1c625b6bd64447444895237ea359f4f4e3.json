{"ast":null,"code":"import { clone } from '../../../utils/object.js';\nexport function createComplexEigs(_ref) {\n  var {\n    addScalar,\n    subtract,\n    flatten,\n    multiply,\n    multiplyScalar,\n    divideScalar,\n    sqrt,\n    abs,\n    bignumber,\n    diag,\n    inv,\n    qr,\n    usolve,\n    usolveAll,\n    equal,\n    complex,\n    larger,\n    smaller,\n    matrixFromColumns,\n    dot\n  } = _ref;\n\n  /**\n   * @param {number[][]} arr the matrix to find eigenvalues of\n   * @param {number} N size of the matrix\n   * @param {number|BigNumber} prec precision, anything lower will be considered zero\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @param {boolean} findVectors should we find eigenvectors?\n   *\n   * @returns {{ values: number[], vectors: number[][] }}\n   */\n  function complexEigs(arr, N, prec, type, findVectors) {\n    if (findVectors === undefined) {\n      findVectors = true;\n    } // TODO check if any row/col are zero except the diagonal\n    // make sure corresponding rows and columns have similar magnitude\n    // important because of numerical stability\n\n    var R = balance(arr, N, prec, type, findVectors); // R is the row transformation matrix\n    // A' = R A R⁻¹, A is the original matrix\n    // (if findVectors is false, R is undefined)\n    // TODO if magnitudes of elements vary over many orders,\n    // move greatest elements to the top left corner\n    // using similarity transformations, reduce the matrix\n    // to Hessenberg form (upper triangular plus one subdiagonal row)\n    // updates the transformation matrix R with new row operationsq\n\n    reduceToHessenberg(arr, N, prec, type, findVectors, R); // find eigenvalues\n\n    var {\n      values,\n      C\n    } = iterateUntilTriangular(arr, N, prec, type, findVectors); // values is the list of eigenvalues, C is the column\n    // transformation matrix that transforms the hessenberg\n    // matrix to upper triangular\n    // compose transformations A → hess. and hess. → triang.\n\n    C = multiply(inv(R), C);\n    var vectors;\n    if (findVectors) {\n      vectors = findEigenvectors(arr, N, C, values, prec, type);\n      vectors = matrixFromColumns(...vectors);\n    }\n    return {\n      values,\n      vectors\n    };\n  }\n  /**\n   * @param {number[][]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {number[][]}\n   */\n\n  function balance(arr, N, prec, type, findVectors) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1; // base of the floating-point arithmetic\n\n    var radix = big ? bignumber(10) : 2;\n    var radixSq = multiplyScalar(radix, radix); // the diagonal transformation matrix R\n\n    var Rdiag;\n    if (findVectors) {\n      Rdiag = Array(N).fill(one);\n    } // this isn't the only time we loop thru the matrix...\n\n    var last = false;\n    while (!last) {\n      // ...haha I'm joking! unless...\n      last = true;\n      for (var i = 0; i < N; i++) {\n        // compute the taxicab norm of i-th column and row\n        // TODO optimize for complex numbers\n        var colNorm = zero;\n        var rowNorm = zero;\n        for (var j = 0; j < N; j++) {\n          if (i === j) continue;\n          var c = abs(arr[i][j]);\n          colNorm = addScalar(colNorm, c);\n          rowNorm = addScalar(rowNorm, c);\n        }\n        if (!equal(colNorm, 0) && !equal(rowNorm, 0)) {\n          // find integer power closest to balancing the matrix\n          // (we want to scale only by integer powers of radix,\n          // so that we don't lose any precision due to round-off)\n          var f = one;\n          var _c = colNorm;\n          var rowDivRadix = divideScalar(rowNorm, radix);\n          var rowMulRadix = multiplyScalar(rowNorm, radix);\n          while (smaller(_c, rowDivRadix)) {\n            _c = multiplyScalar(_c, radixSq);\n            f = multiplyScalar(f, radix);\n          }\n          while (larger(_c, rowMulRadix)) {\n            _c = divideScalar(_c, radixSq);\n            f = divideScalar(f, radix);\n          } // check whether balancing is needed\n          // condition = (c + rowNorm) / f < 0.95 * (colNorm + rowNorm)\n\n          var condition = smaller(divideScalar(addScalar(_c, rowNorm), f), multiplyScalar(addScalar(colNorm, rowNorm), 0.95)); // apply balancing similarity transformation\n\n          if (condition) {\n            // we should loop once again to check whether\n            // another rebalancing is needed\n            last = false;\n            var g = divideScalar(1, f);\n            for (var _j = 0; _j < N; _j++) {\n              if (i === _j) {\n                continue;\n              }\n              arr[i][_j] = multiplyScalar(arr[i][_j], f);\n              arr[_j][i] = multiplyScalar(arr[_j][i], g);\n            } // keep track of transformations\n\n            if (findVectors) {\n              Rdiag[i] = multiplyScalar(Rdiag[i], f);\n            }\n          }\n        }\n      }\n    } // return the diagonal row transformation matrix\n\n    return diag(Rdiag);\n  }\n  /**\n   * @param {number[][]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @param {boolean} findVectors\n   * @param {number[][]} R the row transformation matrix that will be modified\n   */\n\n  function reduceToHessenberg(arr, N, prec, type, findVectors, R) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    if (big) {\n      prec = bignumber(prec);\n    }\n    for (var i = 0; i < N - 2; i++) {\n      // Find the largest subdiag element in the i-th col\n      var maxIndex = 0;\n      var max = zero;\n      for (var j = i + 1; j < N; j++) {\n        var el = arr[j][i];\n        if (smaller(abs(max), abs(el))) {\n          max = el;\n          maxIndex = j;\n        }\n      } // This col is pivoted, no need to do anything\n\n      if (smaller(abs(max), prec)) {\n        continue;\n      }\n      if (maxIndex !== i + 1) {\n        // Interchange maxIndex-th and (i+1)-th row\n        var tmp1 = arr[maxIndex];\n        arr[maxIndex] = arr[i + 1];\n        arr[i + 1] = tmp1; // Interchange maxIndex-th and (i+1)-th column\n\n        for (var _j2 = 0; _j2 < N; _j2++) {\n          var tmp2 = arr[_j2][maxIndex];\n          arr[_j2][maxIndex] = arr[_j2][i + 1];\n          arr[_j2][i + 1] = tmp2;\n        } // keep track of transformations\n\n        if (findVectors) {\n          var tmp3 = R[maxIndex];\n          R[maxIndex] = R[i + 1];\n          R[i + 1] = tmp3;\n        }\n      } // Reduce following rows and columns\n\n      for (var _j3 = i + 2; _j3 < N; _j3++) {\n        var n = divideScalar(arr[_j3][i], max);\n        if (n === 0) {\n          continue;\n        } // from j-th row subtract n-times (i+1)th row\n\n        for (var k = 0; k < N; k++) {\n          arr[_j3][k] = subtract(arr[_j3][k], multiplyScalar(n, arr[i + 1][k]));\n        } // to (i+1)th column add n-times j-th column\n\n        for (var _k = 0; _k < N; _k++) {\n          arr[_k][i + 1] = addScalar(arr[_k][i + 1], multiplyScalar(n, arr[_k][_j3]));\n        } // keep track of transformations\n\n        if (findVectors) {\n          for (var _k2 = 0; _k2 < N; _k2++) {\n            R[_j3][_k2] = subtract(R[_j3][_k2], multiplyScalar(n, R[i + 1][_k2]));\n          }\n        }\n      }\n    }\n    return R;\n  }\n  /**\n   * @returns {{values: values, C: Matrix}}\n   * @see Press, Wiliams: Numerical recipes in Fortran 77\n   * @see https://en.wikipedia.org/wiki/QR_algorithm\n   */\n\n  function iterateUntilTriangular(A, N, prec, type, findVectors) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n    if (big) {\n      prec = bignumber(prec);\n    } // The Francis Algorithm\n    // The core idea of this algorithm is that doing successive\n    // A' = Q⁺AQ transformations will eventually converge to block-\n    // upper-triangular with diagonal blocks either 1x1 or 2x2.\n    // The Q here is the one from the QR decomposition, A = QR.\n    // Since the eigenvalues of a block-upper-triangular matrix are\n    // the eigenvalues of its diagonal blocks and we know how to find\n    // eigenvalues of a 2x2 matrix, we know the eigenvalues of A.\n\n    var arr = clone(A); // the list of converged eigenvalues\n\n    var lambdas = []; // size of arr, which will get smaller as eigenvalues converge\n\n    var n = N; // the diagonal of the block-diagonal matrix that turns\n    // converged 2x2 matrices into upper triangular matrices\n\n    var Sdiag = []; // N×N matrix describing the overall transformation done during the QR algorithm\n\n    var Qtotal = findVectors ? diag(Array(N).fill(one)) : undefined; // n×n matrix describing the QR transformations done since last convergence\n\n    var Qpartial = findVectors ? diag(Array(n).fill(one)) : undefined; // last eigenvalue converged before this many steps\n\n    var lastConvergenceBefore = 0;\n    while (lastConvergenceBefore <= 100) {\n      lastConvergenceBefore += 1; // TODO if the convergence is slow, do something clever\n      // Perform the factorization\n\n      var k = 0; // TODO set close to an eigenvalue\n\n      for (var i = 0; i < n; i++) {\n        arr[i][i] = subtract(arr[i][i], k);\n      } // TODO do an implicit QR transformation\n\n      var {\n        Q,\n        R\n      } = qr(arr);\n      arr = multiply(R, Q);\n      for (var _i = 0; _i < n; _i++) {\n        arr[_i][_i] = addScalar(arr[_i][_i], k);\n      } // keep track of transformations\n\n      if (findVectors) {\n        Qpartial = multiply(Qpartial, Q);\n      } // The rightmost diagonal element converged to an eigenvalue\n\n      if (n === 1 || smaller(abs(arr[n - 1][n - 2]), prec)) {\n        lastConvergenceBefore = 0;\n        lambdas.push(arr[n - 1][n - 1]); // keep track of transformations\n\n        if (findVectors) {\n          Sdiag.unshift([[1]]);\n          inflateMatrix(Qpartial, N);\n          Qtotal = multiply(Qtotal, Qpartial);\n          if (n > 1) {\n            Qpartial = diag(Array(n - 1).fill(one));\n          }\n        } // reduce the matrix size\n\n        n -= 1;\n        arr.pop();\n        for (var _i2 = 0; _i2 < n; _i2++) {\n          arr[_i2].pop();\n        } // The rightmost diagonal 2x2 block converged\n      } else if (n === 2 || smaller(abs(arr[n - 2][n - 3]), prec)) {\n        lastConvergenceBefore = 0;\n        var ll = eigenvalues2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1]);\n        lambdas.push(...ll); // keep track of transformations\n\n        if (findVectors) {\n          Sdiag.unshift(jordanBase2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1], ll[0], ll[1], prec, type));\n          inflateMatrix(Qpartial, N);\n          Qtotal = multiply(Qtotal, Qpartial);\n          if (n > 2) {\n            Qpartial = diag(Array(n - 2).fill(one));\n          }\n        } // reduce the matrix size\n\n        n -= 2;\n        arr.pop();\n        arr.pop();\n        for (var _i3 = 0; _i3 < n; _i3++) {\n          arr[_i3].pop();\n          arr[_i3].pop();\n        }\n      }\n      if (n === 0) {\n        break;\n      }\n    } // standard sorting\n\n    lambdas.sort((a, b) => +subtract(abs(a), abs(b))); // the algorithm didn't converge\n\n    if (lastConvergenceBefore > 100) {\n      var err = Error('The eigenvalues failed to converge. Only found these eigenvalues: ' + lambdas.join(', '));\n      err.values = lambdas;\n      err.vectors = [];\n      throw err;\n    } // combine the overall QR transformation Qtotal with the subsequent\n    // transformation S that turns the diagonal 2x2 blocks to upper triangular\n\n    var C = findVectors ? multiply(Qtotal, blockDiag(Sdiag, N)) : undefined;\n    return {\n      values: lambdas,\n      C\n    };\n  }\n  /**\n   * @param {Matrix} A original matrix\n   * @param {number} N size of A\n   * @param {Matrix} C column transformation matrix that turns A into upper triangular\n   * @param {number[]} values array of eigenvalues of A\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {number[][]} eigenvalues\n   */\n\n  function findEigenvectors(A, N, C, values, prec, type) {\n    var Cinv = inv(C);\n    var U = multiply(Cinv, A, C);\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1; // turn values into a kind of \"multiset\"\n    // this way it is easier to find eigenvectors\n\n    var uniqueValues = [];\n    var multiplicities = [];\n    for (var λ of values) {\n      var i = indexOf(uniqueValues, λ, equal);\n      if (i === -1) {\n        uniqueValues.push(λ);\n        multiplicities.push(1);\n      } else {\n        multiplicities[i] += 1;\n      }\n    } // find eigenvectors by solving U − λE = 0\n    // TODO replace with an iterative eigenvector algorithm\n    // (this one might fail for imprecise eigenvalues)\n\n    var vectors = [];\n    var len = uniqueValues.length;\n    var b = Array(N).fill(zero);\n    var E = diag(Array(N).fill(one)); // eigenvalues for which usolve failed (due to numerical error)\n\n    var failedLambdas = [];\n    for (var _i4 = 0; _i4 < len; _i4++) {\n      var _λ = uniqueValues[_i4];\n      var _A = subtract(U, multiply(_λ, E)); // the characteristic matrix\n\n      var solutions = usolveAll(_A, b);\n      solutions = solutions.map(v => multiply(C, v));\n      solutions.shift(); // ignore the null vector\n      // looks like we missed something, try inverse iteration\n\n      while (solutions.length < multiplicities[_i4]) {\n        var approxVec = inverseIterate(_A, N, solutions, prec, type);\n        if (approxVec == null) {\n          // no more vectors were found\n          failedLambdas.push(_λ);\n          break;\n        }\n        solutions.push(approxVec);\n      }\n      vectors.push(...solutions.map(v => flatten(v)));\n    }\n    if (failedLambdas.length !== 0) {\n      var err = new Error('Failed to find eigenvectors for the following eigenvalues: ' + failedLambdas.join(', '));\n      err.values = values;\n      err.vectors = vectors;\n      throw err;\n    }\n    return vectors;\n  }\n  /**\n   * Compute the eigenvalues of an 2x2 matrix\n   * @return {[number,number]}\n   */\n\n  function eigenvalues2x2(a, b, c, d) {\n    // λ± = ½ trA ± ½ √( tr²A - 4 detA )\n    var trA = addScalar(a, d);\n    var detA = subtract(multiplyScalar(a, d), multiplyScalar(b, c));\n    var x = multiplyScalar(trA, 0.5);\n    var y = multiplyScalar(sqrt(subtract(multiplyScalar(trA, trA), multiplyScalar(4, detA))), 0.5);\n    return [addScalar(x, y), subtract(x, y)];\n  }\n  /**\n   * For an 2x2 matrix compute the transformation matrix S,\n   * so that SAS⁻¹ is an upper triangular matrix\n   * @return {[[number,number],[number,number]]}\n   * @see https://math.berkeley.edu/~ogus/old/Math_54-05/webfoils/jordan.pdf\n   * @see http://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n   */\n\n  function jordanBase2x2(a, b, c, d, l1, l2, prec, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1; // matrix is already upper triangular\n    // return an identity matrix\n\n    if (smaller(abs(c), prec)) {\n      return [[one, zero], [zero, one]];\n    } // matrix is diagonalizable\n    // return its eigenvectors as columns\n\n    if (larger(abs(subtract(l1, l2)), prec)) {\n      return [[subtract(l1, d), subtract(l2, d)], [c, c]];\n    } // matrix is not diagonalizable\n    // compute off-diagonal elements of N = A - λI\n    // N₁₂ = 0 ⇒ S = ( N⃗₁, I⃗₁ )\n    // N₁₂ ≠ 0 ⇒ S = ( N⃗₂, I⃗₂ )\n\n    var na = subtract(a, l1);\n    var nb = subtract(b, l1);\n    var nc = subtract(c, l1);\n    var nd = subtract(d, l1);\n    if (smaller(abs(nb), prec)) {\n      return [[na, one], [nc, zero]];\n    } else {\n      return [[nb, zero], [nd, one]];\n    }\n  }\n  /**\n   * Enlarge the matrix from n×n to N×N, setting the new\n   * elements to 1 on diagonal and 0 elsewhere\n   */\n\n  function inflateMatrix(arr, N) {\n    // add columns\n    for (var i = 0; i < arr.length; i++) {\n      arr[i].push(...Array(N - arr[i].length).fill(0));\n    } // add rows\n\n    for (var _i5 = arr.length; _i5 < N; _i5++) {\n      arr.push(Array(N).fill(0));\n      arr[_i5][_i5] = 1;\n    }\n    return arr;\n  }\n  /**\n   * Create a block-diagonal matrix with the given square matrices on the diagonal\n   * @param {Matrix[] | number[][][]} arr array of matrices to be placed on the diagonal\n   * @param {number} N the size of the resulting matrix\n   */\n\n  function blockDiag(arr, N) {\n    var M = [];\n    for (var i = 0; i < N; i++) {\n      M[i] = Array(N).fill(0);\n    }\n    var I = 0;\n    for (var sub of arr) {\n      var n = sub.length;\n      for (var _i6 = 0; _i6 < n; _i6++) {\n        for (var j = 0; j < n; j++) {\n          M[I + _i6][I + j] = sub[_i6][j];\n        }\n      }\n      I += n;\n    }\n    return M;\n  }\n  /**\n   * Finds the index of an element in an array using a custom equality function\n   * @template T\n   * @param {Array<T>} arr array in which to search\n   * @param {T} el the element to find\n   * @param {function(T, T): boolean} fn the equality function, first argument is an element of `arr`, the second is always `el`\n   * @returns {number} the index of `el`, or -1 when it's not in `arr`\n   */\n\n  function indexOf(arr, el, fn) {\n    for (var i = 0; i < arr.length; i++) {\n      if (fn(arr[i], el)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  /**\n   * Provided a near-singular upper-triangular matrix A and a list of vectors,\n   * finds an eigenvector of A with the smallest eigenvalue, which is orthogonal\n   * to each vector in the list\n   * @template T\n   * @param {T[][]} A near-singular square matrix\n   * @param {number} N dimension\n   * @param {T[][]} orthog list of vectors\n   * @param {number} prec epsilon\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @return {T[] | null} eigenvector\n   *\n   * @see Numerical Recipes for Fortran 77 – 11.7 Eigenvalues or Eigenvectors by Inverse Iteration\n   */\n\n  function inverseIterate(A, N, orthog, prec, type) {\n    var largeNum = type === 'BigNumber' ? bignumber(1000) : 1000;\n    var b; // the vector\n    // you better choose a random vector before I count to five\n\n    var i = 0;\n    while (true) {\n      b = randomOrthogonalVector(N, orthog, type);\n      b = usolve(A, b);\n      if (larger(norm(b), largeNum)) {\n        break;\n      }\n      if (++i >= 5) {\n        return null;\n      }\n    } // you better converge before I count to ten\n\n    i = 0;\n    while (true) {\n      var c = usolve(A, b);\n      if (smaller(norm(orthogonalComplement(b, [c])), prec)) {\n        break;\n      }\n      if (++i >= 10) {\n        return null;\n      }\n      b = normalize(c);\n    }\n    return b;\n  }\n  /**\n   * Generates a random unit vector of dimension N, orthogonal to each vector in the list\n   * @template T\n   * @param {number} N dimension\n   * @param {T[][]} orthog list of vectors\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {T[]} random vector\n   */\n\n  function randomOrthogonalVector(N, orthog, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex'; // generate random vector with the correct type\n\n    var v = Array(N).fill(0).map(_ => 2 * Math.random() - 1);\n    if (big) {\n      v = v.map(n => bignumber(n));\n    }\n    if (cplx) {\n      v = v.map(n => complex(n));\n    } // project to orthogonal complement\n\n    v = orthogonalComplement(v, orthog); // normalize\n\n    return normalize(v, type);\n  }\n  /**\n   * Project vector v to the orthogonal complement of an array of vectors\n   */\n\n  function orthogonalComplement(v, orthog) {\n    for (var w of orthog) {\n      // v := v − (w, v)/∥w∥² w\n      v = subtract(v, multiply(divideScalar(dot(w, v), dot(w, w)), w));\n    }\n    return v;\n  }\n  /**\n   * Calculate the norm of a vector.\n   * We can't use math.norm because factory can't handle circular dependency.\n   * Seriously, I'm really fed up with factory.\n   */\n\n  function norm(v) {\n    return abs(sqrt(dot(v, v)));\n  }\n  /**\n   * Normalize a vector\n   * @template T\n   * @param {T[]} v\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {T[]} normalized vec\n   */\n\n  function normalize(v, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n    return multiply(divideScalar(one, norm(v)), v);\n  }\n  return complexEigs;\n}","map":{"version":3,"names":["clone","createComplexEigs","_ref","addScalar","subtract","flatten","multiply","multiplyScalar","divideScalar","sqrt","abs","bignumber","diag","inv","qr","usolve","usolveAll","equal","complex","larger","smaller","matrixFromColumns","dot","complexEigs","arr","N","prec","type","findVectors","undefined","R","balance","reduceToHessenberg","values","C","iterateUntilTriangular","vectors","findEigenvectors","big","cplx","zero","one","radix","radixSq","Rdiag","Array","fill","last","i","colNorm","rowNorm","j","c","f","_c","rowDivRadix","rowMulRadix","condition","g","_j","maxIndex","max","el","tmp1","_j2","tmp2","tmp3","_j3","n","k","_k","_k2","A","lambdas","Sdiag","Qtotal","Qpartial","lastConvergenceBefore","Q","_i","push","unshift","inflateMatrix","pop","_i2","ll","eigenvalues2x2","jordanBase2x2","_i3","sort","a","b","err","Error","join","blockDiag","Cinv","U","uniqueValues","multiplicities","λ","indexOf","len","length","E","failedLambdas","_i4","_λ","_A","solutions","map","v","shift","approxVec","inverseIterate","d","trA","detA","x","y","l1","l2","na","nb","nc","nd","_i5","M","I","sub","_i6","fn","orthog","largeNum","randomOrthogonalVector","norm","orthogonalComplement","normalize","_","Math","random","w"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/function/matrix/eigs/complexEigs.js"],"sourcesContent":["import { clone } from '../../../utils/object.js';\nexport function createComplexEigs(_ref) {\n  var {\n    addScalar,\n    subtract,\n    flatten,\n    multiply,\n    multiplyScalar,\n    divideScalar,\n    sqrt,\n    abs,\n    bignumber,\n    diag,\n    inv,\n    qr,\n    usolve,\n    usolveAll,\n    equal,\n    complex,\n    larger,\n    smaller,\n    matrixFromColumns,\n    dot\n  } = _ref;\n\n  /**\n   * @param {number[][]} arr the matrix to find eigenvalues of\n   * @param {number} N size of the matrix\n   * @param {number|BigNumber} prec precision, anything lower will be considered zero\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @param {boolean} findVectors should we find eigenvectors?\n   *\n   * @returns {{ values: number[], vectors: number[][] }}\n   */\n  function complexEigs(arr, N, prec, type, findVectors) {\n    if (findVectors === undefined) {\n      findVectors = true;\n    } // TODO check if any row/col are zero except the diagonal\n    // make sure corresponding rows and columns have similar magnitude\n    // important because of numerical stability\n\n\n    var R = balance(arr, N, prec, type, findVectors); // R is the row transformation matrix\n    // A' = R A R⁻¹, A is the original matrix\n    // (if findVectors is false, R is undefined)\n    // TODO if magnitudes of elements vary over many orders,\n    // move greatest elements to the top left corner\n    // using similarity transformations, reduce the matrix\n    // to Hessenberg form (upper triangular plus one subdiagonal row)\n    // updates the transformation matrix R with new row operationsq\n\n    reduceToHessenberg(arr, N, prec, type, findVectors, R); // find eigenvalues\n\n    var {\n      values,\n      C\n    } = iterateUntilTriangular(arr, N, prec, type, findVectors); // values is the list of eigenvalues, C is the column\n    // transformation matrix that transforms the hessenberg\n    // matrix to upper triangular\n    // compose transformations A → hess. and hess. → triang.\n\n    C = multiply(inv(R), C);\n    var vectors;\n\n    if (findVectors) {\n      vectors = findEigenvectors(arr, N, C, values, prec, type);\n      vectors = matrixFromColumns(...vectors);\n    }\n\n    return {\n      values,\n      vectors\n    };\n  }\n  /**\n   * @param {number[][]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {number[][]}\n   */\n\n\n  function balance(arr, N, prec, type, findVectors) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1; // base of the floating-point arithmetic\n\n    var radix = big ? bignumber(10) : 2;\n    var radixSq = multiplyScalar(radix, radix); // the diagonal transformation matrix R\n\n    var Rdiag;\n\n    if (findVectors) {\n      Rdiag = Array(N).fill(one);\n    } // this isn't the only time we loop thru the matrix...\n\n\n    var last = false;\n\n    while (!last) {\n      // ...haha I'm joking! unless...\n      last = true;\n\n      for (var i = 0; i < N; i++) {\n        // compute the taxicab norm of i-th column and row\n        // TODO optimize for complex numbers\n        var colNorm = zero;\n        var rowNorm = zero;\n\n        for (var j = 0; j < N; j++) {\n          if (i === j) continue;\n          var c = abs(arr[i][j]);\n          colNorm = addScalar(colNorm, c);\n          rowNorm = addScalar(rowNorm, c);\n        }\n\n        if (!equal(colNorm, 0) && !equal(rowNorm, 0)) {\n          // find integer power closest to balancing the matrix\n          // (we want to scale only by integer powers of radix,\n          // so that we don't lose any precision due to round-off)\n          var f = one;\n          var _c = colNorm;\n          var rowDivRadix = divideScalar(rowNorm, radix);\n          var rowMulRadix = multiplyScalar(rowNorm, radix);\n\n          while (smaller(_c, rowDivRadix)) {\n            _c = multiplyScalar(_c, radixSq);\n            f = multiplyScalar(f, radix);\n          }\n\n          while (larger(_c, rowMulRadix)) {\n            _c = divideScalar(_c, radixSq);\n            f = divideScalar(f, radix);\n          } // check whether balancing is needed\n          // condition = (c + rowNorm) / f < 0.95 * (colNorm + rowNorm)\n\n\n          var condition = smaller(divideScalar(addScalar(_c, rowNorm), f), multiplyScalar(addScalar(colNorm, rowNorm), 0.95)); // apply balancing similarity transformation\n\n          if (condition) {\n            // we should loop once again to check whether\n            // another rebalancing is needed\n            last = false;\n            var g = divideScalar(1, f);\n\n            for (var _j = 0; _j < N; _j++) {\n              if (i === _j) {\n                continue;\n              }\n\n              arr[i][_j] = multiplyScalar(arr[i][_j], f);\n              arr[_j][i] = multiplyScalar(arr[_j][i], g);\n            } // keep track of transformations\n\n\n            if (findVectors) {\n              Rdiag[i] = multiplyScalar(Rdiag[i], f);\n            }\n          }\n        }\n      }\n    } // return the diagonal row transformation matrix\n\n\n    return diag(Rdiag);\n  }\n  /**\n   * @param {number[][]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @param {boolean} findVectors\n   * @param {number[][]} R the row transformation matrix that will be modified\n   */\n\n\n  function reduceToHessenberg(arr, N, prec, type, findVectors, R) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n\n    if (big) {\n      prec = bignumber(prec);\n    }\n\n    for (var i = 0; i < N - 2; i++) {\n      // Find the largest subdiag element in the i-th col\n      var maxIndex = 0;\n      var max = zero;\n\n      for (var j = i + 1; j < N; j++) {\n        var el = arr[j][i];\n\n        if (smaller(abs(max), abs(el))) {\n          max = el;\n          maxIndex = j;\n        }\n      } // This col is pivoted, no need to do anything\n\n\n      if (smaller(abs(max), prec)) {\n        continue;\n      }\n\n      if (maxIndex !== i + 1) {\n        // Interchange maxIndex-th and (i+1)-th row\n        var tmp1 = arr[maxIndex];\n        arr[maxIndex] = arr[i + 1];\n        arr[i + 1] = tmp1; // Interchange maxIndex-th and (i+1)-th column\n\n        for (var _j2 = 0; _j2 < N; _j2++) {\n          var tmp2 = arr[_j2][maxIndex];\n          arr[_j2][maxIndex] = arr[_j2][i + 1];\n          arr[_j2][i + 1] = tmp2;\n        } // keep track of transformations\n\n\n        if (findVectors) {\n          var tmp3 = R[maxIndex];\n          R[maxIndex] = R[i + 1];\n          R[i + 1] = tmp3;\n        }\n      } // Reduce following rows and columns\n\n\n      for (var _j3 = i + 2; _j3 < N; _j3++) {\n        var n = divideScalar(arr[_j3][i], max);\n\n        if (n === 0) {\n          continue;\n        } // from j-th row subtract n-times (i+1)th row\n\n\n        for (var k = 0; k < N; k++) {\n          arr[_j3][k] = subtract(arr[_j3][k], multiplyScalar(n, arr[i + 1][k]));\n        } // to (i+1)th column add n-times j-th column\n\n\n        for (var _k = 0; _k < N; _k++) {\n          arr[_k][i + 1] = addScalar(arr[_k][i + 1], multiplyScalar(n, arr[_k][_j3]));\n        } // keep track of transformations\n\n\n        if (findVectors) {\n          for (var _k2 = 0; _k2 < N; _k2++) {\n            R[_j3][_k2] = subtract(R[_j3][_k2], multiplyScalar(n, R[i + 1][_k2]));\n          }\n        }\n      }\n    }\n\n    return R;\n  }\n  /**\n   * @returns {{values: values, C: Matrix}}\n   * @see Press, Wiliams: Numerical recipes in Fortran 77\n   * @see https://en.wikipedia.org/wiki/QR_algorithm\n   */\n\n\n  function iterateUntilTriangular(A, N, prec, type, findVectors) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n\n    if (big) {\n      prec = bignumber(prec);\n    } // The Francis Algorithm\n    // The core idea of this algorithm is that doing successive\n    // A' = Q⁺AQ transformations will eventually converge to block-\n    // upper-triangular with diagonal blocks either 1x1 or 2x2.\n    // The Q here is the one from the QR decomposition, A = QR.\n    // Since the eigenvalues of a block-upper-triangular matrix are\n    // the eigenvalues of its diagonal blocks and we know how to find\n    // eigenvalues of a 2x2 matrix, we know the eigenvalues of A.\n\n\n    var arr = clone(A); // the list of converged eigenvalues\n\n    var lambdas = []; // size of arr, which will get smaller as eigenvalues converge\n\n    var n = N; // the diagonal of the block-diagonal matrix that turns\n    // converged 2x2 matrices into upper triangular matrices\n\n    var Sdiag = []; // N×N matrix describing the overall transformation done during the QR algorithm\n\n    var Qtotal = findVectors ? diag(Array(N).fill(one)) : undefined; // n×n matrix describing the QR transformations done since last convergence\n\n    var Qpartial = findVectors ? diag(Array(n).fill(one)) : undefined; // last eigenvalue converged before this many steps\n\n    var lastConvergenceBefore = 0;\n\n    while (lastConvergenceBefore <= 100) {\n      lastConvergenceBefore += 1; // TODO if the convergence is slow, do something clever\n      // Perform the factorization\n\n      var k = 0; // TODO set close to an eigenvalue\n\n      for (var i = 0; i < n; i++) {\n        arr[i][i] = subtract(arr[i][i], k);\n      } // TODO do an implicit QR transformation\n\n\n      var {\n        Q,\n        R\n      } = qr(arr);\n      arr = multiply(R, Q);\n\n      for (var _i = 0; _i < n; _i++) {\n        arr[_i][_i] = addScalar(arr[_i][_i], k);\n      } // keep track of transformations\n\n\n      if (findVectors) {\n        Qpartial = multiply(Qpartial, Q);\n      } // The rightmost diagonal element converged to an eigenvalue\n\n\n      if (n === 1 || smaller(abs(arr[n - 1][n - 2]), prec)) {\n        lastConvergenceBefore = 0;\n        lambdas.push(arr[n - 1][n - 1]); // keep track of transformations\n\n        if (findVectors) {\n          Sdiag.unshift([[1]]);\n          inflateMatrix(Qpartial, N);\n          Qtotal = multiply(Qtotal, Qpartial);\n\n          if (n > 1) {\n            Qpartial = diag(Array(n - 1).fill(one));\n          }\n        } // reduce the matrix size\n\n\n        n -= 1;\n        arr.pop();\n\n        for (var _i2 = 0; _i2 < n; _i2++) {\n          arr[_i2].pop();\n        } // The rightmost diagonal 2x2 block converged\n\n      } else if (n === 2 || smaller(abs(arr[n - 2][n - 3]), prec)) {\n        lastConvergenceBefore = 0;\n        var ll = eigenvalues2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1]);\n        lambdas.push(...ll); // keep track of transformations\n\n        if (findVectors) {\n          Sdiag.unshift(jordanBase2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1], ll[0], ll[1], prec, type));\n          inflateMatrix(Qpartial, N);\n          Qtotal = multiply(Qtotal, Qpartial);\n\n          if (n > 2) {\n            Qpartial = diag(Array(n - 2).fill(one));\n          }\n        } // reduce the matrix size\n\n\n        n -= 2;\n        arr.pop();\n        arr.pop();\n\n        for (var _i3 = 0; _i3 < n; _i3++) {\n          arr[_i3].pop();\n\n          arr[_i3].pop();\n        }\n      }\n\n      if (n === 0) {\n        break;\n      }\n    } // standard sorting\n\n\n    lambdas.sort((a, b) => +subtract(abs(a), abs(b))); // the algorithm didn't converge\n\n    if (lastConvergenceBefore > 100) {\n      var err = Error('The eigenvalues failed to converge. Only found these eigenvalues: ' + lambdas.join(', '));\n      err.values = lambdas;\n      err.vectors = [];\n      throw err;\n    } // combine the overall QR transformation Qtotal with the subsequent\n    // transformation S that turns the diagonal 2x2 blocks to upper triangular\n\n\n    var C = findVectors ? multiply(Qtotal, blockDiag(Sdiag, N)) : undefined;\n    return {\n      values: lambdas,\n      C\n    };\n  }\n  /**\n   * @param {Matrix} A original matrix\n   * @param {number} N size of A\n   * @param {Matrix} C column transformation matrix that turns A into upper triangular\n   * @param {number[]} values array of eigenvalues of A\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {number[][]} eigenvalues\n   */\n\n\n  function findEigenvectors(A, N, C, values, prec, type) {\n    var Cinv = inv(C);\n    var U = multiply(Cinv, A, C);\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1; // turn values into a kind of \"multiset\"\n    // this way it is easier to find eigenvectors\n\n    var uniqueValues = [];\n    var multiplicities = [];\n\n    for (var λ of values) {\n      var i = indexOf(uniqueValues, λ, equal);\n\n      if (i === -1) {\n        uniqueValues.push(λ);\n        multiplicities.push(1);\n      } else {\n        multiplicities[i] += 1;\n      }\n    } // find eigenvectors by solving U − λE = 0\n    // TODO replace with an iterative eigenvector algorithm\n    // (this one might fail for imprecise eigenvalues)\n\n\n    var vectors = [];\n    var len = uniqueValues.length;\n    var b = Array(N).fill(zero);\n    var E = diag(Array(N).fill(one)); // eigenvalues for which usolve failed (due to numerical error)\n\n    var failedLambdas = [];\n\n    for (var _i4 = 0; _i4 < len; _i4++) {\n      var _λ = uniqueValues[_i4];\n\n      var _A = subtract(U, multiply(_λ, E)); // the characteristic matrix\n\n\n      var solutions = usolveAll(_A, b);\n      solutions = solutions.map(v => multiply(C, v));\n      solutions.shift(); // ignore the null vector\n      // looks like we missed something, try inverse iteration\n\n      while (solutions.length < multiplicities[_i4]) {\n        var approxVec = inverseIterate(_A, N, solutions, prec, type);\n\n        if (approxVec == null) {\n          // no more vectors were found\n          failedLambdas.push(_λ);\n          break;\n        }\n\n        solutions.push(approxVec);\n      }\n\n      vectors.push(...solutions.map(v => flatten(v)));\n    }\n\n    if (failedLambdas.length !== 0) {\n      var err = new Error('Failed to find eigenvectors for the following eigenvalues: ' + failedLambdas.join(', '));\n      err.values = values;\n      err.vectors = vectors;\n      throw err;\n    }\n\n    return vectors;\n  }\n  /**\n   * Compute the eigenvalues of an 2x2 matrix\n   * @return {[number,number]}\n   */\n\n\n  function eigenvalues2x2(a, b, c, d) {\n    // λ± = ½ trA ± ½ √( tr²A - 4 detA )\n    var trA = addScalar(a, d);\n    var detA = subtract(multiplyScalar(a, d), multiplyScalar(b, c));\n    var x = multiplyScalar(trA, 0.5);\n    var y = multiplyScalar(sqrt(subtract(multiplyScalar(trA, trA), multiplyScalar(4, detA))), 0.5);\n    return [addScalar(x, y), subtract(x, y)];\n  }\n  /**\n   * For an 2x2 matrix compute the transformation matrix S,\n   * so that SAS⁻¹ is an upper triangular matrix\n   * @return {[[number,number],[number,number]]}\n   * @see https://math.berkeley.edu/~ogus/old/Math_54-05/webfoils/jordan.pdf\n   * @see http://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n   */\n\n\n  function jordanBase2x2(a, b, c, d, l1, l2, prec, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1; // matrix is already upper triangular\n    // return an identity matrix\n\n    if (smaller(abs(c), prec)) {\n      return [[one, zero], [zero, one]];\n    } // matrix is diagonalizable\n    // return its eigenvectors as columns\n\n\n    if (larger(abs(subtract(l1, l2)), prec)) {\n      return [[subtract(l1, d), subtract(l2, d)], [c, c]];\n    } // matrix is not diagonalizable\n    // compute off-diagonal elements of N = A - λI\n    // N₁₂ = 0 ⇒ S = ( N⃗₁, I⃗₁ )\n    // N₁₂ ≠ 0 ⇒ S = ( N⃗₂, I⃗₂ )\n\n\n    var na = subtract(a, l1);\n    var nb = subtract(b, l1);\n    var nc = subtract(c, l1);\n    var nd = subtract(d, l1);\n\n    if (smaller(abs(nb), prec)) {\n      return [[na, one], [nc, zero]];\n    } else {\n      return [[nb, zero], [nd, one]];\n    }\n  }\n  /**\n   * Enlarge the matrix from n×n to N×N, setting the new\n   * elements to 1 on diagonal and 0 elsewhere\n   */\n\n\n  function inflateMatrix(arr, N) {\n    // add columns\n    for (var i = 0; i < arr.length; i++) {\n      arr[i].push(...Array(N - arr[i].length).fill(0));\n    } // add rows\n\n\n    for (var _i5 = arr.length; _i5 < N; _i5++) {\n      arr.push(Array(N).fill(0));\n      arr[_i5][_i5] = 1;\n    }\n\n    return arr;\n  }\n  /**\n   * Create a block-diagonal matrix with the given square matrices on the diagonal\n   * @param {Matrix[] | number[][][]} arr array of matrices to be placed on the diagonal\n   * @param {number} N the size of the resulting matrix\n   */\n\n\n  function blockDiag(arr, N) {\n    var M = [];\n\n    for (var i = 0; i < N; i++) {\n      M[i] = Array(N).fill(0);\n    }\n\n    var I = 0;\n\n    for (var sub of arr) {\n      var n = sub.length;\n\n      for (var _i6 = 0; _i6 < n; _i6++) {\n        for (var j = 0; j < n; j++) {\n          M[I + _i6][I + j] = sub[_i6][j];\n        }\n      }\n\n      I += n;\n    }\n\n    return M;\n  }\n  /**\n   * Finds the index of an element in an array using a custom equality function\n   * @template T\n   * @param {Array<T>} arr array in which to search\n   * @param {T} el the element to find\n   * @param {function(T, T): boolean} fn the equality function, first argument is an element of `arr`, the second is always `el`\n   * @returns {number} the index of `el`, or -1 when it's not in `arr`\n   */\n\n\n  function indexOf(arr, el, fn) {\n    for (var i = 0; i < arr.length; i++) {\n      if (fn(arr[i], el)) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * Provided a near-singular upper-triangular matrix A and a list of vectors,\n   * finds an eigenvector of A with the smallest eigenvalue, which is orthogonal\n   * to each vector in the list\n   * @template T\n   * @param {T[][]} A near-singular square matrix\n   * @param {number} N dimension\n   * @param {T[][]} orthog list of vectors\n   * @param {number} prec epsilon\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @return {T[] | null} eigenvector\n   *\n   * @see Numerical Recipes for Fortran 77 – 11.7 Eigenvalues or Eigenvectors by Inverse Iteration\n   */\n\n\n  function inverseIterate(A, N, orthog, prec, type) {\n    var largeNum = type === 'BigNumber' ? bignumber(1000) : 1000;\n    var b; // the vector\n    // you better choose a random vector before I count to five\n\n    var i = 0;\n\n    while (true) {\n      b = randomOrthogonalVector(N, orthog, type);\n      b = usolve(A, b);\n\n      if (larger(norm(b), largeNum)) {\n        break;\n      }\n\n      if (++i >= 5) {\n        return null;\n      }\n    } // you better converge before I count to ten\n\n\n    i = 0;\n\n    while (true) {\n      var c = usolve(A, b);\n\n      if (smaller(norm(orthogonalComplement(b, [c])), prec)) {\n        break;\n      }\n\n      if (++i >= 10) {\n        return null;\n      }\n\n      b = normalize(c);\n    }\n\n    return b;\n  }\n  /**\n   * Generates a random unit vector of dimension N, orthogonal to each vector in the list\n   * @template T\n   * @param {number} N dimension\n   * @param {T[][]} orthog list of vectors\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {T[]} random vector\n   */\n\n\n  function randomOrthogonalVector(N, orthog, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex'; // generate random vector with the correct type\n\n    var v = Array(N).fill(0).map(_ => 2 * Math.random() - 1);\n\n    if (big) {\n      v = v.map(n => bignumber(n));\n    }\n\n    if (cplx) {\n      v = v.map(n => complex(n));\n    } // project to orthogonal complement\n\n\n    v = orthogonalComplement(v, orthog); // normalize\n\n    return normalize(v, type);\n  }\n  /**\n   * Project vector v to the orthogonal complement of an array of vectors\n   */\n\n\n  function orthogonalComplement(v, orthog) {\n    for (var w of orthog) {\n      // v := v − (w, v)/∥w∥² w\n      v = subtract(v, multiply(divideScalar(dot(w, v), dot(w, w)), w));\n    }\n\n    return v;\n  }\n  /**\n   * Calculate the norm of a vector.\n   * We can't use math.norm because factory can't handle circular dependency.\n   * Seriously, I'm really fed up with factory.\n   */\n\n\n  function norm(v) {\n    return abs(sqrt(dot(v, v)));\n  }\n  /**\n   * Normalize a vector\n   * @template T\n   * @param {T[]} v\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {T[]} normalized vec\n   */\n\n\n  function normalize(v, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n    return multiply(divideScalar(one, norm(v)), v);\n  }\n\n  return complexEigs;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}