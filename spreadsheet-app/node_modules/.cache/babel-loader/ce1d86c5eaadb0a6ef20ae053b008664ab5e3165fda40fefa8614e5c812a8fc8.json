{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'to';\nvar dependencies = ['typed', 'matrix'];\nexport var createTo = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Change the unit of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.to(x, unit)\n   *\n   * Examples:\n   *\n   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm\n   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm\n   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits\n   *\n   * See also:\n   *\n   *    unit\n   *\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n   *                                      or a unit without value.\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\n   */\n\n  return typed(name, {\n    'Unit, Unit | string': function UnitUnitString(x, unit) {\n      return x.to(unit);\n    },\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'Matrix, any': function MatrixAny(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(x, y, this, false);\n    },\n    'any, Matrix': function anyMatrix(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});","map":{"version":3,"names":["factory","createAlgorithm13","createAlgorithm14","name","dependencies","createTo","_ref","typed","matrix","algorithm13","algorithm14","UnitUnitString","x","unit","to","MatrixMatrix","y","ArrayArray","valueOf","ArrayMatrix","MatrixArray","MatrixAny","anyMatrix","ArrayAny","anyArray"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/function/unit/to.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'to';\nvar dependencies = ['typed', 'matrix'];\nexport var createTo = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Change the unit of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.to(x, unit)\n   *\n   * Examples:\n   *\n   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm\n   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm\n   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits\n   *\n   * See also:\n   *\n   *    unit\n   *\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n   *                                      or a unit without value.\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\n   */\n\n  return typed(name, {\n    'Unit, Unit | string': function UnitUnitString(x, unit) {\n      return x.to(unit);\n    },\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'Matrix, any': function MatrixAny(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(x, y, this, false);\n    },\n    'any, Matrix': function anyMatrix(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,iBAAiB,QAAQ,wCAAwC;AAC1E,SAASC,iBAAiB,QAAQ,wCAAwC;AAC1E,IAAIC,IAAI,GAAG,IAAI;AACf,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC;AACtC,OAAO,IAAIC,QAAQ,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACvE,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR,IAAIG,WAAW,GAAGR,iBAAiB,CAAC;IAClCM;EACF,CAAC,CAAC;EACF,IAAIG,WAAW,GAAGR,iBAAiB,CAAC;IAClCK;EACF,CAAC,CAAC;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAOA,KAAK,CAACJ,IAAI,EAAE;IACjB,qBAAqB,EAAE,SAASQ,cAAcA,CAACC,CAAC,EAAEC,IAAI,EAAE;MACtD,OAAOD,CAAC,CAACE,EAAE,CAACD,IAAI,CAAC;IACnB,CAAC;IACD,gBAAgB,EAAE,SAASE,YAAYA,CAACH,CAAC,EAAEI,CAAC,EAAE;MAC5C;MACA,OAAOP,WAAW,CAACG,CAAC,EAAEI,CAAC,EAAE,IAAI,CAAC;IAChC,CAAC;IACD,cAAc,EAAE,SAASC,UAAUA,CAACL,CAAC,EAAEI,CAAC,EAAE;MACxC;MACA,OAAO,IAAI,CAACR,MAAM,CAACI,CAAC,CAAC,EAAEJ,MAAM,CAACQ,CAAC,CAAC,CAAC,CAACE,OAAO,CAAC,CAAC;IAC7C,CAAC;IACD,eAAe,EAAE,SAASC,WAAWA,CAACP,CAAC,EAAEI,CAAC,EAAE;MAC1C;MACA,OAAO,IAAI,CAACR,MAAM,CAACI,CAAC,CAAC,EAAEI,CAAC,CAAC;IAC3B,CAAC;IACD,eAAe,EAAE,SAASI,WAAWA,CAACR,CAAC,EAAEI,CAAC,EAAE;MAC1C;MACA,OAAO,IAAI,CAACJ,CAAC,EAAEJ,MAAM,CAACQ,CAAC,CAAC,CAAC;IAC3B,CAAC;IACD,aAAa,EAAE,SAASK,SAASA,CAACT,CAAC,EAAEI,CAAC,EAAE;MACtC;MACA,OAAON,WAAW,CAACE,CAAC,EAAEI,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC;IACvC,CAAC;IACD,aAAa,EAAE,SAASM,SAASA,CAACV,CAAC,EAAEI,CAAC,EAAE;MACtC;MACA,OAAON,WAAW,CAACM,CAAC,EAAEJ,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;IACtC,CAAC;IACD,YAAY,EAAE,SAASW,QAAQA,CAACX,CAAC,EAAEI,CAAC,EAAE;MACpC;MACA,OAAON,WAAW,CAACF,MAAM,CAACI,CAAC,CAAC,EAAEI,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAACE,OAAO,CAAC,CAAC;IACzD,CAAC;IACD,YAAY,EAAE,SAASM,QAAQA,CAACZ,CAAC,EAAEI,CAAC,EAAE;MACpC;MACA,OAAON,WAAW,CAACF,MAAM,CAACQ,CAAC,CAAC,EAAEJ,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAACM,OAAO,CAAC,CAAC;IACxD;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}