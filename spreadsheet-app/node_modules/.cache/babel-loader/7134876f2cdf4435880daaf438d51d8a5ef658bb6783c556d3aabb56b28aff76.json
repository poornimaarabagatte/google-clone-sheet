{"ast":null,"code":"import { isConstantNode, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'derivative';\nvar dependencies = ['typed', 'config', 'parse', 'simplify', 'equal', 'isZero', 'numeric', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createDerivative = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    parse,\n    simplify,\n    equal,\n    isZero,\n    numeric,\n    ConstantNode,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n\n  /**\n   * Takes the derivative of an expression expressed in parser Nodes.\n   * The derivative will be taken over the supplied variable in the\n   * second parameter. If there are multiple variables in the expression,\n   * it will return a partial derivative.\n   *\n   * This uses rules of differentiation which can be found here:\n   *\n   * - [Differentiation rules (Wikipedia)](https://en.wikipedia.org/wiki/Differentiation_rules)\n   *\n   * Syntax:\n   *\n   *     derivative(expr, variable)\n   *     derivative(expr, variable, options)\n   *\n   * Examples:\n   *\n   *     math.derivative('x^2', 'x')                     // Node {2 * x}\n   *     math.derivative('x^2', 'x', {simplify: false})  // Node {2 * 1 * x ^ (2 - 1)\n   *     math.derivative('sin(2x)', 'x'))                // Node {2 * cos(2 * x)}\n   *     math.derivative('2*x', 'x').evaluate()          // number 2\n   *     math.derivative('x^2', 'x').evaluate({x: 4})    // number 8\n   *     const f = math.parse('x^2')\n   *     const x = math.parse('x')\n   *     math.derivative(f, x)                           // Node {2 * x}\n   *\n   * See also:\n   *\n   *     simplify, parse, evaluate\n   *\n   * @param  {Node | string} expr           The expression to differentiate\n   * @param  {SymbolNode | string} variable The variable over which to differentiate\n   * @param  {{simplify: boolean}} [options]\n   *                         There is one option available, `simplify`, which\n   *                         is true by default. When false, output will not\n   *                         be simplified.\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n  var derivative = typed('derivative', {\n    'Node, SymbolNode, Object': function NodeSymbolNodeObject(expr, variable, options) {\n      var constNodes = {};\n      constTag(constNodes, expr, variable.name);\n      var res = _derivative(expr, constNodes);\n      return options.simplify ? simplify(res) : res;\n    },\n    'Node, SymbolNode': function NodeSymbolNode(expr, variable) {\n      return this(expr, variable, {\n        simplify: true\n      });\n    },\n    'string, SymbolNode': function stringSymbolNode(expr, variable) {\n      return this(parse(expr), variable);\n    },\n    'string, SymbolNode, Object': function stringSymbolNodeObject(expr, variable, options) {\n      return this(parse(expr), variable, options);\n    },\n    'string, string': function stringString(expr, variable) {\n      return this(parse(expr), parse(variable));\n    },\n    'string, string, Object': function stringStringObject(expr, variable, options) {\n      return this(parse(expr), parse(variable), options);\n    },\n    'Node, string': function NodeString(expr, variable) {\n      return this(expr, parse(variable));\n    },\n    'Node, string, Object': function NodeStringObject(expr, variable, options) {\n      return this(expr, parse(variable), options);\n    } // TODO: replace the 8 signatures above with 4 as soon as typed-function supports optional arguments\n\n    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}\n    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {\n      let res = expr\n      for (let i = 0; i < order; i++) {\n        let constNodes = {}\n        constTag(constNodes, expr, variable.name)\n        res = _derivative(res, constNodes)\n      }\n      return res\n    }\n    */\n  });\n  derivative._simplify = true;\n  derivative.toTex = function (deriv) {\n    return _derivTex.apply(null, deriv.args);\n  }; // FIXME: move the toTex method of derivative to latex.js. Difficulty is that it relies on parse.\n  // NOTE: the optional \"order\" parameter here is currently unused\n\n  var _derivTex = typed('_derivTex', {\n    'Node, SymbolNode': function NodeSymbolNode(expr, x) {\n      if (isConstantNode(expr) && typeOf(expr.value) === 'string') {\n        return _derivTex(parse(expr.value).toString(), x.toString(), 1);\n      } else {\n        return _derivTex(expr.toString(), x.toString(), 1);\n      }\n    },\n    'Node, ConstantNode': function NodeConstantNode(expr, x) {\n      if (typeOf(x.value) === 'string') {\n        return _derivTex(expr, parse(x.value));\n      } else {\n        throw new Error(\"The second parameter to 'derivative' is a non-string constant\");\n      }\n    },\n    'Node, SymbolNode, ConstantNode': function NodeSymbolNodeConstantNode(expr, x, order) {\n      return _derivTex(expr.toString(), x.name, order.value);\n    },\n    'string, string, number': function stringStringNumber(expr, x, order) {\n      var d;\n      if (order === 1) {\n        d = '{d\\\\over d' + x + '}';\n      } else {\n        d = '{d^{' + order + '}\\\\over d' + x + '^{' + order + '}}';\n      }\n      return d + \"\\\\left[\".concat(expr, \"\\\\right]\");\n    }\n  });\n  /**\n   * Does a depth-first search on the expression tree to identify what Nodes\n   * are constants (e.g. 2 + 2), and stores the ones that are constants in\n   * constNodes. Classification is done as follows:\n   *\n   *   1. ConstantNodes are constants.\n   *   2. If there exists a SymbolNode, of which we are differentiating over,\n   *      in the subtree it is not constant.\n   *\n   * @param  {Object} constNodes  Holds the nodes that are constant\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {string} varName     Variable that we are differentiating\n   * @return {boolean}  if node is constant\n   */\n  // TODO: can we rewrite constTag into a pure function?\n\n  var constTag = typed('constTag', {\n    'Object, ConstantNode, string': function ObjectConstantNodeString(constNodes, node) {\n      constNodes[node] = true;\n      return true;\n    },\n    'Object, SymbolNode, string': function ObjectSymbolNodeString(constNodes, node, varName) {\n      // Treat other variables like constants. For reasoning, see:\n      //   https://en.wikipedia.org/wiki/Partial_derivative\n      if (node.name !== varName) {\n        constNodes[node] = true;\n        return true;\n      }\n      return false;\n    },\n    'Object, ParenthesisNode, string': function ObjectParenthesisNodeString(constNodes, node, varName) {\n      return constTag(constNodes, node.content, varName);\n    },\n    'Object, FunctionAssignmentNode, string': function ObjectFunctionAssignmentNodeString(constNodes, node, varName) {\n      if (node.params.indexOf(varName) === -1) {\n        constNodes[node] = true;\n        return true;\n      }\n      return constTag(constNodes, node.expr, varName);\n    },\n    'Object, FunctionNode | OperatorNode, string': function ObjectFunctionNodeOperatorNodeString(constNodes, node, varName) {\n      if (node.args.length > 0) {\n        var isConst = constTag(constNodes, node.args[0], varName);\n        for (var i = 1; i < node.args.length; ++i) {\n          isConst = constTag(constNodes, node.args[i], varName) && isConst;\n        }\n        if (isConst) {\n          constNodes[node] = true;\n          return true;\n        }\n      }\n      return false;\n    }\n  });\n  /**\n   * Applies differentiation rules.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {Object} constNodes  Holds the nodes that are constant\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n\n  var _derivative = typed('_derivative', {\n    'ConstantNode, Object': function ConstantNodeObject(node) {\n      return createConstantNode(0);\n    },\n    'SymbolNode, Object': function SymbolNodeObject(node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n      return createConstantNode(1);\n    },\n    'ParenthesisNode, Object': function ParenthesisNodeObject(node, constNodes) {\n      return new ParenthesisNode(_derivative(node.content, constNodes));\n    },\n    'FunctionAssignmentNode, Object': function FunctionAssignmentNodeObject(node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n      return _derivative(node.expr, constNodes);\n    },\n    'FunctionNode, Object': function FunctionNodeObject(node, constNodes) {\n      if (node.args.length !== 1) {\n        funcArgsCheck(node);\n      }\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n      var arg0 = node.args[0];\n      var arg1;\n      var div = false; // is output a fraction?\n\n      var negative = false; // is output negative?\n\n      var funcDerivative;\n      switch (node.name) {\n        case 'cbrt':\n          // d/dx(cbrt(x)) = 1 / (3x^(2/3))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(3), new OperatorNode('^', 'pow', [arg0, new OperatorNode('/', 'divide', [createConstantNode(2), createConstantNode(3)])])]);\n          break;\n        case 'sqrt':\n        case 'nthRoot':\n          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))\n          if (node.args.length === 1) {\n            div = true;\n            funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(2), new FunctionNode('sqrt', [arg0])]);\n          } else if (node.args.length === 2) {\n            // Rearrange from nthRoot(x, a) -> x^(1/a)\n            arg1 = new OperatorNode('/', 'divide', [createConstantNode(1), node.args[1]]); // Is a variable?\n\n            constNodes[arg1] = constNodes[node.args[1]];\n            return _derivative(new OperatorNode('^', 'pow', [arg0, arg1]), constNodes);\n          }\n          break;\n        case 'log10':\n          arg1 = createConstantNode(10);\n\n        /* fall through! */\n\n        case 'log':\n          if (!arg1 && node.args.length === 1) {\n            // d/dx(log(x)) = 1 / x\n            funcDerivative = arg0.clone();\n            div = true;\n          } else if (node.args.length === 1 && arg1 || node.args.length === 2 && constNodes[node.args[1]] !== undefined) {\n            // d/dx(log(x, c)) = 1 / (x*ln(c))\n            funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('log', [arg1 || node.args[1]])]);\n            div = true;\n          } else if (node.args.length === 2) {\n            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))\n            return _derivative(new OperatorNode('/', 'divide', [new FunctionNode('log', [arg0]), new FunctionNode('log', [node.args[1]])]), constNodes);\n          }\n          break;\n        case 'pow':\n          constNodes[arg1] = constNodes[node.args[1]]; // Pass to pow operator node parser\n\n          return _derivative(new OperatorNode('^', 'pow', [arg0, node.args[1]]), constNodes);\n        case 'exp':\n          // d/dx(e^x) = e^x\n          funcDerivative = new FunctionNode('exp', [arg0.clone()]);\n          break;\n        case 'sin':\n          // d/dx(sin(x)) = cos(x)\n          funcDerivative = new FunctionNode('cos', [arg0.clone()]);\n          break;\n        case 'cos':\n          // d/dx(cos(x)) = -sin(x)\n          funcDerivative = new OperatorNode('-', 'unaryMinus', [new FunctionNode('sin', [arg0.clone()])]);\n          break;\n        case 'tan':\n          // d/dx(tan(x)) = sec(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sec', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'sec':\n          // d/dx(sec(x)) = sec(x)tan(x)\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tan', [arg0.clone()])]);\n          break;\n        case 'csc':\n          // d/dx(csc(x)) = -csc(x)cot(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('cot', [arg0.clone()])]);\n          break;\n        case 'cot':\n          // d/dx(cot(x)) = -csc(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csc', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'asin':\n          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);\n          break;\n        case 'acos':\n          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);\n          break;\n        case 'atan':\n          // d/dx(atan(x)) = 1 / (x^2 + 1)\n          div = true;\n          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);\n          break;\n        case 'asec':\n          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n        case 'acsc':\n          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n        case 'acot':\n          // d/dx(acot(x)) = -1 / (x^2 + 1)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);\n          break;\n        case 'sinh':\n          // d/dx(sinh(x)) = cosh(x)\n          funcDerivative = new FunctionNode('cosh', [arg0.clone()]);\n          break;\n        case 'cosh':\n          // d/dx(cosh(x)) = sinh(x)\n          funcDerivative = new FunctionNode('sinh', [arg0.clone()]);\n          break;\n        case 'tanh':\n          // d/dx(tanh(x)) = sech(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sech', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'sech':\n          // d/dx(sech(x)) = -sech(x)tanh(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tanh', [arg0.clone()])]);\n          break;\n        case 'csch':\n          // d/dx(csch(x)) = -csch(x)coth(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('coth', [arg0.clone()])]);\n          break;\n        case 'coth':\n          // d/dx(coth(x)) = -csch(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csch', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'asinh':\n          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);\n          break;\n        case 'acosh':\n          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);\n          break;\n        case 'atanh':\n          // d/dx(atanh(x)) = 1 / (1 - x^2)\n          div = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);\n          break;\n        case 'asech':\n          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])])]);\n          break;\n        case 'acsch':\n          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n        case 'acoth':\n          // d/dx(acoth(x)) = -1 / (1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);\n          break;\n        case 'abs':\n          // d/dx(abs(x)) = abs(x)/x\n          funcDerivative = new OperatorNode('/', 'divide', [new FunctionNode(new SymbolNode('abs'), [arg0.clone()]), arg0.clone()]);\n          break;\n        case 'gamma': // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)\n\n        default:\n          throw new Error('Function \"' + node.name + '\" is not supported by derivative, or a wrong number of arguments is passed');\n      }\n      var op, func;\n      if (div) {\n        op = '/';\n        func = 'divide';\n      } else {\n        op = '*';\n        func = 'multiply';\n      }\n      /* Apply chain rule to all functions:\n         F(x)  = f(g(x))\n         F'(x) = g'(x)*f'(g(x)) */\n\n      var chainDerivative = _derivative(arg0, constNodes);\n      if (negative) {\n        chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);\n      }\n      return new OperatorNode(op, func, [chainDerivative, funcDerivative]);\n    },\n    'OperatorNode, Object': function OperatorNodeObject(node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n      if (node.op === '+') {\n        // d/dx(sum(f(x)) = sum(f'(x))\n        return new OperatorNode(node.op, node.fn, node.args.map(function (arg) {\n          return _derivative(arg, constNodes);\n        }));\n      }\n      if (node.op === '-') {\n        // d/dx(+/-f(x)) = +/-f'(x)\n        if (node.isUnary()) {\n          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes)]);\n        } // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)\n\n        if (node.isBinary()) {\n          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes), _derivative(node.args[1], constNodes)]);\n        }\n      }\n      if (node.op === '*') {\n        // d/dx(c*f(x)) = c*f'(x)\n        var constantTerms = node.args.filter(function (arg) {\n          return constNodes[arg] !== undefined;\n        });\n        if (constantTerms.length > 0) {\n          var nonConstantTerms = node.args.filter(function (arg) {\n            return constNodes[arg] === undefined;\n          });\n          var nonConstantNode = nonConstantTerms.length === 1 ? nonConstantTerms[0] : new OperatorNode('*', 'multiply', nonConstantTerms);\n          var newArgs = constantTerms.concat(_derivative(nonConstantNode, constNodes));\n          return new OperatorNode('*', 'multiply', newArgs);\n        } // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)\n\n        return new OperatorNode('+', 'add', node.args.map(function (argOuter) {\n          return new OperatorNode('*', 'multiply', node.args.map(function (argInner) {\n            return argInner === argOuter ? _derivative(argInner, constNodes) : argInner.clone();\n          }));\n        }));\n      }\n      if (node.op === '/' && node.isBinary()) {\n        var arg0 = node.args[0];\n        var arg1 = node.args[1]; // d/dx(f(x) / c) = f'(x) / c\n\n        if (constNodes[arg1] !== undefined) {\n          return new OperatorNode('/', 'divide', [_derivative(arg0, constNodes), arg1]);\n        } // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)\n\n        if (constNodes[arg0] !== undefined) {\n          return new OperatorNode('*', 'multiply', [new OperatorNode('-', 'unaryMinus', [arg0]), new OperatorNode('/', 'divide', [_derivative(arg1, constNodes), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])])]);\n        } // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2\n\n        return new OperatorNode('/', 'divide', [new OperatorNode('-', 'subtract', [new OperatorNode('*', 'multiply', [_derivative(arg0, constNodes), arg1.clone()]), new OperatorNode('*', 'multiply', [arg0.clone(), _derivative(arg1, constNodes)])]), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])]);\n      }\n      if (node.op === '^' && node.isBinary()) {\n        var _arg = node.args[0];\n        var _arg2 = node.args[1];\n        if (constNodes[_arg] !== undefined) {\n          // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1\n          if (isConstantNode(_arg) && (isZero(_arg.value) || equal(_arg.value, 1))) {\n            return createConstantNode(0);\n          } // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)\n\n          return new OperatorNode('*', 'multiply', [node, new OperatorNode('*', 'multiply', [new FunctionNode('log', [_arg.clone()]), _derivative(_arg2.clone(), constNodes)])]);\n        }\n        if (constNodes[_arg2] !== undefined) {\n          if (isConstantNode(_arg2)) {\n            // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0\n            if (isZero(_arg2.value)) {\n              return createConstantNode(0);\n            } // Ignore exponent; f(x)^1 = f(x)\n\n            if (equal(_arg2.value, 1)) {\n              return _derivative(_arg, constNodes);\n            }\n          } // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)\n\n          var powMinusOne = new OperatorNode('^', 'pow', [_arg.clone(), new OperatorNode('-', 'subtract', [_arg2, createConstantNode(1)])]);\n          return new OperatorNode('*', 'multiply', [_arg2.clone(), new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), powMinusOne])]);\n        } // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]\n\n        return new OperatorNode('*', 'multiply', [new OperatorNode('^', 'pow', [_arg.clone(), _arg2.clone()]), new OperatorNode('+', 'add', [new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), new OperatorNode('/', 'divide', [_arg2.clone(), _arg.clone()])]), new OperatorNode('*', 'multiply', [_derivative(_arg2, constNodes), new FunctionNode('log', [_arg.clone()])])])]);\n      }\n      throw new Error('Operator \"' + node.op + '\" is not supported by derivative, or a wrong number of arguments is passed');\n    }\n  });\n  /**\n   * Ensures the number of arguments for a function are correct,\n   * and will throw an error otherwise.\n   *\n   * @param {FunctionNode} node\n   */\n\n  function funcArgsCheck(node) {\n    // TODO add min, max etc\n    if ((node.name === 'log' || node.name === 'nthRoot' || node.name === 'pow') && node.args.length === 2) {\n      return;\n    } // There should be an incorrect number of arguments if we reach here\n    // Change all args to constants to avoid unidentified\n    // symbol error when compiling function\n\n    for (var i = 0; i < node.args.length; ++i) {\n      node.args[i] = createConstantNode(0);\n    }\n    node.compile().evaluate();\n    throw new Error('Expected TypeError, but none found');\n  }\n  /**\n   * Helper function to create a constant node with a specific type\n   * (number, BigNumber, Fraction)\n   * @param {number} value\n   * @param {string} [valueType]\n   * @return {ConstantNode}\n   */\n\n  function createConstantNode(value, valueType) {\n    return new ConstantNode(numeric(value, valueType || config.number));\n  }\n  return derivative;\n});","map":{"version":3,"names":["isConstantNode","typeOf","factory","name","dependencies","createDerivative","_ref","typed","config","parse","simplify","equal","isZero","numeric","ConstantNode","FunctionNode","OperatorNode","ParenthesisNode","SymbolNode","derivative","NodeSymbolNodeObject","expr","variable","options","constNodes","constTag","res","_derivative","NodeSymbolNode","stringSymbolNode","stringSymbolNodeObject","stringString","stringStringObject","NodeString","NodeStringObject","_simplify","toTex","deriv","_derivTex","apply","args","x","value","toString","NodeConstantNode","Error","NodeSymbolNodeConstantNode","order","stringStringNumber","d","concat","ObjectConstantNodeString","node","ObjectSymbolNodeString","varName","ObjectParenthesisNodeString","content","ObjectFunctionAssignmentNodeString","params","indexOf","ObjectFunctionNodeOperatorNodeString","length","isConst","i","ConstantNodeObject","createConstantNode","SymbolNodeObject","undefined","ParenthesisNodeObject","FunctionAssignmentNodeObject","FunctionNodeObject","funcArgsCheck","arg0","arg1","div","negative","funcDerivative","clone","op","func","chainDerivative","OperatorNodeObject","fn","map","arg","isUnary","isBinary","constantTerms","filter","nonConstantTerms","nonConstantNode","newArgs","argOuter","argInner","_arg","_arg2","powMinusOne","compile","evaluate","valueType","number"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/function/algebra/derivative.js"],"sourcesContent":["import { isConstantNode, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'derivative';\nvar dependencies = ['typed', 'config', 'parse', 'simplify', 'equal', 'isZero', 'numeric', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createDerivative = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    parse,\n    simplify,\n    equal,\n    isZero,\n    numeric,\n    ConstantNode,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n\n  /**\n   * Takes the derivative of an expression expressed in parser Nodes.\n   * The derivative will be taken over the supplied variable in the\n   * second parameter. If there are multiple variables in the expression,\n   * it will return a partial derivative.\n   *\n   * This uses rules of differentiation which can be found here:\n   *\n   * - [Differentiation rules (Wikipedia)](https://en.wikipedia.org/wiki/Differentiation_rules)\n   *\n   * Syntax:\n   *\n   *     derivative(expr, variable)\n   *     derivative(expr, variable, options)\n   *\n   * Examples:\n   *\n   *     math.derivative('x^2', 'x')                     // Node {2 * x}\n   *     math.derivative('x^2', 'x', {simplify: false})  // Node {2 * 1 * x ^ (2 - 1)\n   *     math.derivative('sin(2x)', 'x'))                // Node {2 * cos(2 * x)}\n   *     math.derivative('2*x', 'x').evaluate()          // number 2\n   *     math.derivative('x^2', 'x').evaluate({x: 4})    // number 8\n   *     const f = math.parse('x^2')\n   *     const x = math.parse('x')\n   *     math.derivative(f, x)                           // Node {2 * x}\n   *\n   * See also:\n   *\n   *     simplify, parse, evaluate\n   *\n   * @param  {Node | string} expr           The expression to differentiate\n   * @param  {SymbolNode | string} variable The variable over which to differentiate\n   * @param  {{simplify: boolean}} [options]\n   *                         There is one option available, `simplify`, which\n   *                         is true by default. When false, output will not\n   *                         be simplified.\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n  var derivative = typed('derivative', {\n    'Node, SymbolNode, Object': function NodeSymbolNodeObject(expr, variable, options) {\n      var constNodes = {};\n      constTag(constNodes, expr, variable.name);\n\n      var res = _derivative(expr, constNodes);\n\n      return options.simplify ? simplify(res) : res;\n    },\n    'Node, SymbolNode': function NodeSymbolNode(expr, variable) {\n      return this(expr, variable, {\n        simplify: true\n      });\n    },\n    'string, SymbolNode': function stringSymbolNode(expr, variable) {\n      return this(parse(expr), variable);\n    },\n    'string, SymbolNode, Object': function stringSymbolNodeObject(expr, variable, options) {\n      return this(parse(expr), variable, options);\n    },\n    'string, string': function stringString(expr, variable) {\n      return this(parse(expr), parse(variable));\n    },\n    'string, string, Object': function stringStringObject(expr, variable, options) {\n      return this(parse(expr), parse(variable), options);\n    },\n    'Node, string': function NodeString(expr, variable) {\n      return this(expr, parse(variable));\n    },\n    'Node, string, Object': function NodeStringObject(expr, variable, options) {\n      return this(expr, parse(variable), options);\n    } // TODO: replace the 8 signatures above with 4 as soon as typed-function supports optional arguments\n\n    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}\n    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {\n      let res = expr\n      for (let i = 0; i < order; i++) {\n        let constNodes = {}\n        constTag(constNodes, expr, variable.name)\n        res = _derivative(res, constNodes)\n      }\n      return res\n    }\n    */\n\n  });\n  derivative._simplify = true;\n\n  derivative.toTex = function (deriv) {\n    return _derivTex.apply(null, deriv.args);\n  }; // FIXME: move the toTex method of derivative to latex.js. Difficulty is that it relies on parse.\n  // NOTE: the optional \"order\" parameter here is currently unused\n\n\n  var _derivTex = typed('_derivTex', {\n    'Node, SymbolNode': function NodeSymbolNode(expr, x) {\n      if (isConstantNode(expr) && typeOf(expr.value) === 'string') {\n        return _derivTex(parse(expr.value).toString(), x.toString(), 1);\n      } else {\n        return _derivTex(expr.toString(), x.toString(), 1);\n      }\n    },\n    'Node, ConstantNode': function NodeConstantNode(expr, x) {\n      if (typeOf(x.value) === 'string') {\n        return _derivTex(expr, parse(x.value));\n      } else {\n        throw new Error(\"The second parameter to 'derivative' is a non-string constant\");\n      }\n    },\n    'Node, SymbolNode, ConstantNode': function NodeSymbolNodeConstantNode(expr, x, order) {\n      return _derivTex(expr.toString(), x.name, order.value);\n    },\n    'string, string, number': function stringStringNumber(expr, x, order) {\n      var d;\n\n      if (order === 1) {\n        d = '{d\\\\over d' + x + '}';\n      } else {\n        d = '{d^{' + order + '}\\\\over d' + x + '^{' + order + '}}';\n      }\n\n      return d + \"\\\\left[\".concat(expr, \"\\\\right]\");\n    }\n  });\n  /**\n   * Does a depth-first search on the expression tree to identify what Nodes\n   * are constants (e.g. 2 + 2), and stores the ones that are constants in\n   * constNodes. Classification is done as follows:\n   *\n   *   1. ConstantNodes are constants.\n   *   2. If there exists a SymbolNode, of which we are differentiating over,\n   *      in the subtree it is not constant.\n   *\n   * @param  {Object} constNodes  Holds the nodes that are constant\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {string} varName     Variable that we are differentiating\n   * @return {boolean}  if node is constant\n   */\n  // TODO: can we rewrite constTag into a pure function?\n\n\n  var constTag = typed('constTag', {\n    'Object, ConstantNode, string': function ObjectConstantNodeString(constNodes, node) {\n      constNodes[node] = true;\n      return true;\n    },\n    'Object, SymbolNode, string': function ObjectSymbolNodeString(constNodes, node, varName) {\n      // Treat other variables like constants. For reasoning, see:\n      //   https://en.wikipedia.org/wiki/Partial_derivative\n      if (node.name !== varName) {\n        constNodes[node] = true;\n        return true;\n      }\n\n      return false;\n    },\n    'Object, ParenthesisNode, string': function ObjectParenthesisNodeString(constNodes, node, varName) {\n      return constTag(constNodes, node.content, varName);\n    },\n    'Object, FunctionAssignmentNode, string': function ObjectFunctionAssignmentNodeString(constNodes, node, varName) {\n      if (node.params.indexOf(varName) === -1) {\n        constNodes[node] = true;\n        return true;\n      }\n\n      return constTag(constNodes, node.expr, varName);\n    },\n    'Object, FunctionNode | OperatorNode, string': function ObjectFunctionNodeOperatorNodeString(constNodes, node, varName) {\n      if (node.args.length > 0) {\n        var isConst = constTag(constNodes, node.args[0], varName);\n\n        for (var i = 1; i < node.args.length; ++i) {\n          isConst = constTag(constNodes, node.args[i], varName) && isConst;\n        }\n\n        if (isConst) {\n          constNodes[node] = true;\n          return true;\n        }\n      }\n\n      return false;\n    }\n  });\n  /**\n   * Applies differentiation rules.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {Object} constNodes  Holds the nodes that are constant\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n\n  var _derivative = typed('_derivative', {\n    'ConstantNode, Object': function ConstantNodeObject(node) {\n      return createConstantNode(0);\n    },\n    'SymbolNode, Object': function SymbolNodeObject(node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n\n      return createConstantNode(1);\n    },\n    'ParenthesisNode, Object': function ParenthesisNodeObject(node, constNodes) {\n      return new ParenthesisNode(_derivative(node.content, constNodes));\n    },\n    'FunctionAssignmentNode, Object': function FunctionAssignmentNodeObject(node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n\n      return _derivative(node.expr, constNodes);\n    },\n    'FunctionNode, Object': function FunctionNodeObject(node, constNodes) {\n      if (node.args.length !== 1) {\n        funcArgsCheck(node);\n      }\n\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n\n      var arg0 = node.args[0];\n      var arg1;\n      var div = false; // is output a fraction?\n\n      var negative = false; // is output negative?\n\n      var funcDerivative;\n\n      switch (node.name) {\n        case 'cbrt':\n          // d/dx(cbrt(x)) = 1 / (3x^(2/3))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(3), new OperatorNode('^', 'pow', [arg0, new OperatorNode('/', 'divide', [createConstantNode(2), createConstantNode(3)])])]);\n          break;\n\n        case 'sqrt':\n        case 'nthRoot':\n          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))\n          if (node.args.length === 1) {\n            div = true;\n            funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(2), new FunctionNode('sqrt', [arg0])]);\n          } else if (node.args.length === 2) {\n            // Rearrange from nthRoot(x, a) -> x^(1/a)\n            arg1 = new OperatorNode('/', 'divide', [createConstantNode(1), node.args[1]]); // Is a variable?\n\n            constNodes[arg1] = constNodes[node.args[1]];\n            return _derivative(new OperatorNode('^', 'pow', [arg0, arg1]), constNodes);\n          }\n\n          break;\n\n        case 'log10':\n          arg1 = createConstantNode(10);\n\n        /* fall through! */\n\n        case 'log':\n          if (!arg1 && node.args.length === 1) {\n            // d/dx(log(x)) = 1 / x\n            funcDerivative = arg0.clone();\n            div = true;\n          } else if (node.args.length === 1 && arg1 || node.args.length === 2 && constNodes[node.args[1]] !== undefined) {\n            // d/dx(log(x, c)) = 1 / (x*ln(c))\n            funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('log', [arg1 || node.args[1]])]);\n            div = true;\n          } else if (node.args.length === 2) {\n            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))\n            return _derivative(new OperatorNode('/', 'divide', [new FunctionNode('log', [arg0]), new FunctionNode('log', [node.args[1]])]), constNodes);\n          }\n\n          break;\n\n        case 'pow':\n          constNodes[arg1] = constNodes[node.args[1]]; // Pass to pow operator node parser\n\n          return _derivative(new OperatorNode('^', 'pow', [arg0, node.args[1]]), constNodes);\n\n        case 'exp':\n          // d/dx(e^x) = e^x\n          funcDerivative = new FunctionNode('exp', [arg0.clone()]);\n          break;\n\n        case 'sin':\n          // d/dx(sin(x)) = cos(x)\n          funcDerivative = new FunctionNode('cos', [arg0.clone()]);\n          break;\n\n        case 'cos':\n          // d/dx(cos(x)) = -sin(x)\n          funcDerivative = new OperatorNode('-', 'unaryMinus', [new FunctionNode('sin', [arg0.clone()])]);\n          break;\n\n        case 'tan':\n          // d/dx(tan(x)) = sec(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sec', [arg0.clone()]), createConstantNode(2)]);\n          break;\n\n        case 'sec':\n          // d/dx(sec(x)) = sec(x)tan(x)\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tan', [arg0.clone()])]);\n          break;\n\n        case 'csc':\n          // d/dx(csc(x)) = -csc(x)cot(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('cot', [arg0.clone()])]);\n          break;\n\n        case 'cot':\n          // d/dx(cot(x)) = -csc(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csc', [arg0.clone()]), createConstantNode(2)]);\n          break;\n\n        case 'asin':\n          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);\n          break;\n\n        case 'acos':\n          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);\n          break;\n\n        case 'atan':\n          // d/dx(atan(x)) = 1 / (x^2 + 1)\n          div = true;\n          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);\n          break;\n\n        case 'asec':\n          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n\n        case 'acsc':\n          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n\n        case 'acot':\n          // d/dx(acot(x)) = -1 / (x^2 + 1)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);\n          break;\n\n        case 'sinh':\n          // d/dx(sinh(x)) = cosh(x)\n          funcDerivative = new FunctionNode('cosh', [arg0.clone()]);\n          break;\n\n        case 'cosh':\n          // d/dx(cosh(x)) = sinh(x)\n          funcDerivative = new FunctionNode('sinh', [arg0.clone()]);\n          break;\n\n        case 'tanh':\n          // d/dx(tanh(x)) = sech(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sech', [arg0.clone()]), createConstantNode(2)]);\n          break;\n\n        case 'sech':\n          // d/dx(sech(x)) = -sech(x)tanh(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tanh', [arg0.clone()])]);\n          break;\n\n        case 'csch':\n          // d/dx(csch(x)) = -csch(x)coth(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('coth', [arg0.clone()])]);\n          break;\n\n        case 'coth':\n          // d/dx(coth(x)) = -csch(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csch', [arg0.clone()]), createConstantNode(2)]);\n          break;\n\n        case 'asinh':\n          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);\n          break;\n\n        case 'acosh':\n          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);\n          break;\n\n        case 'atanh':\n          // d/dx(atanh(x)) = 1 / (1 - x^2)\n          div = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);\n          break;\n\n        case 'asech':\n          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])])]);\n          break;\n\n        case 'acsch':\n          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n\n        case 'acoth':\n          // d/dx(acoth(x)) = -1 / (1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);\n          break;\n\n        case 'abs':\n          // d/dx(abs(x)) = abs(x)/x\n          funcDerivative = new OperatorNode('/', 'divide', [new FunctionNode(new SymbolNode('abs'), [arg0.clone()]), arg0.clone()]);\n          break;\n\n        case 'gamma': // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)\n\n        default:\n          throw new Error('Function \"' + node.name + '\" is not supported by derivative, or a wrong number of arguments is passed');\n      }\n\n      var op, func;\n\n      if (div) {\n        op = '/';\n        func = 'divide';\n      } else {\n        op = '*';\n        func = 'multiply';\n      }\n      /* Apply chain rule to all functions:\n         F(x)  = f(g(x))\n         F'(x) = g'(x)*f'(g(x)) */\n\n\n      var chainDerivative = _derivative(arg0, constNodes);\n\n      if (negative) {\n        chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);\n      }\n\n      return new OperatorNode(op, func, [chainDerivative, funcDerivative]);\n    },\n    'OperatorNode, Object': function OperatorNodeObject(node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n\n      if (node.op === '+') {\n        // d/dx(sum(f(x)) = sum(f'(x))\n        return new OperatorNode(node.op, node.fn, node.args.map(function (arg) {\n          return _derivative(arg, constNodes);\n        }));\n      }\n\n      if (node.op === '-') {\n        // d/dx(+/-f(x)) = +/-f'(x)\n        if (node.isUnary()) {\n          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes)]);\n        } // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)\n\n\n        if (node.isBinary()) {\n          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes), _derivative(node.args[1], constNodes)]);\n        }\n      }\n\n      if (node.op === '*') {\n        // d/dx(c*f(x)) = c*f'(x)\n        var constantTerms = node.args.filter(function (arg) {\n          return constNodes[arg] !== undefined;\n        });\n\n        if (constantTerms.length > 0) {\n          var nonConstantTerms = node.args.filter(function (arg) {\n            return constNodes[arg] === undefined;\n          });\n          var nonConstantNode = nonConstantTerms.length === 1 ? nonConstantTerms[0] : new OperatorNode('*', 'multiply', nonConstantTerms);\n          var newArgs = constantTerms.concat(_derivative(nonConstantNode, constNodes));\n          return new OperatorNode('*', 'multiply', newArgs);\n        } // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)\n\n\n        return new OperatorNode('+', 'add', node.args.map(function (argOuter) {\n          return new OperatorNode('*', 'multiply', node.args.map(function (argInner) {\n            return argInner === argOuter ? _derivative(argInner, constNodes) : argInner.clone();\n          }));\n        }));\n      }\n\n      if (node.op === '/' && node.isBinary()) {\n        var arg0 = node.args[0];\n        var arg1 = node.args[1]; // d/dx(f(x) / c) = f'(x) / c\n\n        if (constNodes[arg1] !== undefined) {\n          return new OperatorNode('/', 'divide', [_derivative(arg0, constNodes), arg1]);\n        } // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)\n\n\n        if (constNodes[arg0] !== undefined) {\n          return new OperatorNode('*', 'multiply', [new OperatorNode('-', 'unaryMinus', [arg0]), new OperatorNode('/', 'divide', [_derivative(arg1, constNodes), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])])]);\n        } // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2\n\n\n        return new OperatorNode('/', 'divide', [new OperatorNode('-', 'subtract', [new OperatorNode('*', 'multiply', [_derivative(arg0, constNodes), arg1.clone()]), new OperatorNode('*', 'multiply', [arg0.clone(), _derivative(arg1, constNodes)])]), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])]);\n      }\n\n      if (node.op === '^' && node.isBinary()) {\n        var _arg = node.args[0];\n        var _arg2 = node.args[1];\n\n        if (constNodes[_arg] !== undefined) {\n          // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1\n          if (isConstantNode(_arg) && (isZero(_arg.value) || equal(_arg.value, 1))) {\n            return createConstantNode(0);\n          } // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)\n\n\n          return new OperatorNode('*', 'multiply', [node, new OperatorNode('*', 'multiply', [new FunctionNode('log', [_arg.clone()]), _derivative(_arg2.clone(), constNodes)])]);\n        }\n\n        if (constNodes[_arg2] !== undefined) {\n          if (isConstantNode(_arg2)) {\n            // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0\n            if (isZero(_arg2.value)) {\n              return createConstantNode(0);\n            } // Ignore exponent; f(x)^1 = f(x)\n\n\n            if (equal(_arg2.value, 1)) {\n              return _derivative(_arg, constNodes);\n            }\n          } // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)\n\n\n          var powMinusOne = new OperatorNode('^', 'pow', [_arg.clone(), new OperatorNode('-', 'subtract', [_arg2, createConstantNode(1)])]);\n          return new OperatorNode('*', 'multiply', [_arg2.clone(), new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), powMinusOne])]);\n        } // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]\n\n\n        return new OperatorNode('*', 'multiply', [new OperatorNode('^', 'pow', [_arg.clone(), _arg2.clone()]), new OperatorNode('+', 'add', [new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), new OperatorNode('/', 'divide', [_arg2.clone(), _arg.clone()])]), new OperatorNode('*', 'multiply', [_derivative(_arg2, constNodes), new FunctionNode('log', [_arg.clone()])])])]);\n      }\n\n      throw new Error('Operator \"' + node.op + '\" is not supported by derivative, or a wrong number of arguments is passed');\n    }\n  });\n  /**\n   * Ensures the number of arguments for a function are correct,\n   * and will throw an error otherwise.\n   *\n   * @param {FunctionNode} node\n   */\n\n\n  function funcArgsCheck(node) {\n    // TODO add min, max etc\n    if ((node.name === 'log' || node.name === 'nthRoot' || node.name === 'pow') && node.args.length === 2) {\n      return;\n    } // There should be an incorrect number of arguments if we reach here\n    // Change all args to constants to avoid unidentified\n    // symbol error when compiling function\n\n\n    for (var i = 0; i < node.args.length; ++i) {\n      node.args[i] = createConstantNode(0);\n    }\n\n    node.compile().evaluate();\n    throw new Error('Expected TypeError, but none found');\n  }\n  /**\n   * Helper function to create a constant node with a specific type\n   * (number, BigNumber, Fraction)\n   * @param {number} value\n   * @param {string} [valueType]\n   * @return {ConstantNode}\n   */\n\n\n  function createConstantNode(value, valueType) {\n    return new ConstantNode(numeric(value, valueType || config.number));\n  }\n\n  return derivative;\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}