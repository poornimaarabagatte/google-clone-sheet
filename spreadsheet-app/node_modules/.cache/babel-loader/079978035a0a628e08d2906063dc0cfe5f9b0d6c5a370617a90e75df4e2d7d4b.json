{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { csFkeep } from './csFkeep.js';\nimport { csFlip } from './csFlip.js';\nimport { csTdfs } from './csTdfs.js';\nvar name = 'csAmd';\nvar dependencies = ['add', 'multiply', 'transpose'];\nexport var createCsAmd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    add,\n    multiply,\n    transpose\n  } = _ref;\n\n  /**\n   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used\n   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization\n   * than A. It is a gready method that selects the sparsest pivot row and column during the course\n   * of a right looking sparse Cholesky factorization.\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   *\n   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR\n   * @param {Matrix} m        Sparse Matrix\n   */\n  return function csAmd(order, a) {\n    // check input parameters\n    if (!a || order <= 0 || order > 3) {\n      return null;\n    } // a matrix arrays\n\n    var asize = a._size; // rows and columns\n\n    var m = asize[0];\n    var n = asize[1]; // initialize vars\n\n    var lemax = 0; // dense threshold\n\n    var dense = Math.max(16, 10 * Math.sqrt(n));\n    dense = Math.min(n - 2, dense); // create target matrix C\n\n    var cm = _createTargetMatrix(order, a, m, n, dense); // drop diagonal entries\n\n    csFkeep(cm, _diag, null); // C matrix arrays\n\n    var cindex = cm._index;\n    var cptr = cm._ptr; // number of nonzero elements in C\n\n    var cnz = cptr[n]; // allocate result (n+1)\n\n    var P = []; // create workspace (8 * (n + 1))\n\n    var W = [];\n    var len = 0; // first n + 1 entries\n\n    var nv = n + 1; // next n + 1 entries\n\n    var next = 2 * (n + 1); // next n + 1 entries\n\n    var head = 3 * (n + 1); // next n + 1 entries\n\n    var elen = 4 * (n + 1); // next n + 1 entries\n\n    var degree = 5 * (n + 1); // next n + 1 entries\n\n    var w = 6 * (n + 1); // next n + 1 entries\n\n    var hhead = 7 * (n + 1); // last n + 1 entries\n    // use P as workspace for last\n\n    var last = P; // initialize quotient graph\n\n    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree); // initialize degree lists\n\n    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next); // minimum degree node\n\n    var mindeg = 0; // vars\n\n    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d; // while (selecting pivots) do\n\n    while (nel < n) {\n      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first\n      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow\n      // many nodes have been eliminated.\n      for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++) {\n        ;\n      }\n      if (W[next + k] !== -1) {\n        last[W[next + k]] = -1;\n      } // remove k from degree list\n\n      W[head + mindeg] = W[next + k]; // elenk = |Ek|\n\n      var elenk = W[elen + k]; // # of nodes k represents\n\n      var nvk = W[nv + k]; // W[nv + k] nodes of A eliminated\n\n      nel += nvk; // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is\n      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the\n      // degree lists. All elements e in Ek are absorved into element k.\n\n      var dk = 0; // flag k as in Lk\n\n      W[nv + k] = -nvk;\n      var p = cptr[k]; // do in place if W[elen + k] === 0\n\n      var pk1 = elenk === 0 ? p : cnz;\n      var pk2 = pk1;\n      for (k1 = 1; k1 <= elenk + 1; k1++) {\n        if (k1 > elenk) {\n          // search the nodes in k\n          e = k; // list of nodes starts at cindex[pj]\n\n          pj = p; // length of list of nodes in k\n\n          ln = W[len + k] - elenk;\n        } else {\n          // search the nodes in e\n          e = cindex[p++];\n          pj = cptr[e]; // length of list of nodes in e\n\n          ln = W[len + e];\n        }\n        for (k2 = 1; k2 <= ln; k2++) {\n          i = cindex[pj++]; // check  node i dead, or seen\n\n          if ((nvi = W[nv + i]) <= 0) {\n            continue;\n          } // W[degree + Lk] += size of node i\n\n          dk += nvi; // negate W[nv + i] to denote i in Lk\n\n          W[nv + i] = -nvi; // place i in Lk\n\n          cindex[pk2++] = i;\n          if (W[next + i] !== -1) {\n            last[W[next + i]] = last[i];\n          } // check we need to remove i from degree list\n\n          if (last[i] !== -1) {\n            W[next + last[i]] = W[next + i];\n          } else {\n            W[head + W[degree + i]] = W[next + i];\n          }\n        }\n        if (e !== k) {\n          // absorb e into k\n          cptr[e] = csFlip(k); // e is now a dead element\n\n          W[w + e] = 0;\n        }\n      } // cindex[cnz...nzmax] is free\n\n      if (elenk !== 0) {\n        cnz = pk2;\n      } // external degree of k - |Lk\\i|\n\n      W[degree + k] = dk; // element k is in cindex[pk1..pk2-1]\n\n      cptr[k] = pk1;\n      W[len + k] = pk2 - pk1; // k is now an element\n\n      W[elen + k] = -2; // Find set differences. The scan1 function now computes the set differences |Le \\ Lk| for all elements e. At the start of the\n      // scan, no entry in the w array is greater than or equal to mark.\n      // clear w if necessary\n\n      mark = _wclear(mark, lemax, W, w, n); // scan 1: find |Le\\Lk|\n\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk]; // check if W[elen + i] empty, skip it\n\n        if ((eln = W[elen + i]) <= 0) {\n          continue;\n        } // W[nv + i] was negated\n\n        nvi = -W[nv + i];\n        var wnvi = mark - nvi; // scan Ei\n\n        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {\n          e = cindex[p];\n          if (W[w + e] >= mark) {\n            // decrement |Le\\Lk|\n            W[w + e] -= nvi;\n          } else if (W[w + e] !== 0) {\n            // ensure e is a live element, 1st time e seen in scan 1\n            W[w + e] = W[degree + e] + wnvi;\n          }\n        }\n      } // degree update\n      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash\n      // function h(i) for all nodes in Lk.\n      // scan2: degree update\n\n      for (pk = pk1; pk < pk2; pk++) {\n        // consider node i in Lk\n        i = cindex[pk];\n        p1 = cptr[i];\n        p2 = p1 + W[elen + i] - 1;\n        pn = p1; // scan Ei\n\n        for (h = 0, d = 0, p = p1; p <= p2; p++) {\n          e = cindex[p]; // check e is an unabsorbed element\n\n          if (W[w + e] !== 0) {\n            // dext = |Le\\Lk|\n            var dext = W[w + e] - mark;\n            if (dext > 0) {\n              // sum up the set differences\n              d += dext; // keep e in Ei\n\n              cindex[pn++] = e; // compute the hash of node i\n\n              h += e;\n            } else {\n              // aggressive absorb. e->k\n              cptr[e] = csFlip(k); // e is a dead element\n\n              W[w + e] = 0;\n            }\n          }\n        } // W[elen + i] = |Ei|\n\n        W[elen + i] = pn - p1 + 1;\n        var p3 = pn;\n        var p4 = p1 + W[len + i]; // prune edges in Ai\n\n        for (p = p2 + 1; p < p4; p++) {\n          j = cindex[p]; // check node j dead or in Lk\n\n          var nvj = W[nv + j];\n          if (nvj <= 0) {\n            continue;\n          } // degree(i) += |j|\n\n          d += nvj; // place j in node list of i\n\n          cindex[pn++] = j; // compute hash for node i\n\n          h += j;\n        } // check for mass elimination\n\n        if (d === 0) {\n          // absorb i into k\n          cptr[i] = csFlip(k);\n          nvi = -W[nv + i]; // |Lk| -= |i|\n\n          dk -= nvi; // |k| += W[nv + i]\n\n          nvk += nvi;\n          nel += nvi;\n          W[nv + i] = 0; // node i is dead\n\n          W[elen + i] = -1;\n        } else {\n          // update degree(i)\n          W[degree + i] = Math.min(W[degree + i], d); // move first node to end\n\n          cindex[pn] = cindex[p3]; // move 1st el. to end of Ei\n\n          cindex[p3] = cindex[p1]; // add k as 1st element in of Ei\n\n          cindex[p1] = k; // new len of adj. list of node i\n\n          W[len + i] = pn - p1 + 1; // finalize hash of i\n\n          h = (h < 0 ? -h : h) % n; // place i in hash bucket\n\n          W[next + i] = W[hhead + h];\n          W[hhead + h] = i; // save hash of i in last[i]\n\n          last[i] = h;\n        }\n      } // finalize |Lk|\n\n      W[degree + k] = dk;\n      lemax = Math.max(lemax, dk); // clear w\n\n      mark = _wclear(mark + lemax, lemax, W, w, n); // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.\n      // If two nodes have identical adjacency lists, their hash functions wil be identical.\n\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk]; // check i is dead, skip it\n\n        if (W[nv + i] >= 0) {\n          continue;\n        } // scan hash bucket of node i\n\n        h = last[i];\n        i = W[hhead + h]; // hash bucket will be empty\n\n        W[hhead + h] = -1;\n        for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {\n          ln = W[len + i];\n          eln = W[elen + i];\n          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {\n            W[w + cindex[p]] = mark;\n          }\n          var jlast = i; // compare i with all j\n\n          for (j = W[next + i]; j !== -1;) {\n            var ok = W[len + j] === ln && W[elen + j] === eln;\n            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {\n              // compare i and j\n              if (W[w + cindex[p]] !== mark) {\n                ok = 0;\n              }\n            } // check i and j are identical\n\n            if (ok) {\n              // absorb j into i\n              cptr[j] = csFlip(i);\n              W[nv + i] += W[nv + j];\n              W[nv + j] = 0; // node j is dead\n\n              W[elen + j] = -1; // delete j from hash bucket\n\n              j = W[next + j];\n              W[next + jlast] = j;\n            } else {\n              // j and i are different\n              jlast = j;\n              j = W[next + j];\n            }\n          }\n        }\n      } // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.\n      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.\n\n      for (p = pk1, pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk]; // check  i is dead, skip it\n\n        if ((nvi = -W[nv + i]) <= 0) {\n          continue;\n        } // restore W[nv + i]\n\n        W[nv + i] = nvi; // compute external degree(i)\n\n        d = W[degree + i] + dk - nvi;\n        d = Math.min(d, n - nel - nvi);\n        if (W[head + d] !== -1) {\n          last[W[head + d]] = i;\n        } // put i back in degree list\n\n        W[next + i] = W[head + d];\n        last[i] = -1;\n        W[head + d] = i; // find new minimum degree\n\n        mindeg = Math.min(mindeg, d);\n        W[degree + i] = d; // place i in Lk\n\n        cindex[p++] = i;\n      } // # nodes absorbed into k\n\n      W[nv + k] = nvk; // length of adj list of element k\n\n      if ((W[len + k] = p - pk1) === 0) {\n        // k is a root of the tree\n        cptr[k] = -1; // k is now a dead element\n\n        W[w + k] = 0;\n      }\n      if (elenk !== 0) {\n        // free unused space in Lk\n        cnz = p;\n      }\n    } // Postordering. The elimination is complete, but no permutation has been computed. All that is left\n    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if\n    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation\n    // is computed. The tree is restored by unflipping all of ptr.\n    // fix assembly tree\n\n    for (i = 0; i < n; i++) {\n      cptr[i] = csFlip(cptr[i]);\n    }\n    for (j = 0; j <= n; j++) {\n      W[head + j] = -1;\n    } // place unordered nodes in lists\n\n    for (j = n; j >= 0; j--) {\n      // skip if j is an element\n      if (W[nv + j] > 0) {\n        continue;\n      } // place j in list of its parent\n\n      W[next + j] = W[head + cptr[j]];\n      W[head + cptr[j]] = j;\n    } // place elements in lists\n\n    for (e = n; e >= 0; e--) {\n      // skip unless e is an element\n      if (W[nv + e] <= 0) {\n        continue;\n      }\n      if (cptr[e] !== -1) {\n        // place e in list of its parent\n        W[next + e] = W[head + cptr[e]];\n        W[head + cptr[e]] = e;\n      }\n    } // postorder the assembly tree\n\n    for (k = 0, i = 0; i <= n; i++) {\n      if (cptr[i] === -1) {\n        k = csTdfs(i, k, W, head, next, P, w);\n      }\n    } // remove last item in array\n\n    P.splice(P.length - 1, 1); // return P\n\n    return P;\n  };\n  /**\n   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation\n   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.\n   *\n   * Order: 0\n   *   A natural ordering P=null matrix is returned.\n   *\n   * Order: 1\n   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.\n   *   P = M + M'\n   *\n   * Order: 2\n   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.\n   *   P = M' * M\n   *\n   * Order: 3\n   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.\n   *   P = M' * M\n   */\n\n  function _createTargetMatrix(order, a, m, n, dense) {\n    // compute A'\n    var at = transpose(a); // check order = 1, matrix must be square\n\n    if (order === 1 && n === m) {\n      // C = A + A'\n      return add(a, at);\n    } // check order = 2, drop dense columns from M'\n\n    if (order === 2) {\n      // transpose arrays\n      var tindex = at._index;\n      var tptr = at._ptr; // new column index\n\n      var p2 = 0; // loop A' columns (rows)\n\n      for (var j = 0; j < m; j++) {\n        // column j of AT starts here\n        var p = tptr[j]; // new column j starts here\n\n        tptr[j] = p2; // skip dense col j\n\n        if (tptr[j + 1] - p > dense) {\n          continue;\n        } // map rows in column j of A\n\n        for (var p1 = tptr[j + 1]; p < p1; p++) {\n          tindex[p2++] = tindex[p];\n        }\n      } // finalize AT\n\n      tptr[m] = p2; // recreate A from new transpose matrix\n\n      a = transpose(at); // use A' * A\n\n      return multiply(at, a);\n    } // use A' * A, square or rectangular matrix\n\n    return multiply(at, a);\n  }\n  /**\n   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:\n   *\n   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.\n   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).\n   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.\n   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).\n   */\n\n  function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {\n    // Initialize quotient graph\n    for (var k = 0; k < n; k++) {\n      W[len + k] = cptr[k + 1] - cptr[k];\n    }\n    W[len + n] = 0; // initialize workspace\n\n    for (var i = 0; i <= n; i++) {\n      // degree list i is empty\n      W[head + i] = -1;\n      last[i] = -1;\n      W[next + i] = -1; // hash list i is empty\n\n      W[hhead + i] = -1; // node i is just one node\n\n      W[nv + i] = 1; // node i is alive\n\n      W[w + i] = 1; // Ek of node i is empty\n\n      W[elen + i] = 0; // degree of node i\n\n      W[degree + i] = W[len + i];\n    } // clear w\n\n    var mark = _wclear(0, 0, W, w, n); // n is a dead element\n\n    W[elen + n] = -2; // n is a root of assembly tree\n\n    cptr[n] = -1; // n is a dead element\n\n    W[w + n] = 0; // return mark\n\n    return mark;\n  }\n  /**\n   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with\n   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the\n   * output permutation p.\n   */\n\n  function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {\n    // result\n    var nel = 0; // loop columns\n\n    for (var i = 0; i < n; i++) {\n      // degree @ i\n      var d = W[degree + i]; // check node i is empty\n\n      if (d === 0) {\n        // element i is dead\n        W[elen + i] = -2;\n        nel++; // i is a root of assembly tree\n\n        cptr[i] = -1;\n        W[w + i] = 0;\n      } else if (d > dense) {\n        // absorb i into element n\n        W[nv + i] = 0; // node i is dead\n\n        W[elen + i] = -1;\n        nel++;\n        cptr[i] = csFlip(n);\n        W[nv + n]++;\n      } else {\n        var h = W[head + d];\n        if (h !== -1) {\n          last[h] = i;\n        } // put node i in degree list d\n\n        W[next + i] = W[head + d];\n        W[head + d] = i;\n      }\n    }\n    return nel;\n  }\n  function _wclear(mark, lemax, W, w, n) {\n    if (mark < 2 || mark + lemax < 0) {\n      for (var k = 0; k < n; k++) {\n        if (W[w + k] !== 0) {\n          W[w + k] = 1;\n        }\n      }\n      mark = 2;\n    } // at this point, W [0..n-1] < mark holds\n\n    return mark;\n  }\n  function _diag(i, j) {\n    return i !== j;\n  }\n});","map":{"version":3,"names":["factory","csFkeep","csFlip","csTdfs","name","dependencies","createCsAmd","_ref","add","multiply","transpose","csAmd","order","a","asize","_size","m","n","lemax","dense","Math","max","sqrt","min","cm","_createTargetMatrix","_diag","cindex","_index","cptr","_ptr","cnz","P","W","len","nv","next","head","elen","degree","w","hhead","last","mark","_initializeQuotientGraph","nel","_initializeDegreeLists","mindeg","i","j","k","k1","k2","e","pj","ln","nvi","pk","eln","p1","p2","pn","h","d","elenk","nvk","dk","p","pk1","pk2","_wclear","wnvi","dext","p3","p4","nvj","jlast","ok","splice","length","at","tindex","tptr"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/function/algebra/sparse/csAmd.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { csFkeep } from './csFkeep.js';\nimport { csFlip } from './csFlip.js';\nimport { csTdfs } from './csTdfs.js';\nvar name = 'csAmd';\nvar dependencies = ['add', 'multiply', 'transpose'];\nexport var createCsAmd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    add,\n    multiply,\n    transpose\n  } = _ref;\n\n  /**\n   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used\n   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization\n   * than A. It is a gready method that selects the sparsest pivot row and column during the course\n   * of a right looking sparse Cholesky factorization.\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   *\n   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR\n   * @param {Matrix} m        Sparse Matrix\n   */\n  return function csAmd(order, a) {\n    // check input parameters\n    if (!a || order <= 0 || order > 3) {\n      return null;\n    } // a matrix arrays\n\n\n    var asize = a._size; // rows and columns\n\n    var m = asize[0];\n    var n = asize[1]; // initialize vars\n\n    var lemax = 0; // dense threshold\n\n    var dense = Math.max(16, 10 * Math.sqrt(n));\n    dense = Math.min(n - 2, dense); // create target matrix C\n\n    var cm = _createTargetMatrix(order, a, m, n, dense); // drop diagonal entries\n\n\n    csFkeep(cm, _diag, null); // C matrix arrays\n\n    var cindex = cm._index;\n    var cptr = cm._ptr; // number of nonzero elements in C\n\n    var cnz = cptr[n]; // allocate result (n+1)\n\n    var P = []; // create workspace (8 * (n + 1))\n\n    var W = [];\n    var len = 0; // first n + 1 entries\n\n    var nv = n + 1; // next n + 1 entries\n\n    var next = 2 * (n + 1); // next n + 1 entries\n\n    var head = 3 * (n + 1); // next n + 1 entries\n\n    var elen = 4 * (n + 1); // next n + 1 entries\n\n    var degree = 5 * (n + 1); // next n + 1 entries\n\n    var w = 6 * (n + 1); // next n + 1 entries\n\n    var hhead = 7 * (n + 1); // last n + 1 entries\n    // use P as workspace for last\n\n    var last = P; // initialize quotient graph\n\n    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree); // initialize degree lists\n\n\n    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next); // minimum degree node\n\n\n    var mindeg = 0; // vars\n\n    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d; // while (selecting pivots) do\n\n    while (nel < n) {\n      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first\n      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow\n      // many nodes have been eliminated.\n      for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++) {\n        ;\n      }\n\n      if (W[next + k] !== -1) {\n        last[W[next + k]] = -1;\n      } // remove k from degree list\n\n\n      W[head + mindeg] = W[next + k]; // elenk = |Ek|\n\n      var elenk = W[elen + k]; // # of nodes k represents\n\n      var nvk = W[nv + k]; // W[nv + k] nodes of A eliminated\n\n      nel += nvk; // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is\n      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the\n      // degree lists. All elements e in Ek are absorved into element k.\n\n      var dk = 0; // flag k as in Lk\n\n      W[nv + k] = -nvk;\n      var p = cptr[k]; // do in place if W[elen + k] === 0\n\n      var pk1 = elenk === 0 ? p : cnz;\n      var pk2 = pk1;\n\n      for (k1 = 1; k1 <= elenk + 1; k1++) {\n        if (k1 > elenk) {\n          // search the nodes in k\n          e = k; // list of nodes starts at cindex[pj]\n\n          pj = p; // length of list of nodes in k\n\n          ln = W[len + k] - elenk;\n        } else {\n          // search the nodes in e\n          e = cindex[p++];\n          pj = cptr[e]; // length of list of nodes in e\n\n          ln = W[len + e];\n        }\n\n        for (k2 = 1; k2 <= ln; k2++) {\n          i = cindex[pj++]; // check  node i dead, or seen\n\n          if ((nvi = W[nv + i]) <= 0) {\n            continue;\n          } // W[degree + Lk] += size of node i\n\n\n          dk += nvi; // negate W[nv + i] to denote i in Lk\n\n          W[nv + i] = -nvi; // place i in Lk\n\n          cindex[pk2++] = i;\n\n          if (W[next + i] !== -1) {\n            last[W[next + i]] = last[i];\n          } // check we need to remove i from degree list\n\n\n          if (last[i] !== -1) {\n            W[next + last[i]] = W[next + i];\n          } else {\n            W[head + W[degree + i]] = W[next + i];\n          }\n        }\n\n        if (e !== k) {\n          // absorb e into k\n          cptr[e] = csFlip(k); // e is now a dead element\n\n          W[w + e] = 0;\n        }\n      } // cindex[cnz...nzmax] is free\n\n\n      if (elenk !== 0) {\n        cnz = pk2;\n      } // external degree of k - |Lk\\i|\n\n\n      W[degree + k] = dk; // element k is in cindex[pk1..pk2-1]\n\n      cptr[k] = pk1;\n      W[len + k] = pk2 - pk1; // k is now an element\n\n      W[elen + k] = -2; // Find set differences. The scan1 function now computes the set differences |Le \\ Lk| for all elements e. At the start of the\n      // scan, no entry in the w array is greater than or equal to mark.\n      // clear w if necessary\n\n      mark = _wclear(mark, lemax, W, w, n); // scan 1: find |Le\\Lk|\n\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk]; // check if W[elen + i] empty, skip it\n\n        if ((eln = W[elen + i]) <= 0) {\n          continue;\n        } // W[nv + i] was negated\n\n\n        nvi = -W[nv + i];\n        var wnvi = mark - nvi; // scan Ei\n\n        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {\n          e = cindex[p];\n\n          if (W[w + e] >= mark) {\n            // decrement |Le\\Lk|\n            W[w + e] -= nvi;\n          } else if (W[w + e] !== 0) {\n            // ensure e is a live element, 1st time e seen in scan 1\n            W[w + e] = W[degree + e] + wnvi;\n          }\n        }\n      } // degree update\n      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash\n      // function h(i) for all nodes in Lk.\n      // scan2: degree update\n\n\n      for (pk = pk1; pk < pk2; pk++) {\n        // consider node i in Lk\n        i = cindex[pk];\n        p1 = cptr[i];\n        p2 = p1 + W[elen + i] - 1;\n        pn = p1; // scan Ei\n\n        for (h = 0, d = 0, p = p1; p <= p2; p++) {\n          e = cindex[p]; // check e is an unabsorbed element\n\n          if (W[w + e] !== 0) {\n            // dext = |Le\\Lk|\n            var dext = W[w + e] - mark;\n\n            if (dext > 0) {\n              // sum up the set differences\n              d += dext; // keep e in Ei\n\n              cindex[pn++] = e; // compute the hash of node i\n\n              h += e;\n            } else {\n              // aggressive absorb. e->k\n              cptr[e] = csFlip(k); // e is a dead element\n\n              W[w + e] = 0;\n            }\n          }\n        } // W[elen + i] = |Ei|\n\n\n        W[elen + i] = pn - p1 + 1;\n        var p3 = pn;\n        var p4 = p1 + W[len + i]; // prune edges in Ai\n\n        for (p = p2 + 1; p < p4; p++) {\n          j = cindex[p]; // check node j dead or in Lk\n\n          var nvj = W[nv + j];\n\n          if (nvj <= 0) {\n            continue;\n          } // degree(i) += |j|\n\n\n          d += nvj; // place j in node list of i\n\n          cindex[pn++] = j; // compute hash for node i\n\n          h += j;\n        } // check for mass elimination\n\n\n        if (d === 0) {\n          // absorb i into k\n          cptr[i] = csFlip(k);\n          nvi = -W[nv + i]; // |Lk| -= |i|\n\n          dk -= nvi; // |k| += W[nv + i]\n\n          nvk += nvi;\n          nel += nvi;\n          W[nv + i] = 0; // node i is dead\n\n          W[elen + i] = -1;\n        } else {\n          // update degree(i)\n          W[degree + i] = Math.min(W[degree + i], d); // move first node to end\n\n          cindex[pn] = cindex[p3]; // move 1st el. to end of Ei\n\n          cindex[p3] = cindex[p1]; // add k as 1st element in of Ei\n\n          cindex[p1] = k; // new len of adj. list of node i\n\n          W[len + i] = pn - p1 + 1; // finalize hash of i\n\n          h = (h < 0 ? -h : h) % n; // place i in hash bucket\n\n          W[next + i] = W[hhead + h];\n          W[hhead + h] = i; // save hash of i in last[i]\n\n          last[i] = h;\n        }\n      } // finalize |Lk|\n\n\n      W[degree + k] = dk;\n      lemax = Math.max(lemax, dk); // clear w\n\n      mark = _wclear(mark + lemax, lemax, W, w, n); // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.\n      // If two nodes have identical adjacency lists, their hash functions wil be identical.\n\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk]; // check i is dead, skip it\n\n        if (W[nv + i] >= 0) {\n          continue;\n        } // scan hash bucket of node i\n\n\n        h = last[i];\n        i = W[hhead + h]; // hash bucket will be empty\n\n        W[hhead + h] = -1;\n\n        for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {\n          ln = W[len + i];\n          eln = W[elen + i];\n\n          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {\n            W[w + cindex[p]] = mark;\n          }\n\n          var jlast = i; // compare i with all j\n\n          for (j = W[next + i]; j !== -1;) {\n            var ok = W[len + j] === ln && W[elen + j] === eln;\n\n            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {\n              // compare i and j\n              if (W[w + cindex[p]] !== mark) {\n                ok = 0;\n              }\n            } // check i and j are identical\n\n\n            if (ok) {\n              // absorb j into i\n              cptr[j] = csFlip(i);\n              W[nv + i] += W[nv + j];\n              W[nv + j] = 0; // node j is dead\n\n              W[elen + j] = -1; // delete j from hash bucket\n\n              j = W[next + j];\n              W[next + jlast] = j;\n            } else {\n              // j and i are different\n              jlast = j;\n              j = W[next + j];\n            }\n          }\n        }\n      } // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.\n      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.\n\n\n      for (p = pk1, pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk]; // check  i is dead, skip it\n\n        if ((nvi = -W[nv + i]) <= 0) {\n          continue;\n        } // restore W[nv + i]\n\n\n        W[nv + i] = nvi; // compute external degree(i)\n\n        d = W[degree + i] + dk - nvi;\n        d = Math.min(d, n - nel - nvi);\n\n        if (W[head + d] !== -1) {\n          last[W[head + d]] = i;\n        } // put i back in degree list\n\n\n        W[next + i] = W[head + d];\n        last[i] = -1;\n        W[head + d] = i; // find new minimum degree\n\n        mindeg = Math.min(mindeg, d);\n        W[degree + i] = d; // place i in Lk\n\n        cindex[p++] = i;\n      } // # nodes absorbed into k\n\n\n      W[nv + k] = nvk; // length of adj list of element k\n\n      if ((W[len + k] = p - pk1) === 0) {\n        // k is a root of the tree\n        cptr[k] = -1; // k is now a dead element\n\n        W[w + k] = 0;\n      }\n\n      if (elenk !== 0) {\n        // free unused space in Lk\n        cnz = p;\n      }\n    } // Postordering. The elimination is complete, but no permutation has been computed. All that is left\n    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if\n    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation\n    // is computed. The tree is restored by unflipping all of ptr.\n    // fix assembly tree\n\n\n    for (i = 0; i < n; i++) {\n      cptr[i] = csFlip(cptr[i]);\n    }\n\n    for (j = 0; j <= n; j++) {\n      W[head + j] = -1;\n    } // place unordered nodes in lists\n\n\n    for (j = n; j >= 0; j--) {\n      // skip if j is an element\n      if (W[nv + j] > 0) {\n        continue;\n      } // place j in list of its parent\n\n\n      W[next + j] = W[head + cptr[j]];\n      W[head + cptr[j]] = j;\n    } // place elements in lists\n\n\n    for (e = n; e >= 0; e--) {\n      // skip unless e is an element\n      if (W[nv + e] <= 0) {\n        continue;\n      }\n\n      if (cptr[e] !== -1) {\n        // place e in list of its parent\n        W[next + e] = W[head + cptr[e]];\n        W[head + cptr[e]] = e;\n      }\n    } // postorder the assembly tree\n\n\n    for (k = 0, i = 0; i <= n; i++) {\n      if (cptr[i] === -1) {\n        k = csTdfs(i, k, W, head, next, P, w);\n      }\n    } // remove last item in array\n\n\n    P.splice(P.length - 1, 1); // return P\n\n    return P;\n  };\n  /**\n   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation\n   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.\n   *\n   * Order: 0\n   *   A natural ordering P=null matrix is returned.\n   *\n   * Order: 1\n   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.\n   *   P = M + M'\n   *\n   * Order: 2\n   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.\n   *   P = M' * M\n   *\n   * Order: 3\n   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.\n   *   P = M' * M\n   */\n\n  function _createTargetMatrix(order, a, m, n, dense) {\n    // compute A'\n    var at = transpose(a); // check order = 1, matrix must be square\n\n    if (order === 1 && n === m) {\n      // C = A + A'\n      return add(a, at);\n    } // check order = 2, drop dense columns from M'\n\n\n    if (order === 2) {\n      // transpose arrays\n      var tindex = at._index;\n      var tptr = at._ptr; // new column index\n\n      var p2 = 0; // loop A' columns (rows)\n\n      for (var j = 0; j < m; j++) {\n        // column j of AT starts here\n        var p = tptr[j]; // new column j starts here\n\n        tptr[j] = p2; // skip dense col j\n\n        if (tptr[j + 1] - p > dense) {\n          continue;\n        } // map rows in column j of A\n\n\n        for (var p1 = tptr[j + 1]; p < p1; p++) {\n          tindex[p2++] = tindex[p];\n        }\n      } // finalize AT\n\n\n      tptr[m] = p2; // recreate A from new transpose matrix\n\n      a = transpose(at); // use A' * A\n\n      return multiply(at, a);\n    } // use A' * A, square or rectangular matrix\n\n\n    return multiply(at, a);\n  }\n  /**\n   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:\n   *\n   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.\n   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).\n   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.\n   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).\n   */\n\n\n  function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {\n    // Initialize quotient graph\n    for (var k = 0; k < n; k++) {\n      W[len + k] = cptr[k + 1] - cptr[k];\n    }\n\n    W[len + n] = 0; // initialize workspace\n\n    for (var i = 0; i <= n; i++) {\n      // degree list i is empty\n      W[head + i] = -1;\n      last[i] = -1;\n      W[next + i] = -1; // hash list i is empty\n\n      W[hhead + i] = -1; // node i is just one node\n\n      W[nv + i] = 1; // node i is alive\n\n      W[w + i] = 1; // Ek of node i is empty\n\n      W[elen + i] = 0; // degree of node i\n\n      W[degree + i] = W[len + i];\n    } // clear w\n\n\n    var mark = _wclear(0, 0, W, w, n); // n is a dead element\n\n\n    W[elen + n] = -2; // n is a root of assembly tree\n\n    cptr[n] = -1; // n is a dead element\n\n    W[w + n] = 0; // return mark\n\n    return mark;\n  }\n  /**\n   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with\n   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the\n   * output permutation p.\n   */\n\n\n  function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {\n    // result\n    var nel = 0; // loop columns\n\n    for (var i = 0; i < n; i++) {\n      // degree @ i\n      var d = W[degree + i]; // check node i is empty\n\n      if (d === 0) {\n        // element i is dead\n        W[elen + i] = -2;\n        nel++; // i is a root of assembly tree\n\n        cptr[i] = -1;\n        W[w + i] = 0;\n      } else if (d > dense) {\n        // absorb i into element n\n        W[nv + i] = 0; // node i is dead\n\n        W[elen + i] = -1;\n        nel++;\n        cptr[i] = csFlip(n);\n        W[nv + n]++;\n      } else {\n        var h = W[head + d];\n\n        if (h !== -1) {\n          last[h] = i;\n        } // put node i in degree list d\n\n\n        W[next + i] = W[head + d];\n        W[head + d] = i;\n      }\n    }\n\n    return nel;\n  }\n\n  function _wclear(mark, lemax, W, w, n) {\n    if (mark < 2 || mark + lemax < 0) {\n      for (var k = 0; k < n; k++) {\n        if (W[w + k] !== 0) {\n          W[w + k] = 1;\n        }\n      }\n\n      mark = 2;\n    } // at this point, W [0..n-1] < mark holds\n\n\n    return mark;\n  }\n\n  function _diag(i, j) {\n    return i !== j;\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}