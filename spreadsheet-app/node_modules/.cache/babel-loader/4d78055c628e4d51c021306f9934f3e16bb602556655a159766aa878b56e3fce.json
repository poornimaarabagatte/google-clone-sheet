{"ast":null,"code":"import { clone } from '../../utils/object.js';\nimport { format } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'transpose';\nvar dependencies = ['typed', 'matrix'];\nexport var createTranspose = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n\n  /**\n   * Transpose a matrix. All values of the matrix are reflected over its\n   * main diagonal. Only applicable to two dimensional matrices containing\n   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional\n   * vectors and scalars return the input unchanged.\n   *\n   * Syntax:\n   *\n   *     math.transpose(x)\n   *\n   * Examples:\n   *\n   *     const A = [[1, 2, 3], [4, 5, 6]]\n   *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]\n   *\n   * See also:\n   *\n   *     diag, inv, subset, squeeze\n   *\n   * @param {Array | Matrix} x  Matrix to be transposed\n   * @return {Array | Matrix}   The transposed matrix\n   */\n  return typed('transpose', {\n    Array: function Array(x) {\n      // use dense matrix implementation\n      return this(matrix(x)).valueOf();\n    },\n    Matrix: function Matrix(x) {\n      // matrix size\n      var size = x.size(); // result\n\n      var c; // process dimensions\n\n      switch (size.length) {\n        case 1:\n          // vector\n          c = x.clone();\n          break;\n        case 2:\n          {\n            // rows and columns\n            var rows = size[0];\n            var columns = size[1]; // check columns\n\n            if (columns === 0) {\n              // throw exception\n              throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');\n            } // process storage format\n\n            switch (x.storage()) {\n              case 'dense':\n                c = _denseTranspose(x, rows, columns);\n                break;\n              case 'sparse':\n                c = _sparseTranspose(x, rows, columns);\n                break;\n            }\n          }\n          break;\n        default:\n          // multi dimensional\n          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(this._size) + ')');\n      }\n      return c;\n    },\n    // scalars\n    any: function any(x) {\n      return clone(x);\n    }\n  });\n  function _denseTranspose(m, rows, columns) {\n    // matrix array\n    var data = m._data; // transposed matrix data\n\n    var transposed = [];\n    var transposedRow; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // initialize row\n      transposedRow = transposed[j] = []; // loop rows\n\n      for (var i = 0; i < rows; i++) {\n        // set data\n        transposedRow[i] = clone(data[i][j]);\n      }\n    } // return matrix\n\n    return m.createDenseMatrix({\n      data: transposed,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  }\n  function _sparseTranspose(m, rows, columns) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // result matrices\n\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // row counts\n\n    var w = [];\n    for (var x = 0; x < rows; x++) {\n      w[x] = 0;\n    } // vars\n\n    var p, l, j; // loop values in matrix\n\n    for (p = 0, l = index.length; p < l; p++) {\n      // number of values in row\n      w[index[p]]++;\n    } // cumulative sum\n\n    var sum = 0; // initialize cptr with the cummulative sum of row counts\n\n    for (var i = 0; i < rows; i++) {\n      // update cptr\n      cptr.push(sum); // update sum\n\n      sum += w[i]; // update w\n\n      w[i] = cptr[i];\n    } // update cptr\n\n    cptr.push(sum); // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // values & index in column\n      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {\n        // C values & index\n        var q = w[index[k]]++; // C[j, i] = A[i, j]\n\n        cindex[q] = j; // check we need to process values (pattern matrix)\n\n        if (values) {\n          cvalues[q] = clone(values[k]);\n        }\n      }\n    } // return matrix\n\n    return m.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  }\n});","map":{"version":3,"names":["clone","format","factory","name","dependencies","createTranspose","_ref","typed","matrix","Array","x","valueOf","Matrix","size","c","length","rows","columns","RangeError","storage","_denseTranspose","_sparseTranspose","_size","any","m","data","_data","transposed","transposedRow","j","i","createDenseMatrix","datatype","_datatype","values","_values","index","_index","ptr","_ptr","cvalues","undefined","cindex","cptr","w","p","l","sum","push","k0","k1","k","q","createSparseMatrix"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/function/matrix/transpose.js"],"sourcesContent":["import { clone } from '../../utils/object.js';\nimport { format } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'transpose';\nvar dependencies = ['typed', 'matrix'];\nexport var createTranspose = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n\n  /**\n   * Transpose a matrix. All values of the matrix are reflected over its\n   * main diagonal. Only applicable to two dimensional matrices containing\n   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional\n   * vectors and scalars return the input unchanged.\n   *\n   * Syntax:\n   *\n   *     math.transpose(x)\n   *\n   * Examples:\n   *\n   *     const A = [[1, 2, 3], [4, 5, 6]]\n   *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]\n   *\n   * See also:\n   *\n   *     diag, inv, subset, squeeze\n   *\n   * @param {Array | Matrix} x  Matrix to be transposed\n   * @return {Array | Matrix}   The transposed matrix\n   */\n  return typed('transpose', {\n    Array: function Array(x) {\n      // use dense matrix implementation\n      return this(matrix(x)).valueOf();\n    },\n    Matrix: function Matrix(x) {\n      // matrix size\n      var size = x.size(); // result\n\n      var c; // process dimensions\n\n      switch (size.length) {\n        case 1:\n          // vector\n          c = x.clone();\n          break;\n\n        case 2:\n          {\n            // rows and columns\n            var rows = size[0];\n            var columns = size[1]; // check columns\n\n            if (columns === 0) {\n              // throw exception\n              throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');\n            } // process storage format\n\n\n            switch (x.storage()) {\n              case 'dense':\n                c = _denseTranspose(x, rows, columns);\n                break;\n\n              case 'sparse':\n                c = _sparseTranspose(x, rows, columns);\n                break;\n            }\n          }\n          break;\n\n        default:\n          // multi dimensional\n          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(this._size) + ')');\n      }\n\n      return c;\n    },\n    // scalars\n    any: function any(x) {\n      return clone(x);\n    }\n  });\n\n  function _denseTranspose(m, rows, columns) {\n    // matrix array\n    var data = m._data; // transposed matrix data\n\n    var transposed = [];\n    var transposedRow; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // initialize row\n      transposedRow = transposed[j] = []; // loop rows\n\n      for (var i = 0; i < rows; i++) {\n        // set data\n        transposedRow[i] = clone(data[i][j]);\n      }\n    } // return matrix\n\n\n    return m.createDenseMatrix({\n      data: transposed,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  }\n\n  function _sparseTranspose(m, rows, columns) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // result matrices\n\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // row counts\n\n    var w = [];\n\n    for (var x = 0; x < rows; x++) {\n      w[x] = 0;\n    } // vars\n\n\n    var p, l, j; // loop values in matrix\n\n    for (p = 0, l = index.length; p < l; p++) {\n      // number of values in row\n      w[index[p]]++;\n    } // cumulative sum\n\n\n    var sum = 0; // initialize cptr with the cummulative sum of row counts\n\n    for (var i = 0; i < rows; i++) {\n      // update cptr\n      cptr.push(sum); // update sum\n\n      sum += w[i]; // update w\n\n      w[i] = cptr[i];\n    } // update cptr\n\n\n    cptr.push(sum); // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // values & index in column\n      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {\n        // C values & index\n        var q = w[index[k]]++; // C[j, i] = A[i, j]\n\n        cindex[q] = j; // check we need to process values (pattern matrix)\n\n        if (values) {\n          cvalues[q] = clone(values[k]);\n        }\n      }\n    } // return matrix\n\n\n    return m.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}