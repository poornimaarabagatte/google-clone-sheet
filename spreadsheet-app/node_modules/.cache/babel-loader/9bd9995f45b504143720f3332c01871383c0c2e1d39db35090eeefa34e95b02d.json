{"ast":null,"code":"import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { complexEquals } from '../../utils/complex.js';\nvar name = 'equalScalar';\nvar dependencies = ['typed', 'config'];\nexport var createEqualScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config\n  } = _ref;\n\n  /**\n   * Test whether two scalar values are nearly equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n  return typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return complexEquals(x, y, config.epsilon);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return this(x.value, y.value);\n    }\n  });\n});\nexport var createEqualScalarNumber = factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","map":{"version":3,"names":["nearlyEqual","bigNearlyEqual","factory","complexEquals","name","dependencies","createEqualScalar","_ref","typed","config","booleanBoolean","x","y","numberNumber","epsilon","BigNumberBigNumber","eq","FractionFraction","equals","ComplexComplex","UnitUnit","equalBase","Error","value","createEqualScalarNumber","_ref2"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/function/relational/equalScalar.js"],"sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { complexEquals } from '../../utils/complex.js';\nvar name = 'equalScalar';\nvar dependencies = ['typed', 'config'];\nexport var createEqualScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config\n  } = _ref;\n\n  /**\n   * Test whether two scalar values are nearly equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n  return typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return complexEquals(x, y, config.epsilon);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return this(x.value, y.value);\n    }\n  });\n});\nexport var createEqualScalarNumber = factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});"],"mappings":"AAAA,SAASA,WAAW,IAAIC,cAAc,QAAQ,sCAAsC;AACpF,SAASD,WAAW,QAAQ,uBAAuB;AACnD,SAASE,OAAO,QAAQ,wBAAwB;AAChD,SAASC,aAAa,QAAQ,wBAAwB;AACtD,IAAIC,IAAI,GAAG,aAAa;AACxB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC;AACtC,OAAO,IAAIC,iBAAiB,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAChF,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;;EAER;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,kBAAkB,EAAE,SAASM,cAAcA,CAACC,CAAC,EAAEC,CAAC,EAAE;MAChD,OAAOD,CAAC,KAAKC,CAAC;IAChB,CAAC;IACD,gBAAgB,EAAE,SAASC,YAAYA,CAACF,CAAC,EAAEC,CAAC,EAAE;MAC5C,OAAOZ,WAAW,CAACW,CAAC,EAAEC,CAAC,EAAEH,MAAM,CAACK,OAAO,CAAC;IAC1C,CAAC;IACD,sBAAsB,EAAE,SAASC,kBAAkBA,CAACJ,CAAC,EAAEC,CAAC,EAAE;MACxD,OAAOD,CAAC,CAACK,EAAE,CAACJ,CAAC,CAAC,IAAIX,cAAc,CAACU,CAAC,EAAEC,CAAC,EAAEH,MAAM,CAACK,OAAO,CAAC;IACxD,CAAC;IACD,oBAAoB,EAAE,SAASG,gBAAgBA,CAACN,CAAC,EAAEC,CAAC,EAAE;MACpD,OAAOD,CAAC,CAACO,MAAM,CAACN,CAAC,CAAC;IACpB,CAAC;IACD,kBAAkB,EAAE,SAASO,cAAcA,CAACR,CAAC,EAAEC,CAAC,EAAE;MAChD,OAAOT,aAAa,CAACQ,CAAC,EAAEC,CAAC,EAAEH,MAAM,CAACK,OAAO,CAAC;IAC5C,CAAC;IACD,YAAY,EAAE,SAASM,QAAQA,CAACT,CAAC,EAAEC,CAAC,EAAE;MACpC,IAAI,CAACD,CAAC,CAACU,SAAS,CAACT,CAAC,CAAC,EAAE;QACnB,MAAM,IAAIU,KAAK,CAAC,0CAA0C,CAAC;MAC7D;MAEA,OAAO,IAAI,CAACX,CAAC,CAACY,KAAK,EAAEX,CAAC,CAACW,KAAK,CAAC;IAC/B;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACF,OAAO,IAAIC,uBAAuB,GAAGtB,OAAO,CAACE,IAAI,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAEqB,KAAK,IAAI;EAC/E,IAAI;IACFjB,KAAK;IACLC;EACF,CAAC,GAAGgB,KAAK;EACT,OAAOjB,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAE,SAASS,YAAYA,CAACF,CAAC,EAAEC,CAAC,EAAE;MAC5C,OAAOZ,WAAW,CAACW,CAAC,EAAEC,CAAC,EAAEH,MAAM,CAACK,OAAO,CAAC;IAC1C;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}