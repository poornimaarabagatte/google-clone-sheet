{"ast":null,"code":"import { clone } from '../../utils/object.js';\nimport { flatten as flattenArray } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'flatten';\nvar dependencies = ['typed', 'matrix'];\nexport var createFlatten = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n\n  /**\n   * Flatten a multi dimensional matrix into a single dimensional matrix.\n   * It is guaranteed to always return a clone of the argument.\n   *\n   * Syntax:\n   *\n   *    math.flatten(x)\n   *\n   * Examples:\n   *\n   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]\n   *\n   * See also:\n   *\n   *    concat, resize, size, squeeze\n   *\n   * @param {Matrix | Array} x   Matrix to be flattened\n   * @return {Matrix | Array} Returns the flattened matrix\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      return flattenArray(clone(x));\n    },\n    Matrix: function Matrix(x) {\n      var flat = flattenArray(clone(x.toArray())); // TODO: return the same matrix type as x\n\n      return matrix(flat);\n    }\n  });\n});","map":{"version":3,"names":["clone","flatten","flattenArray","factory","name","dependencies","createFlatten","_ref","typed","matrix","Array","x","Matrix","flat","toArray"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/function/matrix/flatten.js"],"sourcesContent":["import { clone } from '../../utils/object.js';\nimport { flatten as flattenArray } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'flatten';\nvar dependencies = ['typed', 'matrix'];\nexport var createFlatten = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n\n  /**\n   * Flatten a multi dimensional matrix into a single dimensional matrix.\n   * It is guaranteed to always return a clone of the argument.\n   *\n   * Syntax:\n   *\n   *    math.flatten(x)\n   *\n   * Examples:\n   *\n   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]\n   *\n   * See also:\n   *\n   *    concat, resize, size, squeeze\n   *\n   * @param {Matrix | Array} x   Matrix to be flattened\n   * @return {Matrix | Array} Returns the flattened matrix\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      return flattenArray(clone(x));\n    },\n    Matrix: function Matrix(x) {\n      var flat = flattenArray(clone(x.toArray())); // TODO: return the same matrix type as x\n\n      return matrix(flat);\n    }\n  });\n});"],"mappings":"AAAA,SAASA,KAAK,QAAQ,uBAAuB;AAC7C,SAASC,OAAO,IAAIC,YAAY,QAAQ,sBAAsB;AAC9D,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC;AACtC,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC5E,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;;EAER;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBM,KAAK,EAAE,SAASA,KAAKA,CAACC,CAAC,EAAE;MACvB,OAAOT,YAAY,CAACF,KAAK,CAACW,CAAC,CAAC,CAAC;IAC/B,CAAC;IACDC,MAAM,EAAE,SAASA,MAAMA,CAACD,CAAC,EAAE;MACzB,IAAIE,IAAI,GAAGX,YAAY,CAACF,KAAK,CAACW,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;MAE7C,OAAOL,MAAM,CAACI,IAAI,CAAC;IACrB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}