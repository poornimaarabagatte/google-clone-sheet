{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { createCsSpsolve } from './csSpsolve.js';\nvar name = 'csLu';\nvar dependencies = ['abs', 'divideScalar', 'multiply', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];\nexport var createCsLu = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    abs,\n    divideScalar,\n    multiply,\n    subtract,\n    larger,\n    largerEq,\n    SparseMatrix\n  } = _ref;\n  var csSpsolve = createCsSpsolve({\n    divideScalar,\n    multiply,\n    subtract\n  });\n  /**\n   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization\n   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L\n   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so\n   * L * U = A(p, q), where p is the inverse of pinv.\n   *\n   * @param {Matrix}  m               The A Matrix to factorize\n   * @param {Object}  s               The symbolic analysis from csSqr(). Provides the fill-reducing\n   *                                  column ordering q\n   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)\n   *\n   * @return {Number}                 The numeric LU factorization of A or null\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n\n  return function csLu(m, s, tol) {\n    // validate input\n    if (!m) {\n      return null;\n    } // m arrays\n\n    var size = m._size; // columns\n\n    var n = size[1]; // symbolic analysis result\n\n    var q;\n    var lnz = 100;\n    var unz = 100; // update symbolic analysis parameters\n\n    if (s) {\n      q = s.q;\n      lnz = s.lnz || lnz;\n      unz = s.unz || unz;\n    } // L arrays\n\n    var lvalues = []; // (lnz)\n\n    var lindex = []; // (lnz)\n\n    var lptr = []; // (n + 1)\n    // L\n\n    var L = new SparseMatrix({\n      values: lvalues,\n      index: lindex,\n      ptr: lptr,\n      size: [n, n]\n    }); // U arrays\n\n    var uvalues = []; // (unz)\n\n    var uindex = []; // (unz)\n\n    var uptr = []; // (n + 1)\n    // U\n\n    var U = new SparseMatrix({\n      values: uvalues,\n      index: uindex,\n      ptr: uptr,\n      size: [n, n]\n    }); // inverse of permutation vector\n\n    var pinv = []; // (n)\n    // vars\n\n    var i, p; // allocate arrays\n\n    var x = []; // (n)\n\n    var xi = []; // (2 * n)\n    // initialize variables\n\n    for (i = 0; i < n; i++) {\n      // clear workspace\n      x[i] = 0; // no rows pivotal yet\n\n      pinv[i] = -1; // no cols of L yet\n\n      lptr[i + 1] = 0;\n    } // reset number of nonzero elements in L and U\n\n    lnz = 0;\n    unz = 0; // compute L(:,k) and U(:,k)\n\n    for (var k = 0; k < n; k++) {\n      // update ptr\n      lptr[k] = lnz;\n      uptr[k] = unz; // apply column permutations if needed\n\n      var col = q ? q[k] : k; // solve triangular system, x = L\\A(:,col)\n\n      var top = csSpsolve(L, m, col, xi, x, pinv, 1); // find pivot\n\n      var ipiv = -1;\n      var a = -1; // loop xi[] from top -> n\n\n      for (p = top; p < n; p++) {\n        // x[i] is nonzero\n        i = xi[p]; // check row i is not yet pivotal\n\n        if (pinv[i] < 0) {\n          // absolute value of x[i]\n          var xabs = abs(x[i]); // check absoulte value is greater than pivot value\n\n          if (larger(xabs, a)) {\n            // largest pivot candidate so far\n            a = xabs;\n            ipiv = i;\n          }\n        } else {\n          // x(i) is the entry U(pinv[i],k)\n          uindex[unz] = pinv[i];\n          uvalues[unz++] = x[i];\n        }\n      } // validate we found a valid pivot\n\n      if (ipiv === -1 || a <= 0) {\n        return null;\n      } // update actual pivot column, give preference to diagonal value\n\n      if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol))) {\n        ipiv = col;\n      } // the chosen pivot\n\n      var pivot = x[ipiv]; // last entry in U(:,k) is U(k,k)\n\n      uindex[unz] = k;\n      uvalues[unz++] = pivot; // ipiv is the kth pivot row\n\n      pinv[ipiv] = k; // first entry in L(:,k) is L(k,k) = 1\n\n      lindex[lnz] = ipiv;\n      lvalues[lnz++] = 1; // L(k+1:n,k) = x / pivot\n\n      for (p = top; p < n; p++) {\n        // row\n        i = xi[p]; // check x(i) is an entry in L(:,k)\n\n        if (pinv[i] < 0) {\n          // save unpermuted row in L\n          lindex[lnz] = i; // scale pivot column\n\n          lvalues[lnz++] = divideScalar(x[i], pivot);\n        } // x[0..n-1] = 0 for next k\n\n        x[i] = 0;\n      }\n    } // update ptr\n\n    lptr[n] = lnz;\n    uptr[n] = unz; // fix row indices of L for final pinv\n\n    for (p = 0; p < lnz; p++) {\n      lindex[p] = pinv[lindex[p]];\n    } // trim arrays\n\n    lvalues.splice(lnz, lvalues.length - lnz);\n    lindex.splice(lnz, lindex.length - lnz);\n    uvalues.splice(unz, uvalues.length - unz);\n    uindex.splice(unz, uindex.length - unz); // return LU factor\n\n    return {\n      L: L,\n      U: U,\n      pinv: pinv\n    };\n  };\n});","map":{"version":3,"names":["factory","createCsSpsolve","name","dependencies","createCsLu","_ref","abs","divideScalar","multiply","subtract","larger","largerEq","SparseMatrix","csSpsolve","csLu","m","s","tol","size","_size","n","q","lnz","unz","lvalues","lindex","lptr","L","values","index","ptr","uvalues","uindex","uptr","U","pinv","i","p","x","xi","k","col","top","ipiv","a","xabs","pivot","splice","length"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/function/algebra/sparse/csLu.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { createCsSpsolve } from './csSpsolve.js';\nvar name = 'csLu';\nvar dependencies = ['abs', 'divideScalar', 'multiply', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];\nexport var createCsLu = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    abs,\n    divideScalar,\n    multiply,\n    subtract,\n    larger,\n    largerEq,\n    SparseMatrix\n  } = _ref;\n  var csSpsolve = createCsSpsolve({\n    divideScalar,\n    multiply,\n    subtract\n  });\n  /**\n   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization\n   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L\n   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so\n   * L * U = A(p, q), where p is the inverse of pinv.\n   *\n   * @param {Matrix}  m               The A Matrix to factorize\n   * @param {Object}  s               The symbolic analysis from csSqr(). Provides the fill-reducing\n   *                                  column ordering q\n   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)\n   *\n   * @return {Number}                 The numeric LU factorization of A or null\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n\n  return function csLu(m, s, tol) {\n    // validate input\n    if (!m) {\n      return null;\n    } // m arrays\n\n\n    var size = m._size; // columns\n\n    var n = size[1]; // symbolic analysis result\n\n    var q;\n    var lnz = 100;\n    var unz = 100; // update symbolic analysis parameters\n\n    if (s) {\n      q = s.q;\n      lnz = s.lnz || lnz;\n      unz = s.unz || unz;\n    } // L arrays\n\n\n    var lvalues = []; // (lnz)\n\n    var lindex = []; // (lnz)\n\n    var lptr = []; // (n + 1)\n    // L\n\n    var L = new SparseMatrix({\n      values: lvalues,\n      index: lindex,\n      ptr: lptr,\n      size: [n, n]\n    }); // U arrays\n\n    var uvalues = []; // (unz)\n\n    var uindex = []; // (unz)\n\n    var uptr = []; // (n + 1)\n    // U\n\n    var U = new SparseMatrix({\n      values: uvalues,\n      index: uindex,\n      ptr: uptr,\n      size: [n, n]\n    }); // inverse of permutation vector\n\n    var pinv = []; // (n)\n    // vars\n\n    var i, p; // allocate arrays\n\n    var x = []; // (n)\n\n    var xi = []; // (2 * n)\n    // initialize variables\n\n    for (i = 0; i < n; i++) {\n      // clear workspace\n      x[i] = 0; // no rows pivotal yet\n\n      pinv[i] = -1; // no cols of L yet\n\n      lptr[i + 1] = 0;\n    } // reset number of nonzero elements in L and U\n\n\n    lnz = 0;\n    unz = 0; // compute L(:,k) and U(:,k)\n\n    for (var k = 0; k < n; k++) {\n      // update ptr\n      lptr[k] = lnz;\n      uptr[k] = unz; // apply column permutations if needed\n\n      var col = q ? q[k] : k; // solve triangular system, x = L\\A(:,col)\n\n      var top = csSpsolve(L, m, col, xi, x, pinv, 1); // find pivot\n\n      var ipiv = -1;\n      var a = -1; // loop xi[] from top -> n\n\n      for (p = top; p < n; p++) {\n        // x[i] is nonzero\n        i = xi[p]; // check row i is not yet pivotal\n\n        if (pinv[i] < 0) {\n          // absolute value of x[i]\n          var xabs = abs(x[i]); // check absoulte value is greater than pivot value\n\n          if (larger(xabs, a)) {\n            // largest pivot candidate so far\n            a = xabs;\n            ipiv = i;\n          }\n        } else {\n          // x(i) is the entry U(pinv[i],k)\n          uindex[unz] = pinv[i];\n          uvalues[unz++] = x[i];\n        }\n      } // validate we found a valid pivot\n\n\n      if (ipiv === -1 || a <= 0) {\n        return null;\n      } // update actual pivot column, give preference to diagonal value\n\n\n      if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol))) {\n        ipiv = col;\n      } // the chosen pivot\n\n\n      var pivot = x[ipiv]; // last entry in U(:,k) is U(k,k)\n\n      uindex[unz] = k;\n      uvalues[unz++] = pivot; // ipiv is the kth pivot row\n\n      pinv[ipiv] = k; // first entry in L(:,k) is L(k,k) = 1\n\n      lindex[lnz] = ipiv;\n      lvalues[lnz++] = 1; // L(k+1:n,k) = x / pivot\n\n      for (p = top; p < n; p++) {\n        // row\n        i = xi[p]; // check x(i) is an entry in L(:,k)\n\n        if (pinv[i] < 0) {\n          // save unpermuted row in L\n          lindex[lnz] = i; // scale pivot column\n\n          lvalues[lnz++] = divideScalar(x[i], pivot);\n        } // x[0..n-1] = 0 for next k\n\n\n        x[i] = 0;\n      }\n    } // update ptr\n\n\n    lptr[n] = lnz;\n    uptr[n] = unz; // fix row indices of L for final pinv\n\n    for (p = 0; p < lnz; p++) {\n      lindex[p] = pinv[lindex[p]];\n    } // trim arrays\n\n\n    lvalues.splice(lnz, lvalues.length - lnz);\n    lindex.splice(lnz, lindex.length - lnz);\n    uvalues.splice(unz, uvalues.length - unz);\n    uindex.splice(unz, uindex.length - unz); // return LU factor\n\n    return {\n      L: L,\n      U: U,\n      pinv: pinv\n    };\n  };\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}