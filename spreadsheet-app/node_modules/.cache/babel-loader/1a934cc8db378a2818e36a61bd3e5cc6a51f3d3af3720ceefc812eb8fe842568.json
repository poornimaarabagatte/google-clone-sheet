{"ast":null,"code":"import { isAccessorNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nimport { assignFactory } from './utils/assign.js';\nimport { getPrecedence } from '../operators.js';\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix',\n// FIXME: should not be needed at all, should be handled by subset\n'Node'];\nexport var createAssignmentNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    matrix,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n  var assign = assignFactory({\n    subset,\n    matrix\n  });\n  /**\n   * @constructor AssignmentNode\n   * @extends {Node}\n   *\n   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n   * replace a subset of a matrix like `A[2,2]=42`.\n   *\n   * Syntax:\n   *\n   *     new AssignmentNode(symbol, value)\n   *     new AssignmentNode(object, index, value)\n   *\n   * Usage:\n   *\n   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\n   *\n   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\n   * @param {IndexNode} [index=null]            Index, property name or matrix\n   *                                            index. Optional. If not provided\n   *                                            and `object` is a SymbolNode,\n   *                                            the property is assigned to the\n   *                                            global scope.\n   * @param {Node} value                        The value to be assigned\n   */\n\n  function AssignmentNode(object, index, value) {\n    if (!(this instanceof AssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    this.object = object;\n    this.index = value ? index : null;\n    this.value = value || index; // validate input\n\n    if (!isSymbolNode(object) && !isAccessorNode(object)) {\n      throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n    }\n    if (isSymbolNode(object) && object.name === 'end') {\n      throw new Error('Cannot assign to symbol \"end\"');\n    }\n    if (this.index && !isIndexNode(this.index)) {\n      // index is optional\n      throw new TypeError('IndexNode expected as \"index\"');\n    }\n    if (!isNode(this.value)) {\n      throw new TypeError('Node expected as \"value\"');\n    } // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n  AssignmentNode.prototype = new Node();\n  AssignmentNode.prototype.type = 'AssignmentNode';\n  AssignmentNode.prototype.isAssignmentNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AssignmentNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n    var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n    var evalValue = this.value._compile(math, argNames);\n    var name = this.object.name;\n    if (!this.index) {\n      // apply a variable to the scope, for example `a=2`\n      if (!isSymbolNode(this.object)) {\n        throw new TypeError('SymbolNode expected as object');\n      }\n      return function evalAssignmentNode(scope, args, context) {\n        var value = evalValue(scope, args, context);\n        scope.set(name, value);\n        return value;\n      };\n    } else if (this.index.isObjectProperty()) {\n      // apply an object property for example `a.b=2`\n      var prop = this.index.getObjectProperty();\n      return function evalAssignmentNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        setSafeProperty(object, prop, value);\n        return value;\n      };\n    } else if (isSymbolNode(this.object)) {\n      // update a matrix subset, for example `a[2]=3`\n      return function evalAssignmentNode(scope, args, context) {\n        var childObject = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n        scope.set(name, assign(childObject, index, value));\n        return value;\n      };\n    } else {\n      // isAccessorNode(node.object) === true\n      // update a matrix subset, for example `a.b[2]=3`\n      // we will not use the compile function of the AccessorNode, but compile it\n      // ourselves here as we need the parent object of the AccessorNode:\n      // wee need to apply the updated object to parent object\n      var evalParentObject = this.object.object._compile(math, argNames);\n      if (this.object.index.isObjectProperty()) {\n        var parentProp = this.object.index.getObjectProperty();\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var childObject = getSafeProperty(parent, parentProp);\n          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          setSafeProperty(parent, parentProp, assign(childObject, index, value));\n          return value;\n        };\n      } else {\n        // if some parameters use the 'end' parameter, we need to calculate the size\n        var evalParentIndex = this.object.index._compile(math, argNames);\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context\n\n          var childObject = access(parent, parentIndex);\n          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          assign(parent, parentIndex, assign(childObject, index, value));\n          return value;\n        };\n      }\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n  AssignmentNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n    if (this.index) {\n      callback(this.index, 'index', this);\n    }\n    callback(this.value, 'value', this);\n  };\n  /**\n   * Create a new AssignmentNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AssignmentNode} Returns a transformed copy of the node\n   */\n\n  AssignmentNode.prototype.map = function (callback) {\n    var object = this._ifNode(callback(this.object, 'object', this));\n    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n    var value = this._ifNode(callback(this.value, 'value', this));\n    return new AssignmentNode(object, index, value);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AssignmentNode}\n   */\n\n  AssignmentNode.prototype.clone = function () {\n    return new AssignmentNode(this.object, this.index, this.value);\n  };\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @private\n   */\n\n  function needParenthesis(node, parenthesis) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n    var precedence = getPrecedence(node, parenthesis);\n    var exprPrecedence = getPrecedence(node.value, parenthesis);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n  AssignmentNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n    var index = this.index ? this.index.toString(options) : '';\n    var value = this.value.toString(options);\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '(' + value + ')';\n    }\n    return object + index + ' = ' + value;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n  AssignmentNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AssignmentNode',\n      object: this.object,\n      index: this.index,\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n   *                       where mathjs is optional\n   * @returns {AssignmentNode}\n   */\n\n  AssignmentNode.fromJSON = function (json) {\n    return new AssignmentNode(json.object, json.index, json.value);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n  AssignmentNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n    var index = this.index ? this.index.toHTML(options) : '';\n    var value = this.value.toHTML(options);\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n    return object + index + '<span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n  AssignmentNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n    var index = this.index ? this.index.toTex(options) : '';\n    var value = this.value.toTex(options);\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = \"\\\\left(\".concat(value, \"\\\\right)\");\n    }\n    return object + index + ':=' + value;\n  };\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["isAccessorNode","isIndexNode","isNode","isSymbolNode","getSafeProperty","setSafeProperty","factory","accessFactory","assignFactory","getPrecedence","name","dependencies","createAssignmentNode","_ref","subset","matrix","Node","access","assign","AssignmentNode","object","index","value","SyntaxError","TypeError","Error","Object","defineProperty","get","isObjectProperty","getObjectProperty","bind","set","prototype","type","isAssignmentNode","_compile","math","argNames","evalObject","evalIndex","evalValue","evalAssignmentNode","scope","args","context","prop","childObject","evalParentObject","parentProp","parent","evalParentIndex","parentIndex","forEach","callback","map","_ifNode","clone","needParenthesis","node","parenthesis","precedence","exprPrecedence","_toString","options","toString","toJSON","mathjs","fromJSON","json","toHTML","_toTex","toTex","concat","isClass"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/expression/node/AssignmentNode.js"],"sourcesContent":["import { isAccessorNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nimport { assignFactory } from './utils/assign.js';\nimport { getPrecedence } from '../operators.js';\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix', // FIXME: should not be needed at all, should be handled by subset\n'Node'];\nexport var createAssignmentNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    matrix,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n  var assign = assignFactory({\n    subset,\n    matrix\n  });\n  /**\n   * @constructor AssignmentNode\n   * @extends {Node}\n   *\n   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n   * replace a subset of a matrix like `A[2,2]=42`.\n   *\n   * Syntax:\n   *\n   *     new AssignmentNode(symbol, value)\n   *     new AssignmentNode(object, index, value)\n   *\n   * Usage:\n   *\n   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\n   *\n   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\n   * @param {IndexNode} [index=null]            Index, property name or matrix\n   *                                            index. Optional. If not provided\n   *                                            and `object` is a SymbolNode,\n   *                                            the property is assigned to the\n   *                                            global scope.\n   * @param {Node} value                        The value to be assigned\n   */\n\n  function AssignmentNode(object, index, value) {\n    if (!(this instanceof AssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.object = object;\n    this.index = value ? index : null;\n    this.value = value || index; // validate input\n\n    if (!isSymbolNode(object) && !isAccessorNode(object)) {\n      throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n    }\n\n    if (isSymbolNode(object) && object.name === 'end') {\n      throw new Error('Cannot assign to symbol \"end\"');\n    }\n\n    if (this.index && !isIndexNode(this.index)) {\n      // index is optional\n      throw new TypeError('IndexNode expected as \"index\"');\n    }\n\n    if (!isNode(this.value)) {\n      throw new TypeError('Node expected as \"value\"');\n    } // readonly property name\n\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AssignmentNode.prototype = new Node();\n  AssignmentNode.prototype.type = 'AssignmentNode';\n  AssignmentNode.prototype.isAssignmentNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AssignmentNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n\n    var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n\n    var evalValue = this.value._compile(math, argNames);\n\n    var name = this.object.name;\n\n    if (!this.index) {\n      // apply a variable to the scope, for example `a=2`\n      if (!isSymbolNode(this.object)) {\n        throw new TypeError('SymbolNode expected as object');\n      }\n\n      return function evalAssignmentNode(scope, args, context) {\n        var value = evalValue(scope, args, context);\n        scope.set(name, value);\n        return value;\n      };\n    } else if (this.index.isObjectProperty()) {\n      // apply an object property for example `a.b=2`\n      var prop = this.index.getObjectProperty();\n      return function evalAssignmentNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        setSafeProperty(object, prop, value);\n        return value;\n      };\n    } else if (isSymbolNode(this.object)) {\n      // update a matrix subset, for example `a[2]=3`\n      return function evalAssignmentNode(scope, args, context) {\n        var childObject = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n        scope.set(name, assign(childObject, index, value));\n        return value;\n      };\n    } else {\n      // isAccessorNode(node.object) === true\n      // update a matrix subset, for example `a.b[2]=3`\n      // we will not use the compile function of the AccessorNode, but compile it\n      // ourselves here as we need the parent object of the AccessorNode:\n      // wee need to apply the updated object to parent object\n      var evalParentObject = this.object.object._compile(math, argNames);\n\n      if (this.object.index.isObjectProperty()) {\n        var parentProp = this.object.index.getObjectProperty();\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var childObject = getSafeProperty(parent, parentProp);\n          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          setSafeProperty(parent, parentProp, assign(childObject, index, value));\n          return value;\n        };\n      } else {\n        // if some parameters use the 'end' parameter, we need to calculate the size\n        var evalParentIndex = this.object.index._compile(math, argNames);\n\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context\n\n          var childObject = access(parent, parentIndex);\n          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          assign(parent, parentIndex, assign(childObject, index, value));\n          return value;\n        };\n      }\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  AssignmentNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n\n    if (this.index) {\n      callback(this.index, 'index', this);\n    }\n\n    callback(this.value, 'value', this);\n  };\n  /**\n   * Create a new AssignmentNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AssignmentNode} Returns a transformed copy of the node\n   */\n\n\n  AssignmentNode.prototype.map = function (callback) {\n    var object = this._ifNode(callback(this.object, 'object', this));\n\n    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n\n    var value = this._ifNode(callback(this.value, 'value', this));\n\n    return new AssignmentNode(object, index, value);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AssignmentNode}\n   */\n\n\n  AssignmentNode.prototype.clone = function () {\n    return new AssignmentNode(this.object, this.index, this.value);\n  };\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @private\n   */\n\n\n  function needParenthesis(node, parenthesis) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n\n    var precedence = getPrecedence(node, parenthesis);\n    var exprPrecedence = getPrecedence(node.value, parenthesis);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n    var index = this.index ? this.index.toString(options) : '';\n    var value = this.value.toString(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '(' + value + ')';\n    }\n\n    return object + index + ' = ' + value;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  AssignmentNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AssignmentNode',\n      object: this.object,\n      index: this.index,\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n   *                       where mathjs is optional\n   * @returns {AssignmentNode}\n   */\n\n\n  AssignmentNode.fromJSON = function (json) {\n    return new AssignmentNode(json.object, json.index, json.value);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n    var index = this.index ? this.index.toHTML(options) : '';\n    var value = this.value.toHTML(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + index + '<span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n    var index = this.index ? this.index.toTex(options) : '';\n    var value = this.value.toTex(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = \"\\\\left(\".concat(value, \"\\\\right)\");\n    }\n\n    return object + index + ':=' + value;\n  };\n\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}