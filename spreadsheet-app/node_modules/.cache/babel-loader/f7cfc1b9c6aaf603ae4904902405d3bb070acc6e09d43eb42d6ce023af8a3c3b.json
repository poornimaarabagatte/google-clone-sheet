{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nimport { extend } from '../../utils/object.js';\nimport { arraySize } from '../../utils/array.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'multiply';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar', 'dot'];\nexport var createMultiply = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    multiplyScalar,\n    equalScalar,\n    dot\n  } = _ref;\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  function _validateMatrixDimensions(size1, size2) {\n    // check left operand dimensions\n    switch (size1.length) {\n      case 1:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Vector x Vector\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');\n            }\n            break;\n          case 2:\n            // Vector x Matrix\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');\n            }\n            break;\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n        break;\n      case 2:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Matrix x Vector\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');\n            }\n            break;\n          case 2:\n            // Matrix x Matrix\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');\n            }\n            break;\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n        break;\n      default:\n        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');\n    }\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (N)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {number}             Scalar value\n   */\n\n  function _multiplyVectorVector(a, b, n) {\n    // check empty vector\n    if (n === 0) {\n      throw new Error('Cannot multiply two empty vectors');\n    }\n    return dot(a, b);\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Matrix         (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n  function _multiplyVectorMatrix(a, b) {\n    // process storage\n    if (b.storage() !== 'dense') {\n      throw new Error('Support for SparseMatrix not implemented');\n    }\n    return _multiplyVectorDenseMatrix(a, b);\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Dense Matrix   (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n  function _multiplyVectorDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var alength = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n    var c = []; // loop matrix columns\n\n    for (var j = 0; j < bcolumns; j++) {\n      // sum (do not initialize it with zero)\n      var sum = mf(adata[0], bdata[0][j]); // loop vector\n\n      for (var i = 1; i < alength; i++) {\n        // multiply & accumulate\n        sum = af(sum, mf(adata[i], bdata[i][j]));\n      }\n      c[j] = sum;\n    } // return matrix\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {Matrix}             Dense Vector   (M)\n   */\n\n  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {\n    'DenseMatrix, any': _multiplyDenseMatrixVector,\n    'SparseMatrix, any': _multiplySparseMatrixVector\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Matrix         (NxC)\n   *\n   * @return {Matrix}             Matrix         (MxC)\n   */\n\n  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {\n    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,\n    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,\n    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,\n    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix  (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             Dense Vector (M)\n   */\n\n  function _multiplyDenseMatrixVector(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // sum (do not initialize it with zero)\n\n      var sum = mf(row[0], bdata[0]); // loop matrix a columns\n\n      for (var j = 1; j < acolumns; j++) {\n        // multiply & accumulate\n        sum = af(sum, mf(row[j], bdata[j]));\n      }\n      c[i] = sum;\n    } // return matrix\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            DenseMatrix    (NxC)\n   *\n   * @return {Matrix}             DenseMatrix    (MxC)\n   */\n\n  function _multiplyDenseMatrixDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // initialize row array\n\n      c[i] = []; // loop matrix b columns\n\n      for (var j = 0; j < bcolumns; j++) {\n        // sum (avoid initializing sum to zero)\n        var sum = mf(row[0], bdata[0][j]); // loop matrix a columns\n\n        for (var x = 1; x < acolumns; x++) {\n          // multiply & accumulate\n          sum = af(sum, mf(row[x], bdata[x][j]));\n        }\n        c[i][j] = sum;\n      }\n    } // return matrix\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            SparseMatrix   (NxC)\n   *\n   * @return {Matrix}             SparseMatrix   (MxC)\n   */\n\n  function _multiplyDenseMatrixSparseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate b matrix\n\n    if (!bvalues) {\n      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');\n    } // rows & columns\n\n    var arows = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = b.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // indeces in column jb\n\n      var kb0 = bptr[jb];\n      var kb1 = bptr[jb + 1]; // do not process column jb if no data exists\n\n      if (kb1 > kb0) {\n        // last row mark processed\n        var last = 0; // loop a rows\n\n        for (var i = 0; i < arows; i++) {\n          // column mark\n          var mark = i + 1; // C[i, jb]\n\n          var cij = void 0; // values in b column j\n\n          for (var kb = kb0; kb < kb1; kb++) {\n            // row\n            var ib = bindex[kb]; // check value has been initialized\n\n            if (last !== mark) {\n              // first value in column jb\n              cij = mf(adata[i][ib], bvalues[kb]); // update mark\n\n              last = mark;\n            } else {\n              // accumulate value\n              cij = af(cij, mf(adata[i][ib], bvalues[kb]));\n            }\n          } // check column has been processed and value != 0\n\n          if (last === mark && !eq(cij, zero)) {\n            // push row & value\n            cindex.push(i);\n            cvalues.push(cij);\n          }\n        }\n      }\n    } // update ptr\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix    (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             SparseMatrix    (M, 1)\n   */\n\n  function _multiplySparseMatrixVector(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0]; // result\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // workspace\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // update ptr\n\n    cptr[0] = 0; // rows in b\n\n    for (var ib = 0; ib < brows; ib++) {\n      // b[ib]\n      var vbi = bdata[ib]; // check b[ib] != 0, avoid loops\n\n      if (!eq(vbi, zero)) {\n        // A values & index in ib column\n        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n          // a row\n          var ia = aindex[ka]; // check value exists in current j\n\n          if (!w[ia]) {\n            // ia is new entry in j\n            w[ia] = true; // add i to pattern of C\n\n            cindex.push(ia); // x(ia) = A\n\n            x[ia] = mf(vbi, avalues[ka]);\n          } else {\n            // i exists in C already\n            x[ia] = af(x[ia], mf(vbi, avalues[ka]));\n          }\n        }\n      }\n    } // copy values from x to column jb of c\n\n    for (var p1 = cindex.length, p = 0; p < p1; p++) {\n      // row\n      var ic = cindex[p]; // copy value\n\n      cvalues[p] = x[ic];\n    } // update ptr\n\n    cptr[1] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, 1],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            DenseMatrix       (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n  function _multiplySparseMatrixDenseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0];\n    var bcolumns = b._size[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // rows in jb\n\n      for (var ib = 0; ib < brows; ib++) {\n        // b[ib, jb]\n        var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops\n\n        if (!eq(vbij, zero)) {\n          // A values & index in ib column\n          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // a row\n            var ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(vbij, avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(vbij, avalues[ka]));\n            }\n          }\n        }\n      } // copy values from x to column jb of c\n\n      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n        // row\n        var ic = cindex[p]; // copy value\n\n        cvalues[p] = x[ic];\n      }\n    } // update ptr\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            SparseMatrix      (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n  function _multiplySparseMatrixSparseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data\n\n    var values = avalues && bvalues; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // variables\n\n    var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // B values & index in j\n\n      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {\n        // b row\n        ib = bindex[kb]; // check we need to process values\n\n        if (values) {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(bvalues[kb], avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));\n            }\n          }\n        } else {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia);\n            }\n          }\n        }\n      } // check we need to process matrix values (pattern matrix)\n\n      if (values) {\n        // copy values from x to column jb of c\n        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n          // row\n          var ic = cindex[p]; // copy value\n\n          cvalues[p] = x[ic];\n        }\n      }\n    } // update ptr\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * Multiply two or more values, `x * y`.\n   * For matrices, the matrix product is calculated.\n   *\n   * Syntax:\n   *\n   *    math.multiply(x, y)\n   *    math.multiply(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.multiply(4, 5.2)        // returns number 20.8\n   *    math.multiply(2, 3, 4)       // returns number 24\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.multiply(a, b)          // returns Complex 5 + 14i\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    const d = [[1, 2, 3], [3, -4, 7]]\n   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]\n   *\n   *    const e = math.unit('2.1 km')\n   *    math.multiply(3, e)          // returns Unit 6.3 km\n   *\n   * See also:\n   *\n   *    divide, prod, cross, dot\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`\n   */\n\n  return typed(name, extend({\n    // we extend the signatures of multiplyScalar with signatures dealing with matrices\n    'Array, Array': function ArrayArray(x, y) {\n      // check dimensions\n      _validateMatrixDimensions(arraySize(x), arraySize(y)); // use dense matrix implementation\n\n      var m = this(matrix(x), matrix(y)); // return array or scalar\n\n      return isMatrix(m) ? m.valueOf() : m;\n    },\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // dimensions\n      var xsize = x.size();\n      var ysize = y.size(); // check dimensions\n\n      _validateMatrixDimensions(xsize, ysize); // process dimensions\n\n      if (xsize.length === 1) {\n        // process y dimensions\n        if (ysize.length === 1) {\n          // Vector * Vector\n          return _multiplyVectorVector(x, y, xsize[0]);\n        } // Vector * Matrix\n\n        return _multiplyVectorMatrix(x, y);\n      } // process y dimensions\n\n      if (ysize.length === 1) {\n        // Matrix * Vector\n        return _multiplyMatrixVector(x, y);\n      } // Matrix * Matrix\n\n      return _multiplyMatrixMatrix(x, y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use Matrix * Matrix implementation\n      return this(x, matrix(y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use Matrix * Matrix implementation\n      return this(matrix(x, y.storage()), y);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, multiplyScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm11(y, x, multiplyScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, multiplyScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();\n    },\n    'any, any': multiplyScalar,\n    'any, any, ...any': function anyAnyAny(x, y, rest) {\n      var result = this(x, y);\n      for (var i = 0; i < rest.length; i++) {\n        result = this(result, rest[i]);\n      }\n      return result;\n    }\n  }, multiplyScalar.signatures));\n});","map":{"version":3,"names":["factory","isMatrix","extend","arraySize","createAlgorithm11","createAlgorithm14","name","dependencies","createMultiply","_ref","typed","matrix","addScalar","multiplyScalar","equalScalar","dot","algorithm11","algorithm14","_validateMatrixDimensions","size1","size2","length","RangeError","Error","_multiplyVectorVector","a","b","n","_multiplyVectorMatrix","storage","_multiplyVectorDenseMatrix","adata","_data","asize","_size","adt","_datatype","bdata","bsize","bdt","alength","bcolumns","dt","af","mf","find","c","j","sum","i","createDenseMatrix","data","size","datatype","_multiplyMatrixVector","_multiplyDenseMatrixVector","_multiplySparseMatrixVector","_multiplyMatrixMatrix","_multiplyDenseMatrixDenseMatrix","_multiplyDenseMatrixSparseMatrix","_multiplySparseMatrixDenseMatrix","_multiplySparseMatrixSparseMatrix","arows","acolumns","row","x","bvalues","_values","bindex","_index","bptr","_ptr","eq","zero","convert","cvalues","cindex","cptr","createSparseMatrix","values","index","ptr","jb","kb0","kb1","last","mark","cij","kb","ib","push","avalues","aindex","aptr","brows","w","vbi","ka0","ka1","ka","ia","p1","p","ic","vbij","p0","undefined","ArrayArray","y","m","valueOf","MatrixMatrix","xsize","ysize","MatrixArray","ArrayMatrix","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray","anyAnyAny","rest","result","signatures"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/function/arithmetic/multiply.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nimport { extend } from '../../utils/object.js';\nimport { arraySize } from '../../utils/array.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'multiply';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar', 'dot'];\nexport var createMultiply = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    multiplyScalar,\n    equalScalar,\n    dot\n  } = _ref;\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n\n  function _validateMatrixDimensions(size1, size2) {\n    // check left operand dimensions\n    switch (size1.length) {\n      case 1:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Vector x Vector\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');\n            }\n\n            break;\n\n          case 2:\n            // Vector x Matrix\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');\n            }\n\n            break;\n\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n\n        break;\n\n      case 2:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Matrix x Vector\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');\n            }\n\n            break;\n\n          case 2:\n            // Matrix x Matrix\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');\n            }\n\n            break;\n\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n\n        break;\n\n      default:\n        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');\n    }\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (N)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {number}             Scalar value\n   */\n\n\n  function _multiplyVectorVector(a, b, n) {\n    // check empty vector\n    if (n === 0) {\n      throw new Error('Cannot multiply two empty vectors');\n    }\n\n    return dot(a, b);\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Matrix         (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n\n  function _multiplyVectorMatrix(a, b) {\n    // process storage\n    if (b.storage() !== 'dense') {\n      throw new Error('Support for SparseMatrix not implemented');\n    }\n\n    return _multiplyVectorDenseMatrix(a, b);\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Dense Matrix   (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n\n  function _multiplyVectorDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var alength = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix columns\n\n    for (var j = 0; j < bcolumns; j++) {\n      // sum (do not initialize it with zero)\n      var sum = mf(adata[0], bdata[0][j]); // loop vector\n\n      for (var i = 1; i < alength; i++) {\n        // multiply & accumulate\n        sum = af(sum, mf(adata[i], bdata[i][j]));\n      }\n\n      c[j] = sum;\n    } // return matrix\n\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {Matrix}             Dense Vector   (M)\n   */\n\n\n  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {\n    'DenseMatrix, any': _multiplyDenseMatrixVector,\n    'SparseMatrix, any': _multiplySparseMatrixVector\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Matrix         (NxC)\n   *\n   * @return {Matrix}             Matrix         (MxC)\n   */\n\n\n  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {\n    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,\n    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,\n    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,\n    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix  (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             Dense Vector (M)\n   */\n\n\n  function _multiplyDenseMatrixVector(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // sum (do not initialize it with zero)\n\n      var sum = mf(row[0], bdata[0]); // loop matrix a columns\n\n      for (var j = 1; j < acolumns; j++) {\n        // multiply & accumulate\n        sum = af(sum, mf(row[j], bdata[j]));\n      }\n\n      c[i] = sum;\n    } // return matrix\n\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            DenseMatrix    (NxC)\n   *\n   * @return {Matrix}             DenseMatrix    (MxC)\n   */\n\n\n  function _multiplyDenseMatrixDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // initialize row array\n\n      c[i] = []; // loop matrix b columns\n\n      for (var j = 0; j < bcolumns; j++) {\n        // sum (avoid initializing sum to zero)\n        var sum = mf(row[0], bdata[0][j]); // loop matrix a columns\n\n        for (var x = 1; x < acolumns; x++) {\n          // multiply & accumulate\n          sum = af(sum, mf(row[x], bdata[x][j]));\n        }\n\n        c[i][j] = sum;\n      }\n    } // return matrix\n\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            SparseMatrix   (NxC)\n   *\n   * @return {Matrix}             SparseMatrix   (MxC)\n   */\n\n\n  function _multiplyDenseMatrixSparseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate b matrix\n\n    if (!bvalues) {\n      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');\n    } // rows & columns\n\n\n    var arows = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = b.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // indeces in column jb\n\n      var kb0 = bptr[jb];\n      var kb1 = bptr[jb + 1]; // do not process column jb if no data exists\n\n      if (kb1 > kb0) {\n        // last row mark processed\n        var last = 0; // loop a rows\n\n        for (var i = 0; i < arows; i++) {\n          // column mark\n          var mark = i + 1; // C[i, jb]\n\n          var cij = void 0; // values in b column j\n\n          for (var kb = kb0; kb < kb1; kb++) {\n            // row\n            var ib = bindex[kb]; // check value has been initialized\n\n            if (last !== mark) {\n              // first value in column jb\n              cij = mf(adata[i][ib], bvalues[kb]); // update mark\n\n              last = mark;\n            } else {\n              // accumulate value\n              cij = af(cij, mf(adata[i][ib], bvalues[kb]));\n            }\n          } // check column has been processed and value != 0\n\n\n          if (last === mark && !eq(cij, zero)) {\n            // push row & value\n            cindex.push(i);\n            cvalues.push(cij);\n          }\n        }\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix    (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             SparseMatrix    (M, 1)\n   */\n\n\n  function _multiplySparseMatrixVector(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0]; // result\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // workspace\n\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // update ptr\n\n    cptr[0] = 0; // rows in b\n\n    for (var ib = 0; ib < brows; ib++) {\n      // b[ib]\n      var vbi = bdata[ib]; // check b[ib] != 0, avoid loops\n\n      if (!eq(vbi, zero)) {\n        // A values & index in ib column\n        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n          // a row\n          var ia = aindex[ka]; // check value exists in current j\n\n          if (!w[ia]) {\n            // ia is new entry in j\n            w[ia] = true; // add i to pattern of C\n\n            cindex.push(ia); // x(ia) = A\n\n            x[ia] = mf(vbi, avalues[ka]);\n          } else {\n            // i exists in C already\n            x[ia] = af(x[ia], mf(vbi, avalues[ka]));\n          }\n        }\n      }\n    } // copy values from x to column jb of c\n\n\n    for (var p1 = cindex.length, p = 0; p < p1; p++) {\n      // row\n      var ic = cindex[p]; // copy value\n\n      cvalues[p] = x[ic];\n    } // update ptr\n\n\n    cptr[1] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, 1],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            DenseMatrix       (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n\n  function _multiplySparseMatrixDenseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0];\n    var bcolumns = b._size[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // rows in jb\n\n      for (var ib = 0; ib < brows; ib++) {\n        // b[ib, jb]\n        var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops\n\n        if (!eq(vbij, zero)) {\n          // A values & index in ib column\n          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // a row\n            var ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(vbij, avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(vbij, avalues[ka]));\n            }\n          }\n        }\n      } // copy values from x to column jb of c\n\n\n      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n        // row\n        var ic = cindex[p]; // copy value\n\n        cvalues[p] = x[ic];\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            SparseMatrix      (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n\n  function _multiplySparseMatrixSparseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data\n\n    var values = avalues && bvalues; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // variables\n\n    var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // B values & index in j\n\n      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {\n        // b row\n        ib = bindex[kb]; // check we need to process values\n\n        if (values) {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(bvalues[kb], avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));\n            }\n          }\n        } else {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia);\n            }\n          }\n        }\n      } // check we need to process matrix values (pattern matrix)\n\n\n      if (values) {\n        // copy values from x to column jb of c\n        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n          // row\n          var ic = cindex[p]; // copy value\n\n          cvalues[p] = x[ic];\n        }\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * Multiply two or more values, `x * y`.\n   * For matrices, the matrix product is calculated.\n   *\n   * Syntax:\n   *\n   *    math.multiply(x, y)\n   *    math.multiply(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.multiply(4, 5.2)        // returns number 20.8\n   *    math.multiply(2, 3, 4)       // returns number 24\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.multiply(a, b)          // returns Complex 5 + 14i\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    const d = [[1, 2, 3], [3, -4, 7]]\n   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]\n   *\n   *    const e = math.unit('2.1 km')\n   *    math.multiply(3, e)          // returns Unit 6.3 km\n   *\n   * See also:\n   *\n   *    divide, prod, cross, dot\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`\n   */\n\n\n  return typed(name, extend({\n    // we extend the signatures of multiplyScalar with signatures dealing with matrices\n    'Array, Array': function ArrayArray(x, y) {\n      // check dimensions\n      _validateMatrixDimensions(arraySize(x), arraySize(y)); // use dense matrix implementation\n\n\n      var m = this(matrix(x), matrix(y)); // return array or scalar\n\n      return isMatrix(m) ? m.valueOf() : m;\n    },\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // dimensions\n      var xsize = x.size();\n      var ysize = y.size(); // check dimensions\n\n      _validateMatrixDimensions(xsize, ysize); // process dimensions\n\n\n      if (xsize.length === 1) {\n        // process y dimensions\n        if (ysize.length === 1) {\n          // Vector * Vector\n          return _multiplyVectorVector(x, y, xsize[0]);\n        } // Vector * Matrix\n\n\n        return _multiplyVectorMatrix(x, y);\n      } // process y dimensions\n\n\n      if (ysize.length === 1) {\n        // Matrix * Vector\n        return _multiplyMatrixVector(x, y);\n      } // Matrix * Matrix\n\n\n      return _multiplyMatrixMatrix(x, y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use Matrix * Matrix implementation\n      return this(x, matrix(y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use Matrix * Matrix implementation\n      return this(matrix(x, y.storage()), y);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, multiplyScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm11(y, x, multiplyScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, multiplyScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();\n    },\n    'any, any': multiplyScalar,\n    'any, any, ...any': function anyAnyAny(x, y, rest) {\n      var result = this(x, y);\n\n      for (var i = 0; i < rest.length; i++) {\n        result = this(result, rest[i]);\n      }\n\n      return result;\n    }\n  }, multiplyScalar.signatures));\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}