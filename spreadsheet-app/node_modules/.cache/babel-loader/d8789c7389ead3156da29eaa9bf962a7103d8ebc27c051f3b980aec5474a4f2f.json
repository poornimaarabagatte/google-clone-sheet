{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'algorithm07';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createAlgorithm07 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    DenseMatrix\n  } = _ref;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j) = f(Aij, Bij)\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm07(a, b, callback) {\n    // sparse matrix arrays\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // vars\n\n    var i, j; // result arrays\n\n    var cdata = []; // initialize c\n\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    } // workspaces\n\n    var xa = [];\n    var xb = []; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace\n\n      _scatter(b, j, wb, xb, mark); // loop rows\n\n      for (i = 0; i < rows; i++) {\n        // matrix values @ i,j\n        var va = wa[i] === mark ? xa[i] : zero;\n        var vb = wb[i] === mark ? xb[i] : zero; // invoke callback\n\n        cdata[i][j] = cf(va, vb);\n      }\n    } // return dense matrix\n\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n  function _scatter(m, j, w, x, mark) {\n    // a arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // loop values in column j\n\n    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {\n      // row\n      var i = index[k]; // update workspace\n\n      w[i] = mark;\n      x[i] = values[k];\n    }\n  }\n});","map":{"version":3,"names":["factory","DimensionError","name","dependencies","createAlgorithm07","_ref","typed","DenseMatrix","algorithm07","a","b","callback","asize","_size","adt","_datatype","bsize","bdt","length","RangeError","rows","columns","dt","zero","cf","convert","find","i","j","cdata","xa","xb","wa","wb","mark","_scatter","va","vb","data","size","datatype","m","w","x","values","_values","index","_index","ptr","_ptr","k","k1"],"sources":["/Users/poornima/Desktop/Google_Sheet/spreadsheet-app/node_modules/mathjs/lib/esm/type/matrix/utils/algorithm07.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'algorithm07';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createAlgorithm07 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    DenseMatrix\n  } = _ref;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j) = f(Aij, Bij)\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm07(a, b, callback) {\n    // sparse matrix arrays\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // vars\n\n\n    var i, j; // result arrays\n\n    var cdata = []; // initialize c\n\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    } // workspaces\n\n\n    var xa = [];\n    var xb = []; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace\n\n\n      _scatter(b, j, wb, xb, mark); // loop rows\n\n\n      for (i = 0; i < rows; i++) {\n        // matrix values @ i,j\n        var va = wa[i] === mark ? xa[i] : zero;\n        var vb = wb[i] === mark ? xb[i] : zero; // invoke callback\n\n        cdata[i][j] = cf(va, vb);\n      }\n    } // return dense matrix\n\n\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n\n  function _scatter(m, j, w, x, mark) {\n    // a arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // loop values in column j\n\n    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {\n      // row\n      var i = index[k]; // update workspace\n\n      w[i] = mark;\n      x[i] = values[k];\n    }\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}